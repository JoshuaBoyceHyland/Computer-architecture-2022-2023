00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 19/03/2023 00:25:07

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 25/02/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  * BASICALLY CONSTANTS
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21  
00001000  =00000009                 22  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            23  
00001000                            24  *-----------------------------------------------------------
00001000                            25  * Section       : Charater Setup
00001000                            26  * Description   : Size of Player and Enemy and properties
00001000                            27  * of these characters e.g Starting Positions and Sizes
00001000                            28  *-----------------------------------------------------------
00001000  =00000008                 29  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 30  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            31  
00001000  =00000000                 32  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 33  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000  =00000001                 34  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            35  
00001000  =00000001                 36  PLYR_POS_MOVEMENT EQU   01          ; player movement
00001000  =00000001                 37  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 38  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            39  
00001000  =00000000                 40  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 41  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 42  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            43  
00001000  =0000000A                 44  ENMY_W_INIT EQU         10          ; Enemy initial Width
00001000  =0000000A                 45  ENMY_H_INIT EQU         10          ; Enemy initial Height
00001000  =00000005                 46  NUM_OF_ENEMYS    EQU    05          ; number of enemys 
00001000                            47  
00001000  =00000005                 48  BULLET_W    EQU         05          ; bullet width
00001000  =00000005                 49  BULLET_H    EQU         05          ; bullet height
00001000                            50  
00001000                            51  
00001000                            52  *-----------------------------------------------------------
00001000                            53  * Section       : Game Stats
00001000                            54  * Description   : Points
00001000                            55  *-----------------------------------------------------------
00001000  =00000001                 56  POINTS      EQU         01          ; Points added
00001000                            57  
00001000                            58  *-----------------------------------------------------------
00001000                            59  * Section       : Keyboard Keys
00001000                            60  * Description   : Spacebar and Escape or two functioning keys
00001000                            61  * Spacebar to JUMP and Escape to Exit Game
00001000                            62  *-----------------------------------------------------------
00001000  =00000020                 63  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 64  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000  =00000044                 65  D           EQU         $44         ; D ASCII Keycode
00001000  =00000057                 66  W           EQU         $57         ; W ASCII KeyCode
00001000  =00000041                 67  A           EQU         $41         ; A ASCII Keycode
00001000  =00000053                 68  S           EQU         $53         ; S ASCII Keycode   
00001000                            69  
00001000                            70  *-----------------------------------------------------------
00001000                            71  * Section       : Speed
00001000                            72  * Description   : movement speed 
00001000                            73  *-----------------------------------------------------------
00001000  =0000000A                 74  SPEED           EQU         10          ; speed for character
00001000  =00000014                 75  BULLET_SPEED    EQU         20          ; speed for bullet
00001000                            76  *-----------------------------------------------------------
00001000                            77  * Subroutine    : Initialise
00001000                            78  * Description   : Initialise game data into memory such as 
00001000                            79  * sounds and screen size
00001000                            80  *-----------------------------------------------------------
00001000                            81  INITIALISE:
00001000                            82      ; Initialise Sounds
00001000  6100 0424                 83      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 043E                 84      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 0458                 85      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            86  
0000100C                            87      ; Screen Size
0000100C  103C 0021                 88      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      89      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      90      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 000015A4             91      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      92      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 000015A2             93      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            94  
00001022                            95      ; Place the Player at the center of the screen
00001022  4281                      96      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  3239 000015A2             97      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102A  82FC 0002                 98      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102E  23C1 000015AE             99      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001034                           100  
00001034  4281                     101      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001036                           102      * MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001036                           103      * SUB.L    #50,        D1          ; divide by 2 for center on Y Axis
00001036  23FC 000001C2 000015B2   104      MOVE.L  #450,         PLAYER_Y    ; Players Y Position
00001040                           105  
00001040                           106      ; Initialise Player Score
00001040  4281                     107      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001042  7200                     108      MOVE.L  #00,        D1          ; Init Score
00001044  23C1 000015B6            109      MOVE.L  D1,         PLAYER_SCORE
0000104A                           110  
0000104A                           111      ; Initialise Player Velocity
0000104A  4281                     112      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104C  123C 0000                113      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001050  23C1 000015BA            114      MOVE.L  D1,         PLYR_VELOCITY
00001056                           115  
00001056                           116  
00001056                           117      ; Initialize Player on Ground
00001056  23FC 00000001 000015C2   118      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001060                           119  
00001060                           120      ; Initial Position for Enemy
00001060                           121      * CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001060                           122      * MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001060                           123      * MOVE.L  #200,         ENEMY_X     ; Enemy X Position
00001060                           124  
00001060                           125      * CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001060                           126      * MOVE.W  SCREEN_H,   D1         ; Place Screen width in D1
00001060                           127      * DIVU    #02,        D1         ; divide by 2 for center on Y Axis
00001060                           128      * MOVE.L  #200,         ENEMY_Y     ; Enemy Y Position
00001060                           129     ; BRA INITIALISE_ENEMYS
00001060                           130  
00001060                           131      ; intitial pos for test bullet
00001060  4281                     132      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001062  323C 0064                133      MOVE.W  #100,   D1          ; Place Screen width in D1
00001066  23C1 000015F2            134      MOVE.L  D1,         BULLET_X     ; Enemy X Position
0000106C                           135  
0000106C  4281                     136      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000106E  323C 0064                137      MOVE.W  #100,   D1         ; Place Screen width in D1
00001072                           138      ;DIVU    #02,        D1         ; divide by 2 for center on Y Axis
00001072  23FC 00000064 000015F6   139      MOVE.L  #100,   BULLET_Y     ; Enemy Y Position
0000107C                           140  
0000107C                           141      ; initialisation of booleans for bullet been shot and enemy moving right
0000107C  4281                     142      CLR.L D1
0000107E  323C 0000                143      MOVE.W #0, D1
00001082  13C1 000015A6            144      MOVE.B D1, BEEN_SHOT
00001088  13C1 000015EE            145      MOVE.B D1, ENEMY_MOVING_R ; makes false so is moving left to start
0000108E                           146  
0000108E                           147  
0000108E                           148      ; Enable the screen back buffer(see easy 68k help)
0000108E  103C 005C                149      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001092  123C 0011                150      MOVE.B  #17,        D1          ; Combine Tasks
00001096  4E4F                     151      TRAP    #15                     ; Trap (Perform action)
00001098                           152  
00001098                           153      ; Clear the screen (see easy 68k help)
00001098  103C 000B                154      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000109C  323C FF00                155      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010A0  4E4F                     156      TRAP    #15                     ; Trap (Perform action)
000010A2                           157  *-----------------------------------------------------------
000010A2                           158  * Subroutine    : initialise enemey positions
000010A2                           159  * Description   : sets up the positions for enemys 
000010A2                           160  *-----------------------------------------------------------
000010A2                           161  INITIALISE_ENEMYS:
000010A2  4281                     162      CLR.L D1
000010A4  4282                     163      CLR.L D2
000010A6  4283                     164      CLR.L D3
000010A8                           165  
000010A8  123C 0005                166      MOVE.B #NUM_OF_ENEMYS, D1 ; will be used to compare and increment loop 
000010AC  5301                     167      SUB.B #1, D1              ; takes away 1 so loop doesnt go out of range of array (because obviously starts at )
000010AE                           168  
000010AE  41F9 000015C6            169      LEA ENEMY_ARRAY_X, A0
000010B4  43F9 000015DA            170      LEA ENEMY_ARRAY_Y, A1
000010BA                           171  
000010BA  7464                     172      MOVE.L #100, D2           ; first position for x
000010BC  263C 000000C8            173      MOVE.L #200, D3           ; position for y, wont be changed for now
000010C2                           174  
000010C2                           175  INITIALISE_ENEMY_POSITIONS_LOOP:
000010C2                           176      *X pos set up*
000010C2  20C2                     177      MOVE.L D2, (A0)+          ; moves value of d2 into A0 which in first iteration is bast address of array and then increments it to next adrees with the "+"
000010C4  0682 0000004B            178      ADD.L #75, D2          ; adds 75, next element will be 175, 250 and so on
000010CA                           179  
000010CA                           180      *Y pos set up*
000010CA  22C3                     181      MOVE.L D3, (A1)+          ; moves 
000010CC                           182  
000010CC  51C9 FFF4                183      DBRA D1, INITIALISE_ENEMY_POSITIONS_LOOP    ; compares d1 to -1, if it greater than, it will exicute function again otherwise will return
000010D0                           184  
000010D0                           185      ;RTS
000010D0                           186  
000010D0                           187  
000010D0                           188  
000010D0                           189  
000010D0                           190  
000010D0                           191  
000010D0                           192  *-----------------------------------------------------------
000010D0                           193  * Subroutine    : Game
000010D0                           194  * Description   : Game including main GameLoop. GameLoop is like
000010D0                           195  * a while loop in that it runs forever until interupted
000010D0                           196  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010D0                           197  *-----------------------------------------------------------
000010D0                           198  GAME:
000010D0  6100 0366                199      BSR     PLAY_RUN                ; Play Run Wav
000010D4                           200  GAMELOOP:
000010D4                           201      ; Main Gameloop
000010D4  103C 0008                202      MOVE.B #8, D0                   ; D0 IS ONLY USED FOR COMMANDS, OUTPUST FROM THIS GOINTO OTHER DATA REGISTERS, THIS WILL BE STORED IN D1 
000010D8  4E4F                     203      TRAP #15     
000010DA  23C1 000015FA            204      MOVE.L D1, DELTA_TIME                   ; TRAP 15 RUNS COMMAND 15   
000010E0  6100 0074                205      BSR     INPUT                   ; Check Keyboard Input
000010E4  6100 00C4                206      BSR     UPDATE                  ; Update positions and points
000010E8  6100 001C                207      BSR     UPDATE_BULLET
000010EC                           208      ;BSR     UPDATE_ENEMY
000010EC                           209      ;BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010EC                           210      ;BSR     CHECK_COLLISIONS        ; Check for Collisions
000010EC  6100 00D8                211      BSR     DRAW                    ; Draw the Scene
000010F0                           212      
000010F0                           213  
000010F0                           214  DELTA_t:
000010F0  103C 0008                215      MOVE.B #8, D0                   ;CURRENT TIME 
000010F4  4E4F                     216      TRAP #15  
000010F6  92B9 000015FA            217      SUB.L DELTA_TIME, D1            ; TAKING AWAY DELTATIME FROM CURRENT TO CHECK REMAINDER, 
000010FC                           218      
000010FC  B2BC 00000004            219      CMP.L #4, D1
00001102  6BEC                     220      BMI.S DELTA_t                     ; if deltam time is lesser or equal to 17; branch lesser or equal to 
00001104  60CE                     221      BRA GAMELOOP
00001106                           222  
00001106                           223  
00001106                           224  UPDATE_BULLET:
00001106  6100 0014                225      BSR CHECK_FOR_BULLET_RESPAWN
0000110A  0C39 0000 000015A6       226      CMP.B #0, BEEN_SHOT
00001112  6700 0020                227      BEQ BULLET_TRACK_PLAYER ; if the bullet has not been shot will track player
00001116  6000 0032                228      BRA SHOOT_BULLET
0000111A  4E75                     229      RTS
0000111C                           230  
0000111C                           231  * UPDATE_ENEMY:
0000111C                           232  *     CMP.B #0, ENEMY_MOVING_R
0000111C                           233  *     BEQ MOVE_ENEMY_LEFT
0000111C                           234  *     BRA MOVE_ENEMY_RIGHT
0000111C                           235  *     RTS
0000111C                           236  
0000111C                           237  
0000111C                           238  * MOVE_ENEMY_RIGHT:
0000111C                           239  *     ADD.L #1, ENEMY_X
0000111C                           240  *     RTS
0000111C                           241  
0000111C                           242  * MOVE_ENEMY_LEFT:
0000111C                           243  *     SUB.L #1, ENEMY_X
0000111C                           244  *     RTS
0000111C                           245      
0000111C                           246  
0000111C                           247  CHECK_FOR_BULLET_RESPAWN:
0000111C  0CB9 00000000 000015F6   248      CMP.L #0, BULLET_Y
00001126  6D00 0004                249      BLT RESPAWN_BULLET
0000112A  4E75                     250      RTS
0000112C                           251  
0000112C                           252  RESPAWN_BULLET:
0000112C  53B9 000015A6            253      SUB.L #1, BEEN_SHOT
00001132  4E75                     254      RTS
00001134                           255      
00001134                           256  
00001134                           257  BULLET_TRACK_PLAYER:
00001134  23F9 000015AE 000015F2   258      MOVE.L PLAYER_X, BULLET_X
0000113E  23F9 000015B2 000015F6   259      MOVE.L PLAYER_Y, BULLET_Y
00001148  4E75                     260      RTS
0000114A                           261  
0000114A                           262  SHOOT_BULLET:
0000114A  04B9 0000000A 000015F6   263      SUB.L #10, BULLET_Y
00001154  4E75                     264      RTS
00001156                           265  *-----------------------------------------------------------
00001156                           266  * Subroutine    : Input
00001156                           267  * Description   : Process Keyboard Input
00001156                           268  *-----------------------------------------------------------
00001156                           269  INPUT:
00001156                           270      ; Process Input
00001156  4281                     271      CLR.L   D1                      ; Clear Data Register
00001158  103C 0013                272      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
0000115C  223C 20415344            273      MOVE.L #$20415344,D1            ; ALL THE INPUTS PUT IN D1 WASD, IN ONE BYTE
00001162  4E4F                     274      TRAP   #15                      ; DEXCUTES ABOVE AND CHECKS IF ny have been pushed
00001164                           275  
00001164                           276     * CHECKS CORRESPONG NUMBERS ARE BEING PRESSED
00001164  B2BC FFFF0000            277      CMP.L  #$FFFF0000, D1           ; SPACE
0000116A  6700 029C                278      BEQ    SHOOT
0000116E  6700 0284                279      BEQ    MOVE_LEFT
00001172                           280  
00001172  B2BC FF0000FF            281      CMP.L  #$FF0000FF, D1           ; SPACE
00001178  6700 028E                282      BEQ    SHOOT
0000117C  6700 0262                283      BEQ    MOVE_RIGHT
00001180                           284  
00001180  B2BC FF000000            285      CMP.L  #$FF000000, D1           ; SPACE
00001186  6700 0280                286      BEQ    SHOOT
0000118A                           287  
0000118A  B2BC 00FF0000            288      CMP.L  #$00FF0000, D1           ; A
00001190  6700 0262                289      BEQ    MOVE_LEFT
00001194                           290  
00001194  B2BC 0000FF00            291      CMP.L  #$0000FF00, D1           ; S
0000119A  6700 0278                292      BEQ    MOVE_DOWN
0000119E                           293  
0000119E  B2BC 000000FF            294      CMP.L  #$000000FF, D1           ; D
000011A4  6700 023A                295      BEQ    MOVE_RIGHT
000011A8  4E75                     296      RTS                             ; Return to subroutine
000011AA                           297  
000011AA                           298  
000011AA                           299  
000011AA                           300  *-----------------------------------------------------------
000011AA                           301  * Subroutine    : Update
000011AA                           302  * Description   : Main update loop update Player and Enemies
000011AA                           303  *-----------------------------------------------------------
000011AA                           304  UPDATE:
000011AA                           305      ; Update the Players Positon based on Velocity and Gravity
000011AA  4281                     306      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011AC  2239 000015BA            307      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
000011B2  23C1 000015BA            308      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
000011B8  D2B9 000015B2            309      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
000011BE  23C1 000015B2            310      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
000011C4                           311  
000011C4                           312      ; Move the Enemy
000011C4                           313      ;CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011C4                           314      ;CLR.L   D1                      ; Clear the contents of D0
000011C4                           315     ; MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
000011C4                           316      ;CMP.L   #00,        D1
000011C4                           317      ;BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
000011C4                           318     ;BRA     MOVE_ENEMY              ; Move the Enemy
000011C4                           319  
000011C4  4E75                     320      RTS                             ; Return to subroutine  
000011C6                           321  
000011C6                           322  *-----------------------------------------------------------
000011C6                           323  * Subroutine    : Move Enemy
000011C6                           324  * Description   : Move Enemy Right to Left
000011C6                           325  *-----------------------------------------------------------
000011C6                           326  * MOVE_ENEMY:
000011C6                           327  *     SUB.L   #01,        ENEMY_X     ; Move enemy by X Value
000011C6                           328  *     RTS
000011C6                           329  
000011C6                           330  *-----------------------------------------------------------
000011C6                           331  * Subroutine    : Reset Enemy
000011C6                           332  * Description   : Reset Enemy if to passes 0 to Right of Screen
000011C6                           333  *-----------------------------------------------------------
000011C6                           334  * RESET_ENEMY_POSITION:
000011C6                           335  *     CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011C6                           336  *     MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000011C6                           337  *     MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000011C6                           338  *     RTS
000011C6                           339  
000011C6                           340  *-----------------------------------------------------------
000011C6                           341  * Subroutine    : Draw
000011C6                           342  * Description   : Draw Screen
000011C6                           343  *-----------------------------------------------------------
000011C6                           344  DRAW: 
000011C6                           345      ; Enable back buffer
000011C6  103C 005E                346      MOVE.B  #94,        D0
000011CA  4E4F                     347      TRAP    #15
000011CC                           348  
000011CC                           349      ; Clear the screen
000011CC  103C 000B                350      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011D0  323C FF00                351      MOVE.W  #$FF00,     D1          ; Clear contents
000011D4  4E4F                     352      TRAP    #15                     ; Trap (Perform action)
000011D6                           353  
000011D6  6100 0010                354      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000011DA  6100 02A4                355      BSR     DRAW_PLAYER             ; Draw Player
000011DE  6100 02D0                356      BSR     DRAW_ENEMY              ; Draw Enemy
000011E2  6100 0316                357      BSR     DRAW_BULLET             ; draw bullet
000011E6  4E75                     358      RTS                             ; Return to subroutine
000011E8                           359  
000011E8                           360  *-----------------------------------------------------------
000011E8                           361  * Subroutine    : Draw Player Data
000011E8                           362  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000011E8                           363  *-----------------------------------------------------------
000011E8                           364  DRAW_PLYR_DATA:
000011E8  4281                     365      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011EA                           366  
000011EA                           367      ; Player Score Message
000011EA  103C 000B                368      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011EE  323C 0201                369      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000011F2  4E4F                     370      TRAP    #15                     ; Trap (Perform action)
000011F4  43F9 0000154A            371      LEA     SCORE_MSG,  A1          ; Score Message
000011FA  303C 000D                372      MOVE    #13,        D0          ; No Line feed
000011FE  4E4F                     373      TRAP    #15                     ; Trap (Perform action)
00001200                           374  
00001200                           375      ; Player Score Value
00001200  103C 000B                376      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001204  323C 0901                377      MOVE.W  #$0901,     D1          ; Col 09, Row 01
00001208  4E4F                     378      TRAP    #15                     ; Trap (Perform action)
0000120A  103C 0003                379      MOVE.B  #03,        D0          ; Display number at D1.L
0000120E  2239 000015B6            380      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00001214  4E4F                     381      TRAP    #15                     ; Trap (Perform action)
00001216                           382      
00001216                           383      ; Player X Message
00001216  103C 000B                384      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000121A  323C 0202                385      MOVE.W  #$0202,     D1          ; Col 02, Row 02
0000121E  4E4F                     386      TRAP    #15                     ; Trap (Perform action)
00001220  43F9 00001584            387      LEA     X_MSG,      A1          ; X Message
00001226  303C 000D                388      MOVE    #13,        D0          ; No Line feed
0000122A  4E4F                     389      TRAP    #15                     ; Trap (Perform action)
0000122C                           390      
0000122C                           391      ; Player X
0000122C  103C 000B                392      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00001230  323C 0502                393      MOVE.W  #$0502,     D1          ; Col 05, Row 02
00001234  4E4F                     394      TRAP    #15                     ; Trap (Perform action)
00001236  103C 0003                395      MOVE.B  #03,        D0          ; Display number at D1.L
0000123A  2239 000015AE            396      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
00001240  4E4F                     397      TRAP    #15                     ; Trap (Perform action)
00001242                           398      
00001242                           399      ; Player Y Message
00001242  103C 000B                400      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001246  323C 1002                401      MOVE.W  #$1002,     D1          ; Col 10, Row 02
0000124A  4E4F                     402      TRAP    #15                     ; Trap (Perform action)
0000124C  43F9 00001587            403      LEA     Y_MSG,      A1          ; Y Message
00001252  303C 000D                404      MOVE    #13,        D0          ; No Line feed
00001256  4E4F                     405      TRAP    #15                     ; Trap (Perform action)
00001258                           406      
00001258                           407      ; Player Y
00001258  103C 000B                408      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000125C  323C 1202                409      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00001260  4E4F                     410      TRAP    #15                     ; Trap (Perform action)
00001262  103C 0003                411      MOVE.B  #03,        D0          ; Display number at D1.L
00001266  2239 000015B2            412      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
0000126C  4E4F                     413      TRAP    #15                     ; Trap (Perform action) 
0000126E                           414  
0000126E                           415      ; Player Velocity Message
0000126E  103C 000B                416      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001272  323C 0203                417      MOVE.W  #$0203,     D1          ; Col 02, Row 03
00001276  4E4F                     418      TRAP    #15                     ; Trap (Perform action)
00001278  43F9 0000158A            419      LEA     V_MSG,      A1          ; Velocity Message
0000127E  303C 000D                420      MOVE    #13,        D0          ; No Line feed
00001282  4E4F                     421      TRAP    #15                     ; Trap (Perform action)
00001284                           422      
00001284                           423      ; Player Velocity
00001284  103C 000B                424      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001288  323C 0503                425      MOVE.W  #$0503,     D1          ; Col 05, Row 03
0000128C  4E4F                     426      TRAP    #15                     ; Trap (Perform action)
0000128E  103C 0003                427      MOVE.B  #03,        D0          ; Display number at D1.L
00001292  2239 000015BA            428      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
00001298  4E4F                     429      TRAP    #15                     ; Trap (Perform action)
0000129A                           430      
0000129A                           431      ; Player Gravity Message
0000129A  103C 000B                432      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000129E  323C 1003                433      MOVE.W  #$1003,     D1          ; Col 10, Row 03
000012A2  4E4F                     434      TRAP    #15                     ; Trap (Perform action)
000012A4  43F9 0000158D            435      LEA     G_MSG,      A1          ; G Message
000012AA  303C 000D                436      MOVE    #13,        D0          ; No Line feed
000012AE  4E4F                     437      TRAP    #15                     ; Trap (Perform action)
000012B0                           438      
000012B0                           439      ; Player Gravity
000012B0  103C 000B                440      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012B4  323C 1203                441      MOVE.W  #$1203,     D1          ; Col 12, Row 03
000012B8  4E4F                     442      TRAP    #15                     ; Trap (Perform action)
000012BA  103C 0003                443      MOVE.B  #03,        D0          ; Display number at D1.L
000012BE  2239 000015BE            444      MOVE.L  PLYR_GRAVITY,D1         ; Move Gravity to D1.L
000012C4  4E4F                     445      TRAP    #15                     ; Trap (Perform action)
000012C6                           446  
000012C6                           447      ; Player On Ground Message
000012C6  103C 000B                448      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012CA  323C 0204                449      MOVE.W  #$0204,     D1          ; Col 10, Row 03
000012CE  4E4F                     450      TRAP    #15                     ; Trap (Perform action)
000012D0  43F9 00001590            451      LEA     GND_MSG,    A1          ; On Ground Message
000012D6  303C 000D                452      MOVE    #13,        D0          ; No Line feed
000012DA  4E4F                     453      TRAP    #15                     ; Trap (Perform action)
000012DC                           454      
000012DC                           455      ; Player On Ground
000012DC  103C 000B                456      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012E0  323C 0604                457      MOVE.W  #$0604,     D1          ; Col 06, Row 04
000012E4  4E4F                     458      TRAP    #15                     ; Trap (Perform action)
000012E6  103C 0003                459      MOVE.B  #03,        D0          ; Display number at D1.L
000012EA  2239 000015C2            460      MOVE.L  PLYR_ON_GND,D1          ; Move Play on Ground ? to D1.L
000012F0  4E4F                     461      TRAP    #15                     ; Trap (Perform action)
000012F2                           462  
000012F2                           463      ; Show Keys Pressed
000012F2  103C 000B                464      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012F6  323C 2001                465      MOVE.W  #$2001,     D1          ; Col 20, Row 1
000012FA  4E4F                     466      TRAP    #15                     ; Trap (Perform action)
000012FC  43F9 00001553            467      LEA     KEYCODE_MSG, A1         ; Keycode
00001302  303C 000D                468      MOVE    #13,        D0          ; No Line feed
00001306  4E4F                     469      TRAP    #15                     ; Trap (Perform action)
00001308                           470  
00001308                           471      ; Show KeyCode
00001308  103C 000B                472      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000130C  323C 3001                473      MOVE.W  #$3001,     D1          ; Col 30, Row 1
00001310  4E4F                     474      TRAP    #15                     ; Trap (Perform action)    
00001312  2239 000015AA            475      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
00001318  103C 0003                476      MOVE.B  #03,        D0          ; Display the contents of D1
0000131C  4E4F                     477      TRAP    #15                     ; Trap (Perform action)
0000131E                           478  
0000131E                           479      ; Show if Update is Running
0000131E  103C 000B                480      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001322  323C 0205                481      MOVE.W  #$0205,     D1          ; Col 02, Row 05
00001326  4E4F                     482      TRAP    #15                     ; Trap (Perform action)
00001328  43F9 00001570            483      LEA     UPDATE_MSG, A1          ; Update
0000132E  303C 000D                484      MOVE    #13,        D0          ; No Line feed
00001332  4E4F                     485      TRAP    #15                     ; Trap (Perform action)
00001334                           486  
00001334                           487      ; Show if Draw is Running
00001334  103C 000B                488      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001338  323C 0206                489      MOVE.W  #$0206,     D1          ; Col 02, Row 06
0000133C  4E4F                     490      TRAP    #15                     ; Trap (Perform action)
0000133E  43F9 0000157B            491      LEA     DRAW_MSG,   A1          ; Draw
00001344  303C 000D                492      MOVE    #13,        D0          ; No Line feed
00001348  4E4F                     493      TRAP    #15                     ; Trap (Perform action)
0000134A                           494  
0000134A                           495      ; Show if Idle is Running
0000134A  103C 000B                496      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000134E  323C 0207                497      MOVE.W  #$0207,     D1          ; Col 02, Row 07
00001352  4E4F                     498      TRAP    #15                     ; Trap (Perform action)
00001354  43F9 00001567            499      LEA     IDLE_MSG,   A1          ; Move Idle Message to A1
0000135A  303C 000D                500      MOVE    #13,        D0          ; No Line feed
0000135E  4E4F                     501      TRAP    #15                     ; Trap (Perform action)
00001360                           502  
00001360  4E75                     503      RTS  
00001362                           504      
00001362                           505  *-----------------------------------------------------------
00001362                           506  * Subroutine    : Player is on Ground
00001362                           507  * Description   : Check if the Player is on or off Ground
00001362                           508  *-----------------------------------------------------------
00001362                           509  IS_PLAYER_ON_GND:
00001362                           510      ; Check if Player is on Ground
00001362  4281                     511      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001364  4282                     512      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001366  3239 000015A4            513      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000136C  82FC 0002                514      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001370  2439 000015B2            515      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00001376  B441                     516      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001378  6C00 0008                517      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
0000137C  6D00 002C                518      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00001380  4E75                     519      RTS                             ; Return to subroutine
00001382                           520  
00001382                           521  
00001382                           522  *-----------------------------------------------------------
00001382                           523  * Subroutine    : On Ground
00001382                           524  * Description   : Set the Player On Ground
00001382                           525  *-----------------------------------------------------------
00001382                           526  SET_ON_GROUND:
00001382  4281                     527      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001384  3239 000015A4            528      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000138A  82FC 0002                529      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000138E  23C1 000015B2            530      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001394  4281                     531      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001396  7200                     532      MOVE.L  #00,        D1          ; Player Velocity
00001398  23C1 000015BA            533      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000139E  23FC 00000001 000015C2   534      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
000013A8  4E75                     535      RTS
000013AA                           536  
000013AA                           537  *-----------------------------------------------------------
000013AA                           538  * Subroutine    : Off Ground
000013AA                           539  * Description   : Set the Player Off Ground
000013AA                           540  *-----------------------------------------------------------
000013AA                           541  SET_OFF_GROUND:
000013AA  23FC 00000000 000015C2   542      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
000013B4  4E75                     543      RTS                             ; Return to subroutine
000013B6                           544  *-----------------------------------------------------------
000013B6                           545  * Subroutine    : Jump
000013B6                           546  * Description   : Perform a Jump
000013B6                           547  *-----------------------------------------------------------
000013B6                           548  JUMP:
000013B6  0CB9 00000001 000015C2   549      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000013C0  6700 0006                550      BEQ     PERFORM_JUMP            ; Do Jump
000013C4  6000 0012                551      BRA     JUMP_DONE               ;
000013C8                           552  PERFORM_JUMP:
000013C8  6100 008C                553      BSR     PLAY_JUMP               ; Play jump sound
000013CC  23FC FFFFFFEC 000015BA   554      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000013D6  4E75                     555      RTS                             ; Return to subroutine
000013D8                           556  JUMP_DONE:
000013D8  4E75                     557      RTS                             ; Return to subroutine
000013DA                           558  
000013DA                           559  *-----------------------------------------------------------
000013DA                           560  * Subroutine    : Idle
000013DA                           561  * Description   : Perform a Idle
000013DA                           562  *----------------------------------------------------------- 
000013DA                           563  IDLE:
000013DA  6100 005C                564      BSR     PLAY_RUN                ; Play Run Wav
000013DE  4E75                     565      RTS                             ; Return to subroutine
000013E0                           566  
000013E0                           567  
000013E0                           568  *-----------------------------------------------------------
000013E0                           569  * Subroutine    : MOVE_RIGHT
000013E0                           570  * Description   : Perform a move right
000013E0                           571  *-----------------------------------------------------------
000013E0                           572  MOVE_RIGHT:
000013E0  6700 0006                573      BEQ     PERFORM_MOVE_RIGHT  ; do actual move ment to right
000013E4  6000 003E                574      BRA     MOVEMENT_DONE       ; return back 
000013E8                           575  PERFORM_MOVE_RIGHT:
000013E8  06B9 0000000A 000015AE   576      ADD.L   #SPEED, PLAYER_X       ; adds movement to the position
000013F2  4E75                     577      RTS
000013F4                           578  
000013F4                           579  
000013F4                           580  
000013F4                           581  *-----------------------------------------------------------
000013F4                           582  * Subroutine    : MOVE_LEFT
000013F4                           583  * Description   : Perform a move left
000013F4                           584  *-----------------------------------------------------------
000013F4                           585  * MOVE_LEFT_SHOOT:
000013F4                           586  *     ADD.L #01, BEEN_SHOT  ; do actual movement left
000013F4                           587  *     BEQ     PERFORM_MOVE_LEFT   ; do actual movement left
000013F4                           588  *     BRA     MOVEMENT_DONE      ; RETURN BACK
000013F4                           589  MOVE_LEFT:
000013F4  6700 0006                590      BEQ     PERFORM_MOVE_LEFT   ; do actual movement left
000013F8  6000 002A                591      BRA     MOVEMENT_DONE      ; RETURN BACK
000013FC                           592  
000013FC                           593  PERFORM_MOVE_LEFT:  
000013FC  04B9 0000000A 000015AE   594      SUB.L #SPEED, PLAYER_X         ; takes away movement from position
00001406  4E75                     595      RTS
00001408                           596  
00001408                           597  *-----------------------------------------------------------
00001408                           598  * Subroutine    : MOVE_UP
00001408                           599  * Description   : Perform a move up
00001408                           600  *-----------------------------------------------------------
00001408                           601  SHOOT:
00001408  52B9 000015A6            602      ADD.L #01, BEEN_SHOT  ; do actual movement left
0000140E  6000 0014                603      BRA     MOVEMENT_DONE      ; RETURN BACK
00001412  4E75                     604      RTS
00001414                           605  
00001414                           606  
00001414                           607  *-----------------------------------------------------------
00001414                           608  * Subroutine    : MOVE_DOWN
00001414                           609  * Description   : Perform a move down
00001414                           610  *-----------------------------------------------------------
00001414                           611  MOVE_DOWN:
00001414  6700 0008                612      BEQ     PERFORM_MOVE_DOWN   ; do actual movement down
00001418  6000 000A                613      BRA     MOVEMENT_DONE     ; RETURN BACK
0000141C  4E75                     614      RTS
0000141E                           615  
0000141E                           616  PERFORM_MOVE_DOWN:  
0000141E  52B9 000015B2            617      ADD.L #01, PLAYER_Y         ; takes away movement from position
00001424                           618  
00001424                           619  MOVEMENT_DONE:
00001424  4E75                     620      RTS
00001426                           621  
00001426                           622  
00001426                           623  
00001426                           624  
00001426                           625  *-----------------------------------------------------------
00001426                           626  * Subroutines   : Sound Load and Play
00001426                           627  * Description   : Initialise game sounds into memory 
00001426                           628  * Current Sounds are RUN, JUMP and Opps for Collision
00001426                           629  *-----------------------------------------------------------
00001426                           630  RUN_LOAD:
00001426  43F9 00001607            631      LEA     RUN_WAV,    A1          ; Load Wav File into A1
0000142C  323C 0000                632      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
00001430  303C 0047                633      MOVE    #71,        D0          ; Load into memory
00001434  4E4F                     634      TRAP    #15                     ; Trap (Perform action)
00001436  4E75                     635      RTS                             ; Return to subroutine
00001438                           636  
00001438                           637  PLAY_RUN:
00001438  323C 0000                638      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
0000143C  303C 0048                639      MOVE    #72,        D0          ; Play Sound
00001440  4E4F                     640      TRAP    #15                     ; Trap (Perform action)
00001442  4E75                     641      RTS                             ; Return to subroutine
00001444                           642  
00001444                           643  JUMP_LOAD:
00001444  43F9 000015FE            644      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
0000144A  323C 0001                645      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
0000144E  303C 0047                646      MOVE    #71,        D0          ; Load into memory
00001452  4E4F                     647      TRAP    #15                     ; Trap (Perform action)
00001454  4E75                     648      RTS                             ; Return to subroutine
00001456                           649  
00001456                           650  PLAY_JUMP:
00001456  323C 0001                651      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
0000145A  303C 0048                652      MOVE    #72,        D0          ; Play Sound
0000145E  4E4F                     653      TRAP    #15                     ; Trap (Perform action)
00001460  4E75                     654      RTS                             ; Return to subroutine
00001462                           655  
00001462                           656  OPPS_LOAD:
00001462  43F9 0000160F            657      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
00001468  323C 0002                658      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
0000146C  303C 0047                659      MOVE    #71,        D0          ; Load into memory
00001470  4E4F                     660      TRAP    #15                     ; Trap (Perform action)
00001472  4E75                     661      RTS                             ; Return to subroutine
00001474                           662  
00001474                           663  PLAY_OPPS:
00001474  323C 0002                664      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
00001478  303C 0048                665      MOVE    #72,        D0          ; Play Sound
0000147C  4E4F                     666      TRAP    #15                     ; Trap (Perform action)
0000147E  4E75                     667      RTS                             ; Return to subroutine
00001480                           668  
00001480                           669  *-----------------------------------------------------------
00001480                           670  * Subroutine    : Draw Player
00001480                           671  * Description   : Draw Player Square
00001480                           672  *-----------------------------------------------------------
00001480                           673  DRAW_PLAYER:
00001480                           674      ; Set Pixel Colors
00001480  223C 00FFFFFF            675      MOVE.L  #WHITE,     D1          ; Set Background color
00001486  103C 0050                676      MOVE.B  #80,        D0          ; Task for Background Color
0000148A  4E4F                     677      TRAP    #15                     ; Trap (Perform action)
0000148C                           678  
0000148C                           679      ; Set X, Y, Width and Height
0000148C  2239 000015AE            680      MOVE.L  PLAYER_X,   D1          ; X
00001492  2439 000015B2            681      MOVE.L  PLAYER_Y,   D2          ; Y
00001498  2639 000015AE            682      MOVE.L  PLAYER_X,   D3
0000149E  5083                     683      ADD.L   #PLYR_W_INIT,   D3      ; Width
000014A0  2839 000015B2            684      MOVE.L  PLAYER_Y,   D4 
000014A6  5084                     685      ADD.L   #PLYR_H_INIT,   D4      ; Height
000014A8                           686      
000014A8                           687      ; Draw Player
000014A8  103C 0057                688      MOVE.B  #87,        D0          ; Draw Player
000014AC  4E4F                     689      TRAP    #15                     ; Trap (Perform action)
000014AE  4E75                     690      RTS                             ; Return to subroutine
000014B0                           691  
000014B0                           692  *-----------------------------------------------------------
000014B0                           693  * Subroutine    : Draw Enemy
000014B0                           694  * Description   : Draw Enemy Square
000014B0                           695  *-----------------------------------------------------------
000014B0                           696  DRAW_ENEMY:
000014B0                           697      ; Set Pixel Colors
000014B0  223C 000000FF            698      MOVE.L  #RED,       D1          ; Set Background color
000014B6  103C 0050                699      MOVE.B  #80,        D0          ; Task for Background Color
000014BA  4E4F                     700      TRAP    #15                     ; Trap (Perform action)
000014BC                           701  
000014BC  4240                     702      CLR D0
000014BE  4241                     703      CLR D1
000014C0  4242                     704      CLR D2  
000014C2  4243                     705      CLR D3
000014C4  4244                     706      CLR D4
000014C6  4245                     707      CLR D5
000014C8                           708  
000014C8                           709      *loading array base address into register*
000014C8  41F9 000015C6            710      LEA ENEMY_ARRAY_X, A0   
000014CE  43F9 000015DA            711      LEA ENEMY_ARRAY_Y, A1
000014D4                           712  
000014D4  1A3C 0005                713      MOVE.B #NUM_OF_ENEMYS, D5
000014D8  5305                     714      SUB.B   #1, D5
000014DA                           715  
000014DA                           716  DRAW_ENEMY_LOOP:
000014DA                           717      * X and Y *
000014DA  2210                     718      MOVE.L  (A0),    D1       ; X   
000014DC  2411                     719      MOVE.L  (A1),    D2       ; Y
000014DE                           720  
000014DE                           721      * Width and Height *
000014DE  2618                     722      MOVE.L  (A0)+,    D3
000014E0  0683 0000000A            723      ADD.L   #ENMY_W_INIT,   D3      ; Width
000014E6  2819                     724      MOVE.L  (A1)+,    D4 
000014E8  0684 0000000A            725      ADD.L   #ENMY_H_INIT,   D4      ; Height
000014EE                           726      
000014EE                           727      ; Draw Enemy    
000014EE  103C 0057                728      MOVE.B  #87,        D0          ; Draw Enemy
000014F2  4E4F                     729      TRAP    #15                     ; Trap (Perform action)
000014F4                           730  
000014F4  51CD FFE4                731      DBRA D5, DRAW_ENEMY_LOOP
000014F8                           732  
000014F8  4E75                     733      RTS  
000014FA                           734  
000014FA                           735  *-----------------------------------------------------------
000014FA                           736  * Subroutine    : Draw bullet
000014FA                           737  * Description   : Draw Enemy bullet
000014FA                           738  *-----------------------------------------------------------
000014FA                           739  DRAW_BULLET:
000014FA                           740  ; Set Pixel Colors
000014FA  223C 00FFFF00            741      MOVE.L  #AQUA,       D1          ; Set Background color
00001500  103C 0050                742      MOVE.B  #80,        D0          ; Task for Background Color
00001504  4E4F                     743      TRAP    #15                     ; Trap (Perform action)
00001506                           744  
00001506                           745      ; Set X, Y, Width and Height
00001506  2239 000015F2            746      MOVE.L  BULLET_X,    D1          ; X
0000150C  2439 000015F6            747      MOVE.L  BULLET_Y,    D2          ; Y
00001512  2639 000015F2            748      MOVE.L  BULLET_X,    D3
00001518  5A83                     749      ADD.L   #BULLET_W,   D3      ; Width
0000151A  2839 000015F6            750      MOVE.L  BULLET_Y,    D4 
00001520  5A84                     751      ADD.L   #BULLET_H,   D4      ; Height
00001522                           752      
00001522                           753      ; Draw Enemy    
00001522  103C 0057                754      MOVE.B  #87,        D0          ; Draw Enemy
00001526  4E4F                     755      TRAP    #15                     ; Trap (Perform action)
00001528  4E75                     756      RTS                             ; Return to subroutine
0000152A                           757  
0000152A                           758  
0000152A                           759  
0000152A                           760  
0000152A                           761  
0000152A                           762  *-----------------------------------------------------------
0000152A                           763  * Subroutine    : Collision Check
0000152A                           764  * Description   : Axis-Aligned Bounding Box Collision Detection
0000152A                           765  * Algorithm checks for overlap on the 4 sides of the Player and 
0000152A                           766  * Enemy rectangles
0000152A                           767  * PLAYER_X <= ENEMY_X + ENEMY_W &&
0000152A                           768  * PLAYER_X + PLAYER_W >= ENEMY_X &&
0000152A                           769  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
0000152A                           770  * PLAYER_H + PLAYER_Y >= ENEMY_Y
0000152A                           771  *-----------------------------------------------------------
0000152A                           772  * CHECK_COLLISIONS:
0000152A                           773  *     CLR.L   D1                      ; Clear D1
0000152A                           774  *     CLR.L   D2                      ; Clear D2
0000152A                           775  * CHECK_BULLET_X_GREATER_ENEMY_X:
0000152A                           776  *     MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
0000152A                           777  *     MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
0000152A                           778  *     CMP.L   D1,         D2          ; Do the Overlap ?
0000152A                           779  *     BGE     CHECK_BULLET_X_LESSER_ENEMY_WIDTH ; greater than or equal ?
0000152A                           780  *     BRA     COLLISION_CHECK_DONE    ; If not no collision
0000152A                           781  * CHECK_BULLET_X_LESSER_ENEMY_WIDTH:     ; Check player is not  
0000152A                           782  *     ADD.L   Bullet_X,       D1          ; Move Player Width to D1
0000152A                           783  *     MOVE.L  ENEMY_X,        D2          ; Move Enemy X to D2
0000152A                           784  *     ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
0000152A                           785  *     CMP.L   D1,             D2          ; Do they OverLap ?
0000152A                           786  *     BLE     CHECK_BULLET_Y_GREATER_ENEMY_Y ; Less than or Equal
0000152A                           787  *     BRA     COLLISION_CHECK_DONE    ; If not no collision   
0000152A                           788  * CHECK_BULLET_Y_GREATER_ENEMY_Y:     
0000152A                           789  *     MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
0000152A                           790  *     MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
0000152A                           791  *     ;ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000152A                           792  *     CMP.L   D1,         D2          ; Do they Overlap ?
0000152A                           793  *     BGE     COLLISION  ; Less than or Equal
0000152A                           794  *     BRA     COLLISION_CHECK_DONE    ; If not no collision 
0000152A                           795  * * PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
0000152A                           796  * *     ADD.L   #Bullet_H,D1          ; Add Player Height to D1
0000152A                           797  * *     MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
0000152A                           798  * *     CMP.L   D1,         D2          ; Do they OverLap ?
0000152A                           799  * *     BGE     COLLISION               ; Collision !
0000152A                           800  * *     BRA     COLLISION_CHECK_DONE    ; If not no collision
0000152A                           801  * COLLISION_CHECK_DONE:               ; No Collision Update points
0000152A                           802  *     ADD.L   #POINTS,    D1          ; Move points upgrade to D1
0000152A                           803  *     ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000152A                           804  *     MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
0000152A                           805  *     RTS                             ; Return to subroutine
0000152A                           806  
0000152A                           807  * COLLISION:
0000152A                           808  *     BSR     PLAY_OPPS               ; Play Opps Wav
0000152A                           809  *     MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
0000152A                           810  *     SUB.L  #800, ENEMY_X
0000152A                           811  *     RTS                             ; Return to subroutine
0000152A                           812  
0000152A                           813  *-----------------------------------------------------------
0000152A                           814  * Subroutine    : EXIT
0000152A                           815  * Description   : Exit message and End Game
0000152A                           816  *-----------------------------------------------------------
0000152A                           817  EXIT:
0000152A                           818      ; Show if Exiting is Running
0000152A  103C 000B                819      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000152E  323C 4004                820      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001532  4E4F                     821      TRAP    #15                     ; Trap (Perform action)
00001534  43F9 00001595            822      LEA     EXIT_MSG,   A1          ; Exit
0000153A  303C 000D                823      MOVE    #13,        D0          ; No Line feed
0000153E  4E4F                     824      TRAP    #15                     ; Trap (Perform action)
00001540  103C 0009                825      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001544  4E4F                     826      TRAP    #15                     ; Trap (Perform action)
00001546  FFFF FFFF                827      SIMHALT
0000154A                           828  
0000154A                           829  *-----------------------------------------------------------
0000154A                           830  * Section       : Messages
0000154A                           831  * Description   : Messages to Print on Console, names should be
0000154A                           832  * self documenting
0000154A                           833  *-----------------------------------------------------------
0000154A                           834  
0000154A                           835  * BASICALLY VARIABLES DECALRED AT BTTOM 
0000154A                           836  * dc.b is text
0000154A                           837  * ds.b is number 
0000154A                           838  * becarefull how you store l/b, long/byte
0000154A= 53 63 6F 72 65 20 ...    839  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001553= 4B 65 79 43 6F 64 ...    840  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
0000155E= 4A 75 6D 70 2E 2E ...    841  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00001567                           842  
00001567= 49 64 6C 65 2E 2E ...    843  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
00001570= 55 70 64 61 74 65 ...    844  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
0000157B= 44 72 61 77 2E 2E ...    845  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00001584                           846  
00001584= 58 3A 00                 847  X_MSG           DC.B    'X:', 0             ; X Position Message
00001587= 59 3A 00                 848  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
0000158A= 56 3A 00                 849  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
0000158D= 47 3A 00                 850  G_MSG           DC.B    'G:', 0             ; Gravity Position Message
00001590= 47 4E 44 3A 00           851  GND_MSG         DC.B    'GND:', 0           ; On Ground Position Message
00001595                           852  
00001595= 45 78 69 74 69 6E ...    853  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
000015A1                           854  
000015A1                           855  *-----------------------------------------------------------
000015A1                           856  * Section       : Graphic Colors
000015A1                           857  * Description   : Screen Pixel Color
000015A1                           858  *-----------------------------------------------------------
000015A1  =00FFFFFF                859  WHITE           EQU     $00FFFFFF
000015A1  =000000FF                860  RED             EQU     $000000FF
000015A1  =00FFFF00                861  AQUA            EQU     $00FFFF00
000015A1                           862  
000015A1                           863  
000015A1                           864  *-----------------------------------------------------------
000015A1                           865  * Section       : Screen Size
000015A1                           866  * Description   : Screen Width and Height
000015A1                           867  *-----------------------------------------------------------
000015A2                           868  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000015A4                           869  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000015A6                           870  
000015A6                           871  *-----------------------------------------------------------
000015A6                           872  * Section       : Bullet status
000015A6                           873  * Description   : whether bullet has been shot or not
000015A6                           874  * 0 = false
000015A6                           875  * 1 = true
000015A6                           876  *-----------------------------------------------------------
000015A6                           877  BEEN_SHOT       DS.L    01      ; reserve of space
000015AA                           878  *-----------------------------------------------------------
000015AA                           879  * Section       : Keyboard Input
000015AA                           880  * Description   : Used for storing Keypresses
000015AA                           881  *-----------------------------------------------------------
000015AA                           882  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000015AE                           883  
000015AE                           884  *-----------------------------------------------------------
000015AE                           885  * Section       : Character Positions
000015AE                           886  * Description   : Player and Enemy Position Memory Locations
000015AE                           887  *-----------------------------------------------------------
000015AE                           888  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000015B2                           889  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000015B6                           890  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000015BA                           891  
000015BA                           892  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000015BE                           893  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
000015C2                           894  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
000015C6                           895  
000015C6= 00000001 00000001 ...    896  ENEMY_ARRAY_X         DC.L    01, 01, 01, 01, 01  ; Reserve Space for Enemy X Position
000015DA= 00000001 00000001 ...    897  ENEMY_ARRAY_Y         DC.L    01, 01, 01, 01, 01  ; Reserve Space for Enemy Y Position
000015EE                           898  ENEMY_MOVING_R        DS.L    01  ; RES SPACE FOR MOVING RIGHT BOOLEAN
000015F2                           899  
000015F2                           900  BULLET_X        DS.L    01   ; space for bullet x pos    
000015F6                           901  BULLET_Y        DS.L    01   ; space for bullet y pos
000015FA                           902  
000015FA                           903  *-----------------------------------------------------------
000015FA                           904  * Section       : TIme
000015FA                           905  * Description   : Sound files, which are then loaded and given
000015FA                           906  * an address in memory, they take a longtime to process and play
000015FA                           907  * so keep the files small. Used https://voicemaker.in/ to 
000015FA                           908  * generate and Audacity to convert MP3 to WAV
000015FA                           909  *-----------------------------------------------------------
000015FA                           910  DELTA_TIME      DS.L   01 ; empty 
000015FE                           911  
000015FE                           912  *-----------------------------------------------------------
000015FE                           913  * Section       : Sounds
000015FE                           914  * Description   : Sound files, which are then loaded and given
000015FE                           915  * an address in memory, they take a longtime to process and play
000015FE                           916  * so keep the files small. Used https://voicemaker.in/ to 
000015FE                           917  * generate and Audacity to convert MP3 to WAV
000015FE                           918  *-----------------------------------------------------------
000015FE= 6A 75 6D 70 2E 77 ...    919  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00001607= 72 75 6E 2E 77 61 ...    920  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
0000160F= 6F 70 70 73 2E 77 ...    921  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001618                           922  
00001618                           923      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
AQUA                FFFF00
BEEN_SHOT           15A6
BULLET_H            5
BULLET_SPEED        14
BULLET_TRACK_PLAYER  1134
BULLET_W            5
BULLET_X            15F2
BULLET_Y            15F6
CHECK_FOR_BULLET_RESPAWN  111C
CURRENT_KEY         15AA
D                   44
DELTA_T             10F0
DELTA_TIME          15FA
DRAW                11C6
DRAW_BULLET         14FA
DRAW_ENEMY          14B0
DRAW_ENEMY_LOOP     14DA
DRAW_MSG            157B
DRAW_PLAYER         1480
DRAW_PLYR_DATA      11E8
ENEMY_ARRAY_X       15C6
ENEMY_ARRAY_Y       15DA
ENEMY_MOVING_R      15EE
ENMY_H_INIT         A
ENMY_W_INIT         A
ESCAPE              1B
EXIT                152A
EXIT_MSG            1595
GAME                10D0
GAMELOOP            10D4
GND_FALSE           0
GND_MSG             1590
GND_TRUE            1
G_MSG               158D
IDLE                13DA
IDLE_MSG            1567
INITIALISE          1000
INITIALISE_ENEMYS   10A2
INITIALISE_ENEMY_POSITIONS_LOOP  10C2
INPUT               1156
IS_PLAYER_ON_GND    1362
JMP_INDEX           1
JUMP                13B6
JUMP_DONE           13D8
JUMP_LOAD           1444
JUMP_MSG            155E
JUMP_WAV            15FE
KEYCODE_MSG         1553
MOVEMENT_DONE       1424
MOVE_DOWN           1414
MOVE_LEFT           13F4
MOVE_RIGHT          13E0
NUM_OF_ENEMYS       5
OPPS_INDEX          2
OPPS_LOAD           1462
OPPS_WAV            160F
PERFORM_JUMP        13C8
PERFORM_MOVE_DOWN   141E
PERFORM_MOVE_LEFT   13FC
PERFORM_MOVE_RIGHT  13E8
PLAYER_SCORE        15B6
PLAYER_X            15AE
PLAYER_Y            15B2
PLAY_JUMP           1456
PLAY_OPPS           1474
PLAY_RUN            1438
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        15BE
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         15C2
PLYR_POS_MOVEMENT   1
PLYR_VELOCITY       15BA
PLYR_W_INIT         8
POINTS              1
RED                 FF
RESPAWN_BULLET      112C
RUN_INDEX           0
RUN_LOAD            1426
RUN_WAV             1607
S                   53
SCORE_MSG           154A
SCREEN_H            15A4
SCREEN_W            15A2
SET_OFF_GROUND      13AA
SET_ON_GROUND       1382
SHOOT               1408
SHOOT_BULLET        114A
SPACEBAR            20
SPEED               A
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              11AA
UPDATE_BULLET       1106
UPDATE_MSG          1570
V_MSG               158A
W                   57
WHITE               FFFFFF
X_MSG               1584
Y_MSG               1587
