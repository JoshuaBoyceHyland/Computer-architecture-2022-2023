00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/03/2023 22:57:24

00000000                             1  
00001000                             2      ORG    $1000
00001000                             3  START:                  ; first instruction of program
00001000                             4  * BASICALLY CONSTANTS
00001000                             5  *-----------------------------------------------------------
00001000                             6  * Section       : Trap Codes
00001000                             7  * Description   : Trap Codes used throughout StarterKit
00001000                             8  *-----------------------------------------------------------
00001000                             9  * Trap CODES
00001000  =00000021                 10  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 11  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            12                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 13  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 14  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 15  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            16  
00001000  =00000009                 17  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            18  
00001000                            19  *-----------------------------------------------------------
00001000                            20  * Section       : Charater Setup
00001000                            21  * Description   : Size of Player and Enemy and properties
00001000                            22  * of these characters e.g Starting Positions and Sizes
00001000                            23  *-----------------------------------------------------------
00001000  =00000008                 24  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 25  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            26  
00001000  =00000000                 27  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 28  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000  =00000001                 29  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            30  
00001000  =00000001                 31  PLYR_POS_MOVEMENT EQU   01          ; player movement
00001000  =00000001                 32  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 33  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            34  
00001000  =00000000                 35  SCORE_INDEX   EQU       00          ; Player Run Sound Index  
00001000  =00000001                 36  EXPLOSION_INDEX   EQU   01          ; Player Jump Sound Index  
00001000  =00000002                 37  GAME_START_INDEX  EQU   02          ; Player Opps Sound Index
00001000                            38  
00001000  =0000001E                 39  ENMY_W_INIT EQU         30          ; Enemy initial Width
00001000  =0000000A                 40  ENMY_H_INIT EQU         10          ; Enemy initial Height
00001000  =00000002                 41  NUM_OF_ENEMYS    EQU    02          ; number of enemys 
00001000                            42  
00001000  =00000005                 43  BULLET_W    EQU         05          ; bullet width
00001000  =00000005                 44  BULLET_H    EQU         05          ; bullet height
00001000                            45  
00001000                            46  
00001000                            47  *-----------------------------------------------------------
00001000                            48  * Section       : Game Stats
00001000                            49  * Description   : Points
00001000                            50  *-----------------------------------------------------------
00001000  =00000001                 51  POINTS      EQU         01          ; Points added
00001000                            52  
00001000                            53  *-----------------------------------------------------------
00001000                            54  * Section       : Keyboard Keys
00001000                            55  * Description   : Spacebar and Escape or two functioning keys
00001000                            56  * Spacebar to JUMP and Escape to Exit Game
00001000                            57  *-----------------------------------------------------------
00001000  =00000020                 58  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 59  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000  =00000044                 60  D           EQU         $44         ; D ASCII Keycode
00001000  =00000057                 61  W           EQU         $57         ; W ASCII KeyCode
00001000  =00000041                 62  A           EQU         $41         ; A ASCII Keycode
00001000  =00000053                 63  S           EQU         $53         ; S ASCII Keycode   
00001000                            64  
00001000                            65  *-----------------------------------------------------------
00001000                            66  * Section       : Speed
00001000                            67  * Description   : movement speed 
00001000                            68  *-----------------------------------------------------------
00001000  =00000014                 69  SPEED           EQU         20          ; speed for character`   
00001000  =00000005                 70  ENEMY_SPEED     EQU         05  ; will get faster over time   `
00001000  =00000050                 71  BULLET_SPEED    EQU         80          ; speed for bullet
00001000                            72  *-----------------------------------------------------------
00001000                            73  * Subroutine    : Initialise
00001000                            74  * Description   : Initialise game data into memory such as 
00001000                            75  * sounds and screen size
00001000                            76  *-----------------------------------------------------------
00001000                            77  INITIALISE:
00001000                            78      ; Initialise Sounds
00001000  6100 0466                 79      BSR     SCORE_LOAD                ; Load Run Sound into Memory
00001004  6100 0480                 80      BSR     EXPLOSION_LOAD               ; Load Jump Sound into Memory
00001008  6100 049A                 81      BSR     GAME_START_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            82  
0000100C                            83      ; Screen Size
0000100C  103C 0021                 84      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      85      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      86      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 0000198E             87      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      88      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 0000198C             89      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            90  
00001022                            91      ; Place the Player at the center of the screen
00001022  4281                      92      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  3239 0000198C             93      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102A  82FC 0002                 94      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102E  23C1 00001998             95      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001034                            96  
00001034  4281                      97      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001036                            98      * MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001036                            99      * SUB.L    #50,        D1          ; divide by 2 for center on Y Axis
00001036  23FC 000001A9 0000199C   100      MOVE.L  #425,         PLAYER_Y    ; Players Y Position
00001040                           101  
00001040                           102      ; Initialise Player Score
00001040  4281                     103      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001042  7200                     104      MOVE.L  #00,        D1          ; Init Score
00001044  23C1 000019A0            105      MOVE.L  D1,         PLAYER_SCORE
0000104A                           106  
0000104A                           107      ; Initialise Player Velocity
0000104A  4281                     108      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104C  123C 0000                109      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001050  23C1 000019A4            110      MOVE.L  D1,         PLYR_VELOCITY
00001056                           111  
00001056                           112  
00001056                           113      ; Initialize Player on Ground
00001056  23FC 00000001 000019AC   114      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001060                           115  
00001060                           116      ; intitial pos for test bullet
00001060  4281                     117      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001062  323C 0064                118      MOVE.W  #100,   D1          ; Place Screen width in D1
00001066  23C1 000019E0            119      MOVE.L  D1,         BULLET_X     ; Enemy X Position
0000106C                           120  
0000106C  4281                     121      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000106E  323C 0064                122      MOVE.W  #100,   D1         ; Place Screen width in D1
00001072                           123      ;DIVU    #02,        D1         ; divide by 2 for center on Y Axis
00001072  23FC 00000064 000019E4   124      MOVE.L  #100,   BULLET_Y     ; Enemy Y Position
0000107C                           125  
0000107C                           126      ; initialisation of booleans for bullet been shot and enemy moving right
0000107C  4281                     127      CLR.L D1
0000107E  323C 0000                128      MOVE.W #0, D1
00001082  13C1 00001990            129      MOVE.B D1, BEEN_SHOT
00001088  13C1 000019D8            130      MOVE.B D1, ENEMY_MOVING_R ; makes false so is moving left to start
0000108E                           131  
0000108E  4281                     132      CLR.L D1
00001090  7201                     133      MOVE.L #01, D1
00001092  23C1 00001994            134      MOVE.L D1, BASE_LIVES 
00001098                           135      ; Enable the screen back buffer(see easy 68k help)
00001098  103C 005C                136      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
0000109C  123C 0011                137      MOVE.B  #17,        D1          ; Combine Tasks
000010A0  4E4F                     138      TRAP    #15                     ; Trap (Perform action)
000010A2                           139  
000010A2                           140      ; Clear the screen (see easy 68k help)
000010A2  103C 000B                141      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000010A6  323C FF00                142      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010AA  4E4F                     143      TRAP    #15                     ; Trap (Perform action)
000010AC                           144  *-----------------------------------------------------------
000010AC                           145  * Subroutine    : initialise enemey positions
000010AC                           146  * Description   : sets up the positions for enemys 
000010AC                           147  *-----------------------------------------------------------
000010AC                           148  INITIALISE_ENEMYS:
000010AC  4281                     149      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010AE  323C 0064                150      MOVE.W  #100,   D1          ; Place Screen width in D1
000010B2  23C1 000019B0            151      MOVE.L  D1,         ENEMY_1_X     ; Enemy X Position
000010B8  4281                     152      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010BA  323C 0000                153      MOVE.W  #0,   D1          ; Place Screen width in D1
000010BE  0481 0000000A            154      SUB.L   #10, D1
000010C4  23C1 000019B4            155      MOVE.L  D1,         ENEMY_1_Y     ; Enemy X Position
000010CA                           156  
000010CA  4281                     157      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010CC  323C 00C8                158      MOVE.W  #200,   D1          ; Place Screen width in D1
000010D0  23C1 000019B8            159      MOVE.L  D1,         ENEMY_2_X     ; Enemy X Position
000010D6  4281                     160      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010D8  323C 0000                161      MOVE.W  #0,   D1          ; Place Screen width in D1
000010DC  0481 000000C8            162      SUB.L   #200, D1
000010E2  23C1 000019BC            163      MOVE.L  D1,         ENEMY_2_Y     ; Enemy X Position
000010E8                           164  
000010E8  4281                     165      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010EA  323C 012C                166      MOVE.W  #300,   D1          ; Place Screen width in D1
000010EE  23C1 000019C0            167      MOVE.L  D1,         ENEMY_3_X     ; Enemy X Position
000010F4  4281                     168      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010F6  323C 0000                169      MOVE.W  #00,   D1          ; Place Screen width in D1
000010FA  0481 0000012C            170      SUB.L   #300, D1
00001100  23C1 000019C4            171      MOVE.L  D1,         ENEMY_3_Y     ; Enemy X Position
00001106                           172  
00001106  4281                     173      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001108  323C 0190                174      MOVE.W  #400,   D1          ; Place Screen width in D1
0000110C  23C1 000019C8            175      MOVE.L  D1,         ENEMY_4_X     ; Enemy X Position
00001112  4281                     176      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001114  323C 0000                177      MOVE.W  #0,   D1          ; Place Screen width in D1
00001118  0481 000000FA            178      SUB.L   #250, D1
0000111E  23C1 000019CC            179      MOVE.L  D1,         ENEMY_4_Y     ; Enemy X Position
00001124                           180  
00001124  4281                     181      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001126  323C 01F4                182      MOVE.W  #500,   D1          ; Place Screen width in D1
0000112A  23C1 000019D0            183      MOVE.L  D1,         ENEMY_5_X     ; Enemy X Position
00001130  4281                     184      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001132  323C 0000                185      MOVE.W  #0,   D1          ; Place Screen width in D1
00001136  0481 00000190            186      SUB.L   #400, D1
0000113C  23C1 000019D4            187      MOVE.L  D1,         ENEMY_5_Y     ; Enemy X Position
00001142                           188  
00001142                           189      
00001142                           190  
00001142                           191  
00001142                           192  
00001142                           193  *-----------------------------------------------------------
00001142                           194  * Subroutine    : Game
00001142                           195  * Description   : Game including main GameLoop. GameLoop is like
00001142                           196  * a while loop in that it runs forever until interupted
00001142                           197  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
00001142                           198  *-----------------------------------------------------------
00001142                           199  GAME:
00001142  6100 0372                200      BSR     PLAY_GAME_START             ; Play Run Wav
00001146                           201  GAMELOOP:
00001146                           202      ; Main Gameloop
00001146  103C 0008                203      MOVE.B #8, D0                   ; D0 IS ONLY USED FOR COMMANDS, OUTPUST FROM THIS GOINTO OTHER DATA REGISTERS, THIS WILL BE STORED IN D1 
0000114A  4E4F                     204      TRAP #15     
0000114C  23C1 000019E8            205      MOVE.L D1, DELTA_TIME                   ; TRAP 15 RUNS COMMAND 15   
00001152  6100 01DC                206      BSR     INPUT                   ; Check Keyboard Input
00001156  6100 022C                207      BSR     UPDATE                  ; Update positions and points
0000115A  6100 0038                208      BSR     UPDATE_BULLET
0000115E  6100 004A                209      BSR     UPDATE_ENEMYS
00001162                           210      ;BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
00001162  6100 04FE                211      BSR     CHECK_COLLISIONS        ; Check for Collisions
00001166  6100 0238                212      BSR     DRAW                    ; Draw the Scene
0000116A  6100 0018                213      BSR     CHECK_FOR_EXIT
0000116E                           214      
0000116E                           215  
0000116E                           216  GAME_DELTA_t:
0000116E  103C 0008                217      MOVE.B #8, D0                   ;CURRENT TIME 
00001172  4E4F                     218      TRAP #15  
00001174  92B9 000019E8            219      SUB.L DELTA_TIME, D1            ; TAKING AWAY DELTATIME FROM CURRENT TO CHECK REMAINDER, 
0000117A                           220      
0000117A  B2BC 00000004            221      CMP.L #4, D1
00001180  6BEC                     222      BMI.S GAME_DELTA_t                     ; if deltam time is lesser or equal to 17; branch lesser or equal to 
00001182  60C2                     223      BRA GAMELOOP
00001184                           224  
00001184                           225  
00001184                           226  
00001184                           227  *checks if base lives has is higher than -
00001184                           228  CHECK_FOR_EXIT:
00001184  0CB9 00000000 00001994   229      CMP.L #0, BASE_LIVES
0000118E  6F00 06FC                230      BLE END_SCREEN_LOOP
00001192  4E75                     231      RTS
00001194                           232  
00001194                           233  
00001194                           234  
00001194                           235  UPDATE_BULLET:
00001194  6100 0160                236      BSR CHECK_FOR_BULLET_RESPAWN
00001198  0C39 0000 00001990       237      CMP.B #0, BEEN_SHOT
000011A0  6700 0178                238      BEQ BULLET_TRACK_PLAYER ; if the bullet has not been shot will track player
000011A4  6000 0168                239      BRA SHOOT_BULLET
000011A8  4E75                     240      RTS
000011AA                           241  
000011AA                           242  UPDATE_ENEMYS:
000011AA  6100 0008                243     BSR ENEMY_MOVE_DOWN
000011AE  6100 002A                244     BSR CHECK_ENEMY_RESETS
000011B2  4E75                     245      RTS
000011B4                           246  ENEMY_MOVE_DOWN:
000011B4                           247  
000011B4  2239 000019BC            248      MOVE.L ENEMY_2_Y, D1
000011BA  5AB9 000019B4            249      ADD.L #ENEMY_SPEED, ENEMY_1_Y
000011C0  5AB9 000019BC            250      ADD.L #ENEMY_SPEED, ENEMY_2_Y
000011C6  5AB9 000019C4            251      ADD.L #ENEMY_SPEED, ENEMY_3_Y
000011CC  5AB9 000019CC            252      ADD.L #ENEMY_SPEED, ENEMY_4_Y
000011D2  5AB9 000019D4            253      ADD.L #ENEMY_SPEED, ENEMY_5_Y
000011D8  4E75                     254      RTS
000011DA                           255  
000011DA                           256  CHECK_ENEMY_RESETS
000011DA  6100 0014                257      BSR CHECK_ENEMY_RESET_1
000011DE  6100 003E                258      BSR CHECK_ENEMY_RESET_2
000011E2  6100 0068                259      BSR CHECK_ENEMY_RESET_3
000011E6  6100 0092                260      BSR CHECK_ENEMY_RESET_4
000011EA  6100 00BC                261      BSR CHECK_ENEMY_RESET_5
000011EE  4E75                     262      RTS
000011F0                           263  CHECK_ENEMY_RESET_1:
000011F0  4281                     264      CLR.L D1
000011F2  4282                     265      CLR.L D2
000011F4                           266  
000011F4  223C 000001E0            267      MOVE.L #480, D1      ; point in which on screen respawn will happen 
000011FA  2439 000019B4            268      MOVE.L ENEMY_1_Y, D2
00001200                           269      
00001200  B481                     270      CMP.L D1, D2
00001202  6C00 0004                271      BGE   ENEMY_1_REACHED_BASE
00001206  4E75                     272      RTS
00001208                           273  
00001208                           274  ENEMY_1_REACHED_BASE:
00001208  6100 028E                275      BSR PLAY_EXPLOSION
0000120C  53B9 00001994            276      SUB.L #01, BASE_LIVES
00001212                           277  RESET_ENEMY_1:
00001212  6100 00C2                278      BSR RANDOM_Y_POS
00001216  23C1 000019B4            279      MOVE.L D1, ENEMY_1_Y
0000121C  4E75                     280      RTS
0000121E                           281  
0000121E                           282  CHECK_ENEMY_RESET_2:
0000121E  4281                     283      CLR.L D1
00001220  4282                     284      CLR.L D2
00001222                           285  
00001222  223C 000001E0            286      MOVE.L #480, D1      ; point in which on screen respawn will happen 
00001228  2439 000019BC            287      MOVE.L ENEMY_2_Y, D2
0000122E                           288      
0000122E  B481                     289      CMP.L D1, D2
00001230  6C00 0004                290      BGE   ENEMY_2_REACHED_BASE
00001234  4E75                     291      RTS
00001236                           292  
00001236                           293  ENEMY_2_REACHED_BASE:
00001236  6100 0260                294      BSR PLAY_EXPLOSION
0000123A  53B9 00001994            295      SUB.L #01, BASE_LIVES
00001240                           296  RESET_ENEMY_2:
00001240  6100 0094                297      BSR RANDOM_Y_POS
00001244  23C1 000019BC            298      MOVE.L D1, ENEMY_2_Y
0000124A  4E75                     299      RTS
0000124C                           300  
0000124C                           301  CHECK_ENEMY_RESET_3:
0000124C  4281                     302      CLR.L D1
0000124E  4282                     303      CLR.L D2
00001250                           304  
00001250  223C 000001E0            305      MOVE.L #480, D1      ; point in which on screen respawn will happen 
00001256  2439 000019C4            306      MOVE.L ENEMY_3_Y, D2
0000125C                           307      
0000125C  B481                     308      CMP.L D1, D2
0000125E  6C00 0004                309      BGE   ENEMY_3_REACHED_BASE
00001262  4E75                     310      RTS
00001264                           311      
00001264                           312  ENEMY_3_REACHED_BASE:
00001264  6100 0232                313      BSR PLAY_EXPLOSION
00001268  53B9 00001994            314      SUB.L #01, BASE_LIVES
0000126E                           315  RESET_ENEMY_3:
0000126E  6100 0066                316      BSR RANDOM_Y_POS
00001272  23C1 000019C4            317      MOVE.L D1, ENEMY_3_Y
00001278  4E75                     318      RTS
0000127A                           319  
0000127A                           320  CHECK_ENEMY_RESET_4:
0000127A  4281                     321      CLR.L D1
0000127C  4282                     322      CLR.L D2
0000127E                           323  
0000127E  223C 000001E0            324      MOVE.L #480, D1      ; point in which on screen respawn will happen 
00001284  2439 000019CC            325      MOVE.L ENEMY_4_Y, D2
0000128A                           326      
0000128A  B481                     327      CMP.L D1, D2
0000128C  6C00 0004                328      BGE   ENEMY_4_REACHED_BASE
00001290  4E75                     329      RTS
00001292                           330  
00001292                           331  ENEMY_4_REACHED_BASE:
00001292  6100 0204                332      BSR PLAY_EXPLOSION
00001296  53B9 00001994            333      SUB.L #01, BASE_LIVES
0000129C                           334  RESET_ENEMY_4:
0000129C  6100 0038                335      BSR RANDOM_Y_POS
000012A0  23C1 000019CC            336      MOVE.L D1, ENEMY_4_Y
000012A6  4E75                     337      RTS
000012A8                           338  
000012A8                           339  CHECK_ENEMY_RESET_5:
000012A8  4281                     340      CLR.L D1
000012AA  4282                     341      CLR.L D2
000012AC                           342  
000012AC  223C 000001E0            343      MOVE.L #480, D1      ; point in which on screen respawn will happen 
000012B2  2439 000019D4            344      MOVE.L ENEMY_5_Y, D2
000012B8                           345      
000012B8  B481                     346      CMP.L D1, D2
000012BA  6C00 0004                347      BGE   ENEMY_5_REACHED_BASE
000012BE  4E75                     348      RTS
000012C0                           349  
000012C0                           350  ENEMY_5_REACHED_BASE:
000012C0  6100 01D6                351      BSR PLAY_EXPLOSION
000012C4  53B9 00001994            352      SUB.L #01, BASE_LIVES
000012CA                           353  RESET_ENEMY_5:
000012CA                           354      
000012CA  6100 000A                355      BSR RANDOM_Y_POS
000012CE  23C1 000019D4            356      MOVE.L D1, ENEMY_5_Y
000012D4  4E75                     357      RTS
000012D6                           358  
000012D6                           359  RANDOM_Y_POS:
000012D6                           360  
000012D6  103C 0008                361      MOVE.B #8, D0 ; loads current time ( 100s seconds since midnight)
000012DA  4E4F                     362      TRAP   #15
000012DC                           363  
000012DC  C2BC 005FFFFF            364      AND.L #$5FFFFF, D1 ; AND 6 Bits to prevent any overflow 
000012E2                           365  
000012E2  82FC 0190                366      DIVU #400, D1 ; for number range
000012E6                           367  
000012E6  4841                     368      SWAP D1       ; SWAP Higher Order Word and Lower Order Word in D1
000012E8                           369  
000012E8  5241                     370      ADDQ.W #1, D1 ; generate number from 
000012EA                           371  
000012EA  3401                     372      MOVE.W D1, D2 ; get number from d1.w 
000012EC                           373  
000012EC  4281                     374      CLR.L D1
000012EE                           375  
000012EE  3202                     376      MOVE.W D2, D1
000012F0                           377  
000012F0  9282                     378      SUB.L D2, D1 ; makes it y pos zero
000012F2                           379  
000012F2  9282                     380      SUB.L D2, D1 ; makes y pos minus so it spawns above screen
000012F4                           381  
000012F4  4E75                     382      RTS
000012F6                           383  
000012F6                           384  
000012F6                           385  CHECK_FOR_BULLET_RESPAWN:
000012F6  0CB9 00000000 000019E4   386      CMP.L #0, BULLET_Y
00001300  6D00 0004                387      BLT RESPAWN_BULLET
00001304  4E75                     388      RTS
00001306                           389  
00001306                           390  RESPAWN_BULLET:
00001306  53B9 00001990            391      SUB.L #1, BEEN_SHOT
0000130C  4E75                     392      RTS
0000130E                           393      
0000130E                           394  
0000130E                           395  SHOOT_BULLET:
0000130E  04B9 00000032 000019E4   396      SUB.L #50, BULLET_Y
00001318  4E75                     397      RTS
0000131A                           398  
0000131A                           399  BULLET_TRACK_PLAYER:
0000131A  23F9 00001998 000019E0   400      MOVE.L PLAYER_X, BULLET_X
00001324  23F9 0000199C 000019E4   401      MOVE.L PLAYER_Y, BULLET_Y
0000132E  4E75                     402      RTS
00001330                           403  
00001330                           404  
00001330                           405  *-----------------------------------------------------------
00001330                           406  * Subroutine    : Input
00001330                           407  * Description   : Process Keyboard Input
00001330                           408  *-----------------------------------------------------------
00001330                           409  INPUT:
00001330                           410      ; Process Input
00001330  4281                     411      CLR.L   D1                      ; Clear Data Register
00001332  103C 0013                412      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
00001336  223C 20415344            413      MOVE.L #$20415344,D1            ; ALL THE INPUTS PUT IN D1 WASD, IN ONE BYTE
0000133C  4E4F                     414      TRAP   #15                      ; DEXCUTES ABOVE AND CHECKS IF ny have been pushed
0000133E                           415  
0000133E                           416     * CHECKS CORRESPONG NUMBERS ARE BEING PRESSED
0000133E  B2BC FFFF0000            417      CMP.L  #$FFFF0000, D1           ; SPACE
00001344  6700 0104                418      BEQ    SHOOT
00001348  6700 00EC                419      BEQ    MOVE_LEFT
0000134C                           420  
0000134C  B2BC FF0000FF            421      CMP.L  #$FF0000FF, D1           ; SPACE
00001352  6700 00F6                422      BEQ    SHOOT
00001356  6700 00CA                423      BEQ    MOVE_RIGHT
0000135A                           424  
0000135A  B2BC FF000000            425      CMP.L  #$FF000000, D1           ; SPACE
00001360  6700 00E8                426      BEQ    SHOOT
00001364                           427  
00001364  B2BC 00FF0000            428      CMP.L  #$00FF0000, D1           ; A
0000136A  6700 00CA                429      BEQ    MOVE_LEFT
0000136E                           430  
0000136E  B2BC 0000FF00            431      CMP.L  #$0000FF00, D1           ; S
00001374  6700 00E0                432      BEQ    MOVE_DOWN
00001378                           433  
00001378  B2BC 000000FF            434      CMP.L  #$000000FF, D1           ; D
0000137E  6700 00A2                435      BEQ    MOVE_RIGHT
00001382  4E75                     436      RTS                             ; Return to subroutine
00001384                           437  
00001384                           438  
00001384                           439  
00001384                           440  *-----------------------------------------------------------
00001384                           441  * Subroutine    : Update
00001384                           442  * Description   : Main update loop update Player and Enemies
00001384                           443  *-----------------------------------------------------------
00001384                           444  UPDATE:
00001384                           445      ; Update the Players Positon based on Velocity and Gravity
00001384  4281                     446      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001386  2239 000019A4            447      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
0000138C  23C1 000019A4            448      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
00001392  D2B9 0000199C            449      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001398  23C1 0000199C            450      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
0000139E                           451  
0000139E  4E75                     452      RTS                             ; Return to subroutine  
000013A0                           453  
000013A0                           454  
000013A0                           455  *-----------------------------------------------------------
000013A0                           456  * Subroutine    : Draw
000013A0                           457  * Description   : Draw Screen
000013A0                           458  *-----------------------------------------------------------
000013A0                           459  DRAW: 
000013A0                           460      ; Enable back buffer
000013A0  103C 005E                461      MOVE.B  #94,        D0
000013A4  4E4F                     462      TRAP    #15
000013A6                           463  
000013A6                           464      ; Clear the screen
000013A6  103C 000B                465      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013AA  323C FF00                466      MOVE.W  #$FF00,     D1          ; Clear contents
000013AE  4E4F                     467      TRAP    #15                     ; Trap (Perform action)
000013B0                           468  
000013B0                           469      
000013B0                           470      
000013B0  6100 0110                471      BSR     DRAW_PLAYER             ; Draw Player
000013B4  6100 018A                472      BSR     DRAW_ENEMYS             ; Draw Enemy
000013B8  6100 0278                473      BSR     DRAW_BULLET             ; draw bullet
000013BC  6100 0134                474      BSR     DRAW_BASE
000013C0  6100 0004                475      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000013C4  4E75                     476      RTS                             ; Return to subroutine
000013C6                           477  
000013C6                           478  *-----------------------------------------------------------
000013C6                           479  * Subroutine    : Draw Player Data
000013C6                           480  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000013C6                           481  *-----------------------------------------------------------
000013C6                           482  DRAW_PLYR_DATA:
000013C6  4281                     483      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013C8                           484  
000013C8                           485      ; Player Score Message
000013C8  103C 000B                486      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013CC  323C 0201                487      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000013D0  4E4F                     488      TRAP    #15                     ; Trap (Perform action)
000013D2  43F9 00001946            489      LEA     SCORE_MSG,  A1          ; Score Message
000013D8  303C 000D                490      MOVE    #13,        D0          ; No Line feed
000013DC  4E4F                     491      TRAP    #15                     ; Trap (Perform action)
000013DE                           492  
000013DE                           493      ; Player Score Value
000013DE  103C 000B                494      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013E2  323C 0901                495      MOVE.W  #$0901,     D1          ; Col 09, Row 01
000013E6  4E4F                     496      TRAP    #15                     ; Trap (Perform action)
000013E8  103C 0003                497      MOVE.B  #03,        D0          ; Display number at D1.L
000013EC  2239 000019A0            498      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000013F2  4E4F                     499      TRAP    #15                     ; Trap (Perform action)
000013F4                           500      
000013F4                           501    
000013F4                           502      ; Show Keys Pressed
000013F4  103C 000B                503      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013F8  323C 0202                504      MOVE.W  #$0202,     D1          ; Col 20, Row 1
000013FC  4E4F                     505      TRAP    #15                     ; Trap (Perform action)
000013FE  43F9 0000194F            506      LEA     BASE_LIVES_MSG, A1         ; Keycode
00001404  303C 000D                507      MOVE    #13,        D0          ; No Line feed
00001408  4E4F                     508      TRAP    #15                     ; Trap (Perform action)
0000140A                           509  
0000140A                           510      ; Show KeyCode
0000140A  103C 000B                511      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000140E  323C 1002                512      MOVE.W  #$1002,     D1          ; Col 30, Row 1
00001412  4E4F                     513      TRAP    #15                     ; Trap (Perform action)    
00001414  2239 00001994            514      MOVE.L  BASE_LIVES ,D1          ; Move Key Pressed to D1
0000141A  103C 0003                515      MOVE.B  #03,        D0          ; Display the contents of D1
0000141E  4E4F                     516      TRAP    #15                     ; Trap (Perform action)
00001420                           517  
00001420                           518     
00001420  4E75                     519      RTS  
00001422                           520  
00001422                           521  *-----------------------------------------------------------
00001422                           522  * Subroutine    : MOVE_RIGHT
00001422                           523  * Description   : Perform a move right
00001422                           524  *-----------------------------------------------------------
00001422                           525  MOVE_RIGHT:
00001422  6700 0006                526      BEQ     PERFORM_MOVE_RIGHT  ; do actual move ment to right
00001426  6000 003E                527      BRA     MOVEMENT_DONE       ; return back 
0000142A                           528  PERFORM_MOVE_RIGHT:
0000142A  06B9 00000014 00001998   529      ADD.L   #SPEED, PLAYER_X       ; adds movement to the position
00001434  4E75                     530      RTS
00001436                           531  
00001436                           532  
00001436                           533  
00001436                           534  *-----------------------------------------------------------
00001436                           535  * Subroutine    : MOVE_LEFT
00001436                           536  * Description   : Perform a move left
00001436                           537  *-----------------------------------------------------------
00001436                           538  
00001436                           539  MOVE_LEFT:
00001436  6700 0006                540      BEQ     PERFORM_MOVE_LEFT   ; do actual movement left
0000143A  6000 002A                541      BRA     MOVEMENT_DONE      ; RETURN BACK
0000143E                           542  
0000143E                           543  PERFORM_MOVE_LEFT:  
0000143E  04B9 00000014 00001998   544      SUB.L #SPEED, PLAYER_X         ; takes away movement from position
00001448  4E75                     545      RTS
0000144A                           546  
0000144A                           547  *-----------------------------------------------------------
0000144A                           548  * Subroutine    : MOVE_UP
0000144A                           549  * Description   : Perform a move up
0000144A                           550  *-----------------------------------------------------------
0000144A                           551  SHOOT:
0000144A  52B9 00001990            552      ADD.L #01, BEEN_SHOT  ; do actual movement left
00001450  6000 0014                553      BRA     MOVEMENT_DONE      ; RETURN BACK
00001454  4E75                     554      RTS
00001456                           555  
00001456                           556  
00001456                           557  *-----------------------------------------------------------
00001456                           558  * Subroutine    : MOVE_DOWN
00001456                           559  * Description   : Perform a move down
00001456                           560  *-----------------------------------------------------------
00001456                           561  MOVE_DOWN:
00001456  6700 0008                562      BEQ     PERFORM_MOVE_DOWN   ; do actual movement down
0000145A  6000 000A                563      BRA     MOVEMENT_DONE     ; RETURN BACK
0000145E  4E75                     564      RTS
00001460                           565  
00001460                           566  PERFORM_MOVE_DOWN:  
00001460  52B9 0000199C            567      ADD.L #01, PLAYER_Y         ; takes away movement from position
00001466                           568  
00001466                           569  MOVEMENT_DONE:
00001466  4E75                     570      RTS
00001468                           571  
00001468                           572  
00001468                           573  
00001468                           574  
00001468                           575  *-----------------------------------------------------------
00001468                           576  * Subroutines   : Sound Load and Play
00001468                           577  * Description   : Initialise game sounds into memory 
00001468                           578  * Current Sounds are RUN, JUMP and Opps for Collision
00001468                           579  *-----------------------------------------------------------
00001468                           580  SCORE_LOAD:
00001468  43F9 000019FA            581      LEA     SCORE_WAV,    A1          ; Load Wav File into A1
0000146E  323C 0000                582      MOVE    #SCORE_INDEX, D1          ; Assign it INDEX
00001472  303C 0047                583      MOVE    #71,        D0          ; Load into memory
00001476  4E4F                     584      TRAP    #15                     ; Trap (Perform action)
00001478  4E75                     585      RTS                             ; Return to subroutine
0000147A                           586  
0000147A                           587  PLAY_SCORE_EFFECT:
0000147A  323C 0000                588      MOVE    #SCORE_INDEX, D1          ; Load Sound INDEX
0000147E  303C 0048                589      MOVE    #72,        D0          ; Play Sound
00001482  4E4F                     590      TRAP    #15                     ; Trap (Perform action)
00001484  4E75                     591      RTS                             ; Return to subroutine
00001486                           592  
00001486                           593  EXPLOSION_LOAD:
00001486  43F9 000019EC            594      LEA     EXPLOSION_WAV,   A1          ; Load Wav File into A1
0000148C  323C 0001                595      MOVE    #EXPLOSION_INDEX, D1          ; Assign it INDEX
00001490  303C 0047                596      MOVE    #71,        D0          ; Load into memory
00001494  4E4F                     597      TRAP    #15                     ; Trap (Perform action)
00001496  4E75                     598      RTS                             ; Return to subroutine
00001498                           599  
00001498                           600  PLAY_EXPLOSION:
00001498  323C 0001                601      MOVE    #EXPLOSION_INDEX, D1          ; Load Sound INDEX
0000149C  303C 0048                602      MOVE    #72,        D0          ; Play Sound
000014A0  4E4F                     603      TRAP    #15                     ; Trap (Perform action)
000014A2  4E75                     604      RTS                             ; Return to subroutine
000014A4                           605  
000014A4                           606  GAME_START_LOAD:
000014A4  43F9 00001A04            607      LEA     GAME_START_WAV,   A1          ; Load Wav File into A1
000014AA  323C 0002                608      MOVE    #GAME_START_INDEX,D1          ; Assign it INDEX
000014AE  303C 0047                609      MOVE    #71,        D0          ; Load into memory
000014B2  4E4F                     610      TRAP    #15                     ; Trap (Perform action)
000014B4  4E75                     611      RTS                             ; Return to subroutine
000014B6                           612  
000014B6                           613  PLAY_GAME_START:
000014B6  323C 0002                614      MOVE    #GAME_START_INDEX,D1          ; Load Sound INDEX
000014BA  303C 0048                615      MOVE    #72,        D0          ; Play Sound
000014BE  4E4F                     616      TRAP    #15                     ; Trap (Perform action)
000014C0  4E75                     617      RTS                             ; Return to subroutine
000014C2                           618  
000014C2                           619  *-----------------------------------------------------------
000014C2                           620  * Subroutine    : Draw Player
000014C2                           621  * Description   : Draw Player Square
000014C2                           622  *-----------------------------------------------------------
000014C2                           623  DRAW_PLAYER:
000014C2                           624      ; Set Pixel Colors
000014C2  223C 00FFFFFF            625      MOVE.L  #WHITE,     D1          ; Set Background color
000014C8  103C 0050                626      MOVE.B  #80,        D0          ; Task for Background Color
000014CC  4E4F                     627      TRAP    #15                     ; Trap (Perform action)
000014CE                           628  
000014CE                           629      ; Set X, Y, Width and Height
000014CE  2239 00001998            630      MOVE.L  PLAYER_X,   D1          ; X
000014D4  2439 0000199C            631      MOVE.L  PLAYER_Y,   D2          ; Y
000014DA  2639 00001998            632      MOVE.L  PLAYER_X,   D3
000014E0  5083                     633      ADD.L   #PLYR_W_INIT,   D3      ; Width
000014E2  2839 0000199C            634      MOVE.L  PLAYER_Y,   D4 
000014E8  5084                     635      ADD.L   #PLYR_H_INIT,   D4      ; Height
000014EA                           636      
000014EA                           637      ; Draw Player
000014EA  103C 0057                638      MOVE.B  #87,        D0          ; Draw Player
000014EE  4E4F                     639      TRAP    #15                     ; Trap (Perform action)
000014F0  4E75                     640      RTS                             ; Return to subroutine
000014F2                           641  
000014F2                           642  
000014F2                           643  *-----------------------------------------------------------
000014F2                           644  * Subroutine    : Draw base
000014F2                           645  * Description   : Draw base Square
000014F2                           646  *-----------------------------------------------------------
000014F2                           647  DRAW_BASE:
000014F2  4280                     648      CLR.L D0
000014F4  4281                     649      CLR.L D1
000014F6  4282                     650      CLR.L D2
000014F8  4283                     651      CLR.L D3
000014FA  4284                     652      CLR.L D4
000014FC                           653  
000014FC  223C 00800080            654      MOVE.L #PURPLE,     D1
00001502  103C 0050                655      MOVE.B  #80,        D0          
00001506  4E4F                     656      TRAP    #15
00001508                           657  
00001508  223C 00800080            658      MOVE.L #PURPLE,     D1
0000150E  103C 0051                659      MOVE.B  #81,        D0          
00001512  4E4F                     660      TRAP    #15
00001514                           661  
00001514  223C 00FFFFFF            662      MOVE.L  #WHITE,     D1          ; Set out line color
0000151A  103C 0050                663      MOVE.B  #80,        D0          ; Task for Background Color
0000151E  4E4F                     664      TRAP    #15                     ; Trap (Perform action)
00001520                           665  
00001520                           666      ; Set X, Y, Width and Height
00001520  7200                     667      MOVE.L  #0,   D1          ; X
00001522  5381                     668      SUB.L   #1, D1     
00001524  243C 000001F4            669      MOVE.L  #500,   D2          ; Y
0000152A  7600                     670      MOVE.L  #0,   D3
0000152C  0683 0000198C            671      ADD.L   #SCREEN_W,   D3      ; Width
00001532                           672  
00001532  0684 000001C2            673      ADD.L   #450,   D4      ; Height
00001538                           674      
00001538                           675      ; Draw Player
00001538  103C 0057                676      MOVE.B  #87,        D0          ; Draw Player
0000153C  4E4F                     677      TRAP    #15                     ; Trap (Perform action)
0000153E  4E75                     678      RTS                             ; Return to subroutine
00001540                           679  
00001540                           680  *-----------------------------------------------------------
00001540                           681  * Subroutine    : Draw Enemy
00001540                           682  * Description   : Draw Enemy Square
00001540                           683  *-----------------------------------------------------------
00001540                           684  DRAW_ENEMYS:
00001540  4281                     685      CLR.L D1
00001542  4282                     686      CLR.L D2
00001544  4283                     687      CLR.L D3
00001546                           688      ; Set Pixel Colors
00001546  223C 000000FF            689      MOVE.L  #RED,       D1          ; Set Background color
0000154C  103C 0050                690      MOVE.B  #80,        D0          ; Task for Background Color
00001550  4E4F                     691      TRAP    #15                     ; Trap (Perform action)
00001552                           692  
00001552  4240                     693      CLR D0
00001554  4241                     694      CLR D1
00001556  4242                     695      CLR D2  
00001558  4243                     696      CLR D3
0000155A  4244                     697      CLR D4
0000155C  4245                     698      CLR D5
0000155E                           699  
0000155E                           700  DRAW_ENEMY_1:
0000155E  2239 000019B0            701      MOVE.L  ENEMY_1_X,      D1       ; X   
00001564  2439 000019B4            702      MOVE.L  ENEMY_1_Y,      D2       ; Y
0000156A                           703  
0000156A                           704      * Width and Height *
0000156A  2639 000019B0            705      MOVE.L  ENEMY_1_X,      D3
00001570  0683 0000001E            706      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001576  2839 000019B4            707      MOVE.L  ENEMY_1_Y,      D4 
0000157C  0684 0000000A            708      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001582                           709      
00001582                           710      ; Draw Enemy    
00001582  103C 0057                711      MOVE.B  #87,            D0          ; Draw Enemy
00001586  4E4F                     712      TRAP    #15                     ; Trap (Perform action)
00001588                           713  
00001588                           714  DRAW_ENEMY_2:
00001588  2239 000019B8            715      MOVE.L  ENEMY_2_X,      D1       ; X   
0000158E  2439 000019BC            716      MOVE.L  ENEMY_2_Y,      D2       ; Y
00001594                           717  
00001594                           718      * Width and Height *
00001594  2639 000019B8            719      MOVE.L  ENEMY_2_X,      D3
0000159A  0683 0000001E            720      ADD.L   #ENMY_W_INIT,   D3      ; Width
000015A0  2839 000019BC            721      MOVE.L  ENEMY_2_Y,      D4 
000015A6  0684 0000000A            722      ADD.L   #ENMY_H_INIT,   D4      ; Height
000015AC                           723      
000015AC                           724      ; Draw Enemy    
000015AC  103C 0057                725      MOVE.B  #87,        D0          ; Draw Enemy
000015B0  4E4F                     726      TRAP    #15                     ; Trap (Perform action)
000015B2                           727  
000015B2                           728  DRAW_ENEMY_3:
000015B2  2239 000019C0            729      MOVE.L  ENEMY_3_X,      D1       ; X   
000015B8  2439 000019C4            730      MOVE.L  ENEMY_3_Y,      D2       ; Y
000015BE                           731  
000015BE                           732      * Width and Height *
000015BE  2639 000019C0            733      MOVE.L  ENEMY_3_X,      D3
000015C4  0683 0000001E            734      ADD.L   #ENMY_W_INIT,   D3      ; Width
000015CA  2839 000019C4            735      MOVE.L  ENEMY_3_Y,      D4 
000015D0  0684 0000000A            736      ADD.L   #ENMY_H_INIT,   D4      ; Height
000015D6                           737      
000015D6                           738      ; Draw Enemy    
000015D6  103C 0057                739      MOVE.B  #87,        D0          ; Draw Enemy
000015DA  4E4F                     740      TRAP    #15                     ; Trap (Perform action)
000015DC                           741  
000015DC                           742  
000015DC                           743  DRAW_ENEMY_4:
000015DC  2239 000019C8            744      MOVE.L  ENEMY_4_X,      D1       ; X   
000015E2  2439 000019CC            745      MOVE.L  ENEMY_4_Y,      D2       ; Y
000015E8                           746  
000015E8                           747      * Width and Height *
000015E8  2639 000019C8            748      MOVE.L  ENEMY_4_X,      D3
000015EE  0683 0000001E            749      ADD.L   #ENMY_W_INIT,   D3      ; Width
000015F4  2839 000019CC            750      MOVE.L  ENEMY_4_Y,      D4 
000015FA  0684 0000000A            751      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001600                           752      
00001600                           753      ; Draw Enemy    
00001600  103C 0057                754      MOVE.B  #87,        D0          ; Draw Enemy
00001604  4E4F                     755      TRAP    #15                     ; Trap (Perform action)
00001606                           756  
00001606                           757  DRAW_ENEMY_5:
00001606  2239 000019D0            758      MOVE.L  ENEMY_5_X,      D1       ; X   
0000160C  2439 000019D4            759      MOVE.L  ENEMY_5_Y,      D2       ; Y
00001612                           760  
00001612                           761      * Width and Height *
00001612  2639 000019D0            762      MOVE.L  ENEMY_5_X,      D3
00001618  0683 0000001E            763      ADD.L   #ENMY_W_INIT,   D3      ; Width
0000161E  2839 000019D4            764      MOVE.L  ENEMY_5_Y,      D4 
00001624  0684 0000000A            765      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000162A                           766      
0000162A                           767      ; Draw Enemy    
0000162A  103C 0057                768      MOVE.B  #87,        D0          ; Draw Enemy
0000162E  4E4F                     769      TRAP    #15                     ; Trap (Perform action)
00001630                           770  
00001630  4E75                     771      RTS
00001632                           772  
00001632                           773  
00001632                           774  *-----------------------------------------------------------
00001632                           775  * Subroutine    : Draw bullet
00001632                           776  * Description   : Draw Enemy bullet
00001632                           777  *-----------------------------------------------------------
00001632                           778  DRAW_BULLET:
00001632                           779  ; Set Pixel Colors
00001632  223C 00FFFF00            780      MOVE.L  #AQUA,       D1          ; Set Background color
00001638  103C 0050                781      MOVE.B  #80,        D0          ; Task for Background Color
0000163C  4E4F                     782      TRAP    #15                     ; Trap (Perform action)
0000163E                           783  
0000163E                           784      ; Set X, Y, Width and Height
0000163E  2239 000019E0            785      MOVE.L  BULLET_X,    D1          ; X
00001644  2439 000019E4            786      MOVE.L  BULLET_Y,    D2          ; Y
0000164A  2639 000019E0            787      MOVE.L  BULLET_X,    D3
00001650  5A83                     788      ADD.L   #BULLET_W,   D3      ; Width
00001652  2839 000019E4            789      MOVE.L  BULLET_Y,    D4 
00001658  5A84                     790      ADD.L   #BULLET_H,   D4      ; Height
0000165A                           791      
0000165A                           792      ; Draw Enemy    
0000165A  103C 0057                793      MOVE.B  #87,        D0          ; Draw Enemy
0000165E  4E4F                     794      TRAP    #15                     ; Trap (Perform action)
00001660  4E75                     795      RTS                             ; Return to subroutine
00001662                           796  
00001662                           797  
00001662                           798  
00001662                           799  
00001662                           800  *-----------------------------------------------------------
00001662                           801  * Subroutine    : Collision Check
00001662                           802  * Description   : Axis-Aligned Bounding Box Collision Detection
00001662                           803  * Algorithm checks for overlap on the 2 sides of the Player and 
00001662                           804  * Not checking top of enemy as this gives less time to detect collision, it kept missing collision somtimes
00001662                           805  * Enemy rectangles
00001662                           806  * BULLET_X <= ENEMY_X + ENEMY_W &&
00001662                           807  * BULLET_X>= ENEMY_X &&
00001662                           808  * BULLET< = ENEMY_Y
00001662                           809  *-----------------------------------------------------------
00001662                           810  CHECK_COLLISIONS:
00001662                           811  
00001662  6100 0014                812      BSR CHECK_BULLET_Y_GREATER_ENEMY_1_Y
00001666  6100 007A                813      BSR CHECK_BULLET_Y_GREATER_ENEMY_2_Y
0000166A  6100 00E0                814      BSR CHECK_BULLET_Y_GREATER_ENEMY_3_Y
0000166E  6100 0146                815      BSR CHECK_BULLET_Y_GREATER_ENEMY_4_Y
00001672  6100 01AC                816      BSR CHECK_BULLET_Y_GREATER_ENEMY_5_Y
00001676                           817  
00001676                           818  
00001676  4E75                     819      RTS
00001678                           820  
00001678                           821  CHECK_BULLET_Y_GREATER_ENEMY_1_Y:    
00001678  4281                     822      CLR.L   D1
0000167A  4282                     823      CLR.L   D2
0000167C  2239 000019E4            824       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
00001682  2439 000019B4            825       MOVE.L  ENEMY_1_y,    D2          ; Move Enemy Y to D2
00001688                           826  
00001688  B481                     827       CMP.L   D1,         D2          ; Do they Overlap ?
0000168A  6C00 0006                828       BGE     CHECK_BULLET_X_LESSER_1_WIDTH  ; Less than or Equal
0000168E  6000 01FA                829       BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001692                           830  
00001692                           831  
00001692                           832  
00001692                           833  CHECK_BULLET_X_LESSER_1_WIDTH:     ; Check player is not  
00001692  4281                     834      CLR.L   D1
00001694  4282                     835      CLR.L   D2
00001696  2239 000019E0            836      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
0000169C  2439 000019B0            837      MOVE.L  ENEMY_1_X,           D2          ; Move Enemy X to D2
000016A2  0682 0000001E            838      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
000016A8  B282                     839      CMP.L   D2,             D1          ; Do they OverLap ?
000016AA  6F00 0006                840      BLE     CHECK_BULLET_X_GREATER_ENEMY_1_X ; Less than or Equal
000016AE  6000 01DA                841      BRA     COLLISION_CHECK_DONE    ; If not no collision   
000016B2                           842  
000016B2                           843  CHECK_BULLET_X_GREATER_ENEMY_1_X:
000016B2  4281                     844      CLR.L   D1
000016B4  4282                     845      CLR.L   D2
000016B6  2239 000019E0            846      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
000016BC  2439 000019B0            847      MOVE.L  ENEMY_1_X,    D2          ; Move Enemy X to D2
000016C2  B282                     848      CMP.L   D2,         D1          ;   Do the Overlap ?
000016C4  6C00 0006                849      BGE     COLLISION_1 ; greater than or equal ?
000016C8  6000 01C0                850      BRA     COLLISION_CHECK_DONE    ; If not no collision
000016CC                           851  
000016CC                           852  COLLISION_1:
000016CC  52B9 000019A0            853      ADD.L  #01, PLAYER_SCORE       ; adds to Player Score
000016D2                           854  
000016D2  6100 FC32                855      BSR RESPAWN_BULLET
000016D6  6100 FDA2                856      BSR PLAY_SCORE_EFFECT
000016DA  6100 FB36                857      BSR RESET_ENEMY_1
000016DE                           858      
000016DE  6000 01AA                859      BRA     COLLISION_CHECK_DONE
000016E2                           860  
000016E2                           861  CHECK_BULLET_Y_GREATER_ENEMY_2_Y:    
000016E2  4281                     862      CLR.L   D1
000016E4  4282                     863      CLR.L   D2
000016E6  2239 000019E4            864       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
000016EC  2439 000019BC            865       MOVE.L  ENEMY_2_y,    D2          ; Move Enemy Y to D2
000016F2                           866  
000016F2  B481                     867       CMP.L   D1,         D2          ; Do they Overlap ?
000016F4  6C00 0006                868       BGE     CHECK_BULLET_X_LESSER_2_WIDTH  ; Less than or Equal
000016F8  6000 0190                869       BRA     COLLISION_CHECK_DONE    ; If not no collision 
000016FC                           870  
000016FC                           871  
000016FC                           872  
000016FC                           873  CHECK_BULLET_X_LESSER_2_WIDTH:     ; Check player is not  
000016FC  4281                     874      CLR.L   D1
000016FE  4282                     875      CLR.L   D2
00001700  2239 000019E0            876      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
00001706  2439 000019B8            877      MOVE.L  ENEMY_2_X,           D2          ; Move Enemy X to D2
0000170C  0682 0000001E            878      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
00001712  B282                     879      CMP.L   D2,             D1          ; Do they OverLap ?
00001714  6F00 0006                880      BLE     CHECK_BULLET_X_GREATER_ENEMY_2_X ; Less than or Equal
00001718  6000 0170                881      BRA     COLLISION_CHECK_DONE    ; If not no collision   
0000171C                           882  
0000171C                           883  CHECK_BULLET_X_GREATER_ENEMY_2_X:
0000171C  4281                     884      CLR.L   D1
0000171E  4282                     885      CLR.L   D2
00001720  2239 000019E0            886      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
00001726  2439 000019B8            887      MOVE.L  ENEMY_2_X,    D2          ; Move Enemy X to D2
0000172C  B282                     888      CMP.L   D2,         D1          ;   Do the Overlap ?
0000172E  6C00 0006                889      BGE     COLLISION_2 ; greater than or equal ?
00001732  6000 0156                890      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001736                           891  
00001736                           892  COLLISION_2:
00001736  52B9 000019A0            893      ADD.L  #01, PLAYER_SCORE       ; adds to Player Score
0000173C                           894  
0000173C                           895      
0000173C  6100 FBC8                896      BSR RESPAWN_BULLET
00001740  6100 FD38                897      BSR PLAY_SCORE_EFFECT
00001744  6100 FAFA                898      BSR RESET_ENEMY_2
00001748                           899      
00001748  6000 0140                900      BRA     COLLISION_CHECK_DONE
0000174C                           901  
0000174C                           902  CHECK_BULLET_Y_GREATER_ENEMY_3_Y:    
0000174C  4281                     903      CLR.L   D1
0000174E  4282                     904      CLR.L   D2
00001750  2239 000019E4            905       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
00001756  2439 000019C4            906       MOVE.L  ENEMY_3_y,    D2          ; Move Enemy Y to D2
0000175C                           907  
0000175C  B481                     908       CMP.L   D1,         D2          ; Do they Overlap ?
0000175E  6C00 0006                909       BGE     CHECK_BULLET_X_LESSER_3_WIDTH  ; Less than or Equal
00001762  6000 0126                910       BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001766                           911  
00001766                           912  
00001766                           913  CHECK_BULLET_X_LESSER_3_WIDTH:     ; Check player is not  
00001766  4281                     914      CLR.L   D1
00001768  4282                     915      CLR.L   D2
0000176A  2239 000019E0            916      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
00001770  2439 000019C0            917      MOVE.L  ENEMY_3_X,           D2          ; Move Enemy X to D2
00001776  0682 0000001E            918      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
0000177C  B282                     919      CMP.L   D2,             D1          ; Do they OverLap ?
0000177E  6F00 0006                920      BLE     CHECK_BULLET_X_GREATER_ENEMY_3_X ; Less than or Equal
00001782  6000 0106                921      BRA     COLLISION_CHECK_DONE    ; If not no collision   
00001786                           922  
00001786                           923  CHECK_BULLET_X_GREATER_ENEMY_3_X:
00001786  4281                     924      CLR.L   D1
00001788  4282                     925      CLR.L   D2
0000178A  2239 000019E0            926      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
00001790  2439 000019C0            927      MOVE.L  ENEMY_3_X,    D2          ; Move Enemy X to D2
00001796  B282                     928      CMP.L   D2,         D1          ;   Do the Overlap ?
00001798  6C00 0006                929      BGE     COLLISION_3 ; greater than or equal ?
0000179C  6000 00EC                930      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017A0                           931  
000017A0                           932  COLLISION_3:
000017A0  52B9 000019A0            933      ADD.L  #01, PLAYER_SCORE       ; adds to Player Score
000017A6                           934  
000017A6                           935      
000017A6  6100 FB5E                936      BSR RESPAWN_BULLET
000017AA  6100 FCCE                937      BSR PLAY_SCORE_EFFECT
000017AE  6100 FABE                938      BSR RESET_ENEMY_3
000017B2                           939      
000017B2  6000 00D6                940      BRA     COLLISION_CHECK_DONE
000017B6                           941  
000017B6                           942  CHECK_BULLET_Y_GREATER_ENEMY_4_Y:    
000017B6  4281                     943      CLR.L   D1
000017B8  4282                     944      CLR.L   D2
000017BA  2239 000019E4            945       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
000017C0  2439 000019CC            946       MOVE.L  ENEMY_4_y,    D2          ; Move Enemy Y to D2
000017C6                           947  
000017C6  B481                     948       CMP.L   D1,         D2          ; Do they Overlap ?
000017C8  6C00 0006                949       BGE     CHECK_BULLET_X_LESSER_4_WIDTH  ; Less than or Equal
000017CC  6000 00BC                950       BRA     COLLISION_CHECK_DONE    ; If not no collision 
000017D0                           951  
000017D0                           952  CHECK_BULLET_X_LESSER_4_WIDTH:     ; Check player is not  
000017D0  4281                     953      CLR.L   D1
000017D2  4282                     954      CLR.L   D2
000017D4  2239 000019E0            955      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
000017DA  2439 000019C8            956      MOVE.L  ENEMY_4_X,           D2          ; Move Enemy X to D2
000017E0  0682 0000001E            957      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
000017E6  B282                     958      CMP.L   D2,             D1          ; Do they OverLap ?
000017E8  6F00 0006                959      BLE     CHECK_BULLET_X_GREATER_ENEMY_4_X ; Less than or Equal
000017EC  6000 009C                960      BRA     COLLISION_CHECK_DONE    ; If not no collision   
000017F0                           961  
000017F0                           962  CHECK_BULLET_X_GREATER_ENEMY_4_X:
000017F0  4281                     963      CLR.L   D1
000017F2  4282                     964      CLR.L   D2
000017F4  2239 000019E0            965      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
000017FA  2439 000019C8            966      MOVE.L  ENEMY_4_X,    D2          ; Move Enemy X to D2
00001800  B282                     967      CMP.L   D2,         D1          ;   Do the Overlap ?
00001802  6C00 0006                968      BGE     COLLISION_4 ; greater than or equal ?
00001806  6000 0082                969      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000180A                           970  
0000180A                           971  COLLISION_4:
0000180A  52B9 000019A0            972      ADD.L  #01, PLAYER_SCORE       ; adds to Player Score
00001810                           973      
00001810                           974  
00001810  6100 FAF4                975      BSR RESPAWN_BULLET
00001814  6100 FC64                976      BSR PLAY_SCORE_EFFECT
00001818  6100 FA82                977      BSR RESET_ENEMY_4
0000181C                           978      
0000181C                           979  
0000181C  6000 006C                980      BRA     COLLISION_CHECK_DONE
00001820                           981  
00001820                           982  CHECK_BULLET_Y_GREATER_ENEMY_5_Y:    
00001820  4281                     983      CLR.L   D1
00001822  4282                     984      CLR.L   D2
00001824  2239 000019E4            985       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
0000182A  2439 000019D4            986       MOVE.L  ENEMY_5_y,    D2          ; Move Enemy Y to D2
00001830                           987  
00001830  B481                     988       CMP.L   D1,         D2          ; Do they Overlap ?
00001832  6C00 0006                989       BGE     CHECK_BULLET_X_LESSER_5_WIDTH  ; Less than or Equal
00001836  6000 0052                990       BRA     COLLISION_CHECK_DONE    ; If not no collision 
0000183A                           991  
0000183A                           992  CHECK_BULLET_X_LESSER_5_WIDTH:     ; Check player is not  
0000183A  4281                     993      CLR.L   D1
0000183C  4282                     994      CLR.L   D2
0000183E  2239 000019E0            995      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
00001844  2439 000019D0            996      MOVE.L  ENEMY_5_X,           D2          ; Move Enemy X to D2
0000184A  0682 0000001E            997      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
00001850  B282                     998      CMP.L   D2,             D1          ; Do they OverLap ?
00001852  6F00 0006                999      BLE     CHECK_BULLET_X_GREATER_ENEMY_5_X ; Less than or Equal
00001856  6000 0032               1000      BRA     COLLISION_CHECK_DONE    ; If not no collision   
0000185A                          1001  
0000185A                          1002  CHECK_BULLET_X_GREATER_ENEMY_5_X:
0000185A  4281                    1003      CLR.L   D1
0000185C  4282                    1004      CLR.L   D2
0000185E  2239 000019E0           1005      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
00001864  2439 000019D0           1006      MOVE.L  ENEMY_5_X,    D2          ; Move Enemy X to D2
0000186A  B282                    1007      CMP.L   D2,         D1          ;   Do the Overlap ?
0000186C  6C00 0006               1008      BGE     COLLISION_5 ; greater than or equal ?
00001870  6000 0018               1009      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001874                          1010  
00001874                          1011  COLLISION_5:
00001874  52B9 000019A0           1012      ADD.L  #01, PLAYER_SCORE       ; adds to Player Score
0000187A                          1013      
0000187A                          1014      
0000187A  6100 FA8A               1015      BSR RESPAWN_BULLET
0000187E  6100 FBFA               1016      BSR PLAY_SCORE_EFFECT
00001882  6100 FA46               1017      BSR RESET_ENEMY_5
00001886                          1018      
00001886  6000 0002               1019      BRA     COLLISION_CHECK_DONE
0000188A                          1020  
0000188A                          1021  
0000188A                          1022  
0000188A                          1023  
0000188A                          1024  COLLISION_CHECK_DONE:               ; No Collision Update points
0000188A  4E75                    1025      RTS                             ; Return to subroutine
0000188C                          1026  
0000188C                          1027  
0000188C                          1028  
0000188C                          1029  
0000188C                          1030  
0000188C                          1031  *-----------------------------------------------------------
0000188C                          1032  * Subroutine    : end screen
0000188C                          1033  * Description   : can exit program from here or restart
0000188C                          1034  *-----------------------------------------------------------
0000188C                          1035  END_SCREEN_LOOP:
0000188C                          1036      * MOVE.B #8, D0                   ; D0 IS ONLY USED FOR COMMANDS, OUTPUST FROM THIS GOINTO OTHER DATA REGISTERS, THIS WILL BE STORED IN D1 
0000188C                          1037      * TRAP #15     
0000188C                          1038      * MOVE.L D1, DELTA_TIME                   ; TRAP 15 RUNS COMMAND 15   
0000188C                          1039  
0000188C  6100 001C               1040      BSR CHECK_INPUTS
00001890  6100 0004               1041      BSR END_SCREEN_DRAW
00001894  61F6                    1042      BSR END_SCREEN_LOOP
00001896                          1043  
00001896                          1044  * END_SCREEN_DELTA_t:
00001896                          1045  *     MOVE.B #8, D0                   ;CURRENT TIME 
00001896                          1046  *     TRAP #15  
00001896                          1047  *     SUB.L DELTA_TIME, D1            ; TAKING AWAY DELTATIME FROM CURRENT TO CHECK REMAINDER, 
00001896                          1048      
00001896                          1049  *     CMP.L #4, D1
00001896                          1050  *     BMI.S END_SCREEN_DELTA_t                     ; if deltam time is lesser or equal to 17; branch lesser or equal to 
00001896                          1051  *     BRA END_SCREEN_LOOP
00001896                          1052  
00001896                          1053  
00001896                          1054  END_SCREEN_DRAW:
00001896                          1055       ; Enable back buffer
00001896  103C 005E               1056      MOVE.B  #94,        D0
0000189A  4E4F                    1057      TRAP    #15
0000189C                          1058  
0000189C                          1059      ; Clear the screen
0000189C  103C 000B               1060      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000018A0  323C FF00               1061      MOVE.W  #$FF00,     D1          ; Clear contents
000018A4  4E4F                    1062      TRAP    #15                     ; Trap (Perform action)
000018A6                          1063  
000018A6  6100 0026               1064      BSR DRAW_GAME_OVER_MSGS
000018AA                          1065      
000018AA                          1066  CHECK_INPUTS:
000018AA                          1067  
000018AA                          1068      ; Process Input
000018AA  4281                    1069      CLR.L   D1                      ; Clear Data Register
000018AC  103C 0013               1070      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000018B0  223C 72782233           1071      MOVE.L  #$72782233,  D1            ; ALL THE INPUTS PUT IN D1 WASD, IN ONE BYTE
000018B6  4E4F                    1072      TRAP    #15                      ; DEXCUTES ABOVE AND CHECKS IF ny have been pushed
000018B8                          1073  
000018B8                          1074     * CHECKS CORRESPONG NUMBERS ARE BEING PRESSED
000018B8  B2BC FF000000           1075      CMP.L  #$FF000000, D1           ; R
000018BE  6700 F740               1076      BEQ    INITIALISE
000018C2                          1077  
000018C2  B2BC 00FF0000           1078      CMP.L  #$00FF0000, D1           ; X
000018C8  6700 005C               1079      BEQ    EXIT
000018CC                          1080  
000018CC  4E75                    1081      RTS
000018CE                          1082  
000018CE                          1083  
000018CE                          1084  DRAW_GAME_OVER_MSGS:
000018CE                          1085  
000018CE                          1086  
000018CE  103C 000B               1087      MOVE.B  #TC_CURSR_P,D0          
000018D2  323C 1910               1088      MOVE.W  #$1910,     D1          
000018D6  4E4F                    1089      TRAP    #15                   
000018D8  43F9 00001946           1090      LEA     SCORE_MSG,  A1       
000018DE  303C 000D               1091      MOVE    #13,        D0         
000018E2  4E4F                    1092      TRAP    #15                     
000018E4                          1093  
000018E4  103C 000B               1094      MOVE.B  #TC_CURSR_P,D0         
000018E8  323C 2410               1095      MOVE.W  #$2410,     D1   
000018EC  4E4F                    1096      TRAP    #15                     
000018EE  103C 0003               1097      MOVE.B  #03,        D0          
000018F2  2238 0013               1098      MOVE.L  TC_KEYCODE,D1         
000018F6  4E4F                    1099      TRAP    #15    
000018F8                          1100  
000018F8  103C 000B               1101      MOVE.B  #TC_CURSR_P,D0          
000018FC  323C 1912               1102      MOVE.W  #$1912,     D1        
00001900  4E4F                    1103      TRAP    #15                    
00001902  43F9 0000195D           1104      LEA     GAME_OVER_RESTART_MSG,  A1          
00001908  303C 000D               1105      MOVE    #13,        D0          
0000190C  4E4F                    1106      TRAP    #15   
0000190E                          1107  
0000190E  103C 000B               1108      MOVE.B  #TC_CURSR_P,D0          
00001912  323C 1914               1109      MOVE.W  #$1914,     D1        
00001916  4E4F                    1110      TRAP    #15                    
00001918  43F9 00001970           1111      LEA     GAME_OVER_EXIT_MSG,  A1          
0000191E  303C 000D               1112      MOVE    #13,        D0          
00001922  4E4F                    1113      TRAP    #15                     
00001924                          1114  
00001924                          1115                       
00001924                          1116  
00001924  4E75                    1117      RTS
00001926                          1118  *-----------------------------------------------------------
00001926                          1119  * Subroutine    : EXIT
00001926                          1120  * Description   : Exit message and End Game
00001926                          1121  *-----------------------------------------------------------
00001926                          1122  EXIT:
00001926                          1123      ; Show if Exiting is Running
00001926  103C 000B               1124      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000192A  323C 4004               1125      MOVE.W  #$4004,     D1          ; Col 40, Row 1
0000192E  4E4F                    1126      TRAP    #15                     ; Trap (Perform action)
00001930  43F9 00001980           1127      LEA     EXIT_MSG,   A1          ; Exit
00001936  303C 000D               1128      MOVE    #13,        D0          ; No Line feed
0000193A  4E4F                    1129      TRAP    #15                     ; Trap (Perform action)
0000193C  103C 0009               1130      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001940  4E4F                    1131      TRAP    #15                     ; Trap (Perform action)
00001942  FFFF FFFF               1132      SIMHALT
00001946                          1133  
00001946                          1134  *-----------------------------------------------------------
00001946                          1135  * Section       : Messages
00001946                          1136  * Description   : Messages to Print on Console, names should be
00001946                          1137  * self documenting
00001946                          1138  *-----------------------------------------------------------
00001946                          1139  
00001946                          1140  * BASICALLY VARIABLES DECALRED AT BTTOM 
00001946                          1141  * dc.b is text
00001946                          1142  * ds.b is number 
00001946                          1143  * becarefull how you store l/b, long/byte
00001946                          1144  
00001946= 53 63 6F 72 65 20 ...   1145  SCORE_MSG               DC.B     'Score : ', 0  
0000194F= 42 61 73 65 20 6C ...   1146  BASE_LIVES_MSG          DC.B     'Base lives : ', 0     ; Keycode Message
0000195D= 50 72 65 73 73 20 ...   1147  GAME_OVER_RESTART_MSG   DC.B     'Press R to restart', 0
00001970= 50 72 65 73 73 20 ...   1148  GAME_OVER_EXIT_MSG      DC.B     'Press X to exit', 0
00001980                          1149  
00001980= 45 78 69 74 69 6E ...   1150  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
0000198C                          1151  
0000198C                          1152  *-----------------------------------------------------------
0000198C                          1153  * Section       : Graphic Colors
0000198C                          1154  * Description   : Screen Pixel Color
0000198C                          1155  *-----------------------------------------------------------
0000198C  =00FFFFFF               1156  WHITE           EQU     $00FFFFFF
0000198C  =000000FF               1157  RED             EQU     $000000FF
0000198C  =00FFFF00               1158  AQUA            EQU     $00FFFF00
0000198C  =00800080               1159  PURPLE          EQU     $00800080
0000198C                          1160  
0000198C                          1161  
0000198C                          1162  *-----------------------------------------------------------
0000198C                          1163  * Section       : Screen Size
0000198C                          1164  * Description   : Screen Width and Height
0000198C                          1165  *-----------------------------------------------------------
0000198C                          1166  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
0000198E                          1167  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001990                          1168  
00001990                          1169  *-----------------------------------------------------------
00001990                          1170  * Section       : Bullet status
00001990                          1171  * Description   : whether bullet has been shot or not
00001990                          1172  * 0 = false
00001990                          1173  * 1 = true
00001990                          1174  *-----------------------------------------------------------
00001990                          1175  BEEN_SHOT       DS.L    01      ; reserve of space
00001994                          1176  
00001994                          1177  
00001994                          1178  *-----------------------------------------------------------
00001994                          1179  * Section       : Base lives
00001994                          1180  * Description   : Used for storing bases current lives
00001994                          1181  *-----------------------------------------------------------
00001994                          1182  BASE_LIVES      DS.L    01  ; Reserve Space for Current Key Pressed
00001998                          1183  *-----------------------------------------------------------
00001998                          1184  * Section       : Character Positions
00001998                          1185  * Description   : Player and Enemy Position Memory Locations
00001998                          1186  *-----------------------------------------------------------
00001998                          1187  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
0000199C                          1188  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000019A0                          1189  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000019A4                          1190  
000019A4                          1191  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000019A8                          1192  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
000019AC                          1193  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
000019B0                          1194  
000019B0                          1195  ENEMY_1_X         DS.L    01 ; Reserve Space for Enemy X Position
000019B4                          1196  ENEMY_1_Y         DS.L    01  ; Reserve Space for Enemy Y Position
000019B8                          1197  
000019B8                          1198  ENEMY_2_X         DS.L    01
000019BC                          1199  ENEMY_2_Y         DS.L    01
000019C0                          1200  
000019C0                          1201  ENEMY_3_X         DS.L    01 ; Reserve Space for Enemy X Position
000019C4                          1202  ENEMY_3_Y         DS.L    01  ; Reserve Space for Enemy Y Position
000019C8                          1203  
000019C8                          1204  ENEMY_4_X         DS.L    01
000019CC                          1205  ENEMY_4_Y         DS.l    01
000019D0                          1206  
000019D0                          1207  ENEMY_5_X         DS.L    01 ; Reserve Space for Enemy X Position
000019D4                          1208  ENEMY_5_Y         DS.L    01  ; Reserve Space for Enemy Y Position
000019D8                          1209  
000019D8                          1210  
000019D8                          1211  ENEMY_MOVING_R    DS.L    01  ; RES SPACE FOR MOVING RIGHT BOOLEAN
000019DC                          1212  
000019DC                          1213  ENEMY_SPEED_MODIFIER DS.L 01
000019E0                          1214  BULLET_X        DS.L    01   ; space for bullet x pos    
000019E4                          1215  BULLET_Y        DS.L    01   ; space for bullet y pos
000019E8                          1216  
000019E8                          1217  *-----------------------------------------------------------
000019E8                          1218  * Section       : TIme
000019E8                          1219  * Description   : Sound files, which are then loaded and given
000019E8                          1220  * an address in memory, they take a longtime to process and play
000019E8                          1221  * so keep the files small. Used https://voicemaker.in/ to 
000019E8                          1222  * generate and Audacity to convert MP3 to WAV
000019E8                          1223  *-----------------------------------------------------------
000019E8                          1224  DELTA_TIME      DS.L   01 ; empty 
000019EC                          1225  
000019EC                          1226  *-----------------------------------------------------------
000019EC                          1227  * Section       : Sounds
000019EC                          1228  * Description   : Sound files, which are then loaded and given
000019EC                          1229  * an address in memory, they take a longtime to process and play
000019EC                          1230  * so keep the files small. Used https://voicemaker.in/ to 
000019EC                          1231  * generate and Audacity to convert MP3 to WAV
000019EC                          1232  *-----------------------------------------------------------
000019EC= 65 78 70 6C 6F 73 ...   1233  EXPLOSION_WAV   DC.B    'explosion.wav',0        
000019FA= 73 63 6F 72 65 2E ...   1234  SCORE_WAV         DC.B    'score.wav',0        
00001A04= 67 61 6D 65 5F 73 ...   1235  GAME_START_WAV        DC.B    'game_start.wav',0        
00001A13                          1236  
00001A13                          1237      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
AQUA                FFFF00
BASE_LIVES          1994
BASE_LIVES_MSG      194F
BEEN_SHOT           1990
BULLET_H            5
BULLET_SPEED        50
BULLET_TRACK_PLAYER  131A
BULLET_W            5
BULLET_X            19E0
BULLET_Y            19E4
CHECK_BULLET_X_GREATER_ENEMY_1_X  16B2
CHECK_BULLET_X_GREATER_ENEMY_2_X  171C
CHECK_BULLET_X_GREATER_ENEMY_3_X  1786
CHECK_BULLET_X_GREATER_ENEMY_4_X  17F0
CHECK_BULLET_X_GREATER_ENEMY_5_X  185A
CHECK_BULLET_X_LESSER_1_WIDTH  1692
CHECK_BULLET_X_LESSER_2_WIDTH  16FC
CHECK_BULLET_X_LESSER_3_WIDTH  1766
CHECK_BULLET_X_LESSER_4_WIDTH  17D0
CHECK_BULLET_X_LESSER_5_WIDTH  183A
CHECK_BULLET_Y_GREATER_ENEMY_1_Y  1678
CHECK_BULLET_Y_GREATER_ENEMY_2_Y  16E2
CHECK_BULLET_Y_GREATER_ENEMY_3_Y  174C
CHECK_BULLET_Y_GREATER_ENEMY_4_Y  17B6
CHECK_BULLET_Y_GREATER_ENEMY_5_Y  1820
CHECK_COLLISIONS    1662
CHECK_ENEMY_RESETS  11DA
CHECK_ENEMY_RESET_1  11F0
CHECK_ENEMY_RESET_2  121E
CHECK_ENEMY_RESET_3  124C
CHECK_ENEMY_RESET_4  127A
CHECK_ENEMY_RESET_5  12A8
CHECK_FOR_BULLET_RESPAWN  12F6
CHECK_FOR_EXIT      1184
CHECK_INPUTS        18AA
COLLISION_1         16CC
COLLISION_2         1736
COLLISION_3         17A0
COLLISION_4         180A
COLLISION_5         1874
COLLISION_CHECK_DONE  188A
D                   44
DELTA_TIME          19E8
DRAW                13A0
DRAW_BASE           14F2
DRAW_BULLET         1632
DRAW_ENEMYS         1540
DRAW_ENEMY_1        155E
DRAW_ENEMY_2        1588
DRAW_ENEMY_3        15B2
DRAW_ENEMY_4        15DC
DRAW_ENEMY_5        1606
DRAW_GAME_OVER_MSGS  18CE
DRAW_PLAYER         14C2
DRAW_PLYR_DATA      13C6
END_SCREEN_DRAW     1896
END_SCREEN_LOOP     188C
ENEMY_1_REACHED_BASE  1208
ENEMY_1_X           19B0
ENEMY_1_Y           19B4
ENEMY_2_REACHED_BASE  1236
ENEMY_2_X           19B8
ENEMY_2_Y           19BC
ENEMY_3_REACHED_BASE  1264
ENEMY_3_X           19C0
ENEMY_3_Y           19C4
ENEMY_4_REACHED_BASE  1292
ENEMY_4_X           19C8
ENEMY_4_Y           19CC
ENEMY_5_REACHED_BASE  12C0
ENEMY_5_X           19D0
ENEMY_5_Y           19D4
ENEMY_MOVE_DOWN     11B4
ENEMY_MOVING_R      19D8
ENEMY_SPEED         5
ENEMY_SPEED_MODIFIER  19DC
ENMY_H_INIT         A
ENMY_W_INIT         1E
ESCAPE              1B
EXIT                1926
EXIT_MSG            1980
EXPLOSION_INDEX     1
EXPLOSION_LOAD      1486
EXPLOSION_WAV       19EC
GAME                1142
GAMELOOP            1146
GAME_DELTA_T        116E
GAME_OVER_EXIT_MSG  1970
GAME_OVER_RESTART_MSG  195D
GAME_START_INDEX    2
GAME_START_LOAD     14A4
GAME_START_WAV      1A04
GND_FALSE           0
GND_TRUE            1
INITIALISE          1000
INITIALISE_ENEMYS   10AC
INPUT               1330
MOVEMENT_DONE       1466
MOVE_DOWN           1456
MOVE_LEFT           1436
MOVE_RIGHT          1422
NUM_OF_ENEMYS       2
PERFORM_MOVE_DOWN   1460
PERFORM_MOVE_LEFT   143E
PERFORM_MOVE_RIGHT  142A
PLAYER_SCORE        19A0
PLAYER_X            1998
PLAYER_Y            199C
PLAY_EXPLOSION      1498
PLAY_GAME_START     14B6
PLAY_SCORE_EFFECT   147A
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        19A8
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         19AC
PLYR_POS_MOVEMENT   1
PLYR_VELOCITY       19A4
PLYR_W_INIT         8
POINTS              1
PURPLE              800080
RANDOM_Y_POS        12D6
RED                 FF
RESET_ENEMY_1       1212
RESET_ENEMY_2       1240
RESET_ENEMY_3       126E
RESET_ENEMY_4       129C
RESET_ENEMY_5       12CA
RESPAWN_BULLET      1306
S                   53
SCORE_INDEX         0
SCORE_LOAD          1468
SCORE_MSG           1946
SCORE_WAV           19FA
SCREEN_H            198E
SCREEN_W            198C
SHOOT               144A
SHOOT_BULLET        130E
SPACEBAR            20
SPEED               14
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              1384
UPDATE_BULLET       1194
UPDATE_ENEMYS       11AA
W                   57
WHITE               FFFFFF
