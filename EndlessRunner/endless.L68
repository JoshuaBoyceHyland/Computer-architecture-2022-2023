00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 19/03/2023 23:30:28

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 25/02/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  * BASICALLY CONSTANTS
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21  
00001000  =00000009                 22  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            23  
00001000                            24  *-----------------------------------------------------------
00001000                            25  * Section       : Charater Setup
00001000                            26  * Description   : Size of Player and Enemy and properties
00001000                            27  * of these characters e.g Starting Positions and Sizes
00001000                            28  *-----------------------------------------------------------
00001000  =00000008                 29  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 30  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            31  
00001000  =00000000                 32  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 33  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000  =00000001                 34  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            35  
00001000  =00000001                 36  PLYR_POS_MOVEMENT EQU   01          ; player movement
00001000  =00000001                 37  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 38  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            39  
00001000  =00000000                 40  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 41  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 42  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            43  
00001000  =0000000A                 44  ENMY_W_INIT EQU         10          ; Enemy initial Width
00001000  =0000000A                 45  ENMY_H_INIT EQU         10          ; Enemy initial Height
00001000  =00000002                 46  NUM_OF_ENEMYS    EQU    02          ; number of enemys 
00001000                            47  
00001000  =00000005                 48  BULLET_W    EQU         05          ; bullet width
00001000  =00000005                 49  BULLET_H    EQU         05          ; bullet height
00001000                            50  
00001000                            51  
00001000                            52  *-----------------------------------------------------------
00001000                            53  * Section       : Game Stats
00001000                            54  * Description   : Points
00001000                            55  *-----------------------------------------------------------
00001000  =00000001                 56  POINTS      EQU         01          ; Points added
00001000                            57  
00001000                            58  *-----------------------------------------------------------
00001000                            59  * Section       : Keyboard Keys
00001000                            60  * Description   : Spacebar and Escape or two functioning keys
00001000                            61  * Spacebar to JUMP and Escape to Exit Game
00001000                            62  *-----------------------------------------------------------
00001000  =00000020                 63  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 64  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000  =00000044                 65  D           EQU         $44         ; D ASCII Keycode
00001000  =00000057                 66  W           EQU         $57         ; W ASCII KeyCode
00001000  =00000041                 67  A           EQU         $41         ; A ASCII Keycode
00001000  =00000053                 68  S           EQU         $53         ; S ASCII Keycode   
00001000                            69  
00001000                            70  *-----------------------------------------------------------
00001000                            71  * Section       : Speed
00001000                            72  * Description   : movement speed 
00001000                            73  *-----------------------------------------------------------
00001000  =0000000A                 74  SPEED           EQU         10          ; speed for character
00001000  =00000014                 75  BULLET_SPEED    EQU         20          ; speed for bullet
00001000                            76  *-----------------------------------------------------------
00001000                            77  * Subroutine    : Initialise
00001000                            78  * Description   : Initialise game data into memory such as 
00001000                            79  * sounds and screen size
00001000                            80  *-----------------------------------------------------------
00001000                            81  INITIALISE:
00001000                            82      ; Initialise Sounds
00001000  6100 042A                 83      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 0444                 84      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 045E                 85      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            86  
0000100C                            87      ; Screen Size
0000100C  103C 0021                 88      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      89      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      90      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 000016E4             91      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      92      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 000016E2             93      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            94  
00001022                            95      ; Place the Player at the center of the screen
00001022  4281                      96      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  3239 000016E2             97      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102A  82FC 0002                 98      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102E  23C1 000016EE             99      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001034                           100  
00001034  4281                     101      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001036                           102      * MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001036                           103      * SUB.L    #50,        D1          ; divide by 2 for center on Y Axis
00001036  23FC 000001C2 000016F2   104      MOVE.L  #450,         PLAYER_Y    ; Players Y Position
00001040                           105  
00001040                           106      ; Initialise Player Score
00001040  4281                     107      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001042  7200                     108      MOVE.L  #00,        D1          ; Init Score
00001044  23C1 000016F6            109      MOVE.L  D1,         PLAYER_SCORE
0000104A                           110  
0000104A                           111      ; Initialise Player Velocity
0000104A  4281                     112      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104C  123C 0000                113      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001050  23C1 000016FA            114      MOVE.L  D1,         PLYR_VELOCITY
00001056                           115  
00001056                           116  
00001056                           117      ; Initialize Player on Ground
00001056  23FC 00000001 00001702   118      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001060                           119  
00001060                           120      ; Initial Position for Enemy
00001060                           121      * CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001060                           122      * MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001060                           123      * MOVE.L  #200,         ENEMY_X     ; Enemy X Position
00001060                           124  
00001060                           125      * CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001060                           126      * MOVE.W  SCREEN_H,   D1         ; Place Screen width in D1
00001060                           127      * DIVU    #02,        D1         ; divide by 2 for center on Y Axis
00001060                           128      * MOVE.L  #200,         ENEMY_Y     ; Enemy Y Position
00001060                           129     ; BRA INITIALISE_ENEMYS
00001060                           130  
00001060                           131      ; intitial pos for test bullet
00001060  4281                     132      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001062  323C 0064                133      MOVE.W  #100,   D1          ; Place Screen width in D1
00001066  23C1 0000171A            134      MOVE.L  D1,         BULLET_X     ; Enemy X Position
0000106C                           135  
0000106C  4281                     136      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000106E  323C 0064                137      MOVE.W  #100,   D1         ; Place Screen width in D1
00001072                           138      ;DIVU    #02,        D1         ; divide by 2 for center on Y Axis
00001072  23FC 00000064 0000171E   139      MOVE.L  #100,   BULLET_Y     ; Enemy Y Position
0000107C                           140  
0000107C                           141      ; initialisation of booleans for bullet been shot and enemy moving right
0000107C  4281                     142      CLR.L D1
0000107E  323C 0000                143      MOVE.W #0, D1
00001082  13C1 000016E6            144      MOVE.B D1, BEEN_SHOT
00001088  13C1 00001716            145      MOVE.B D1, ENEMY_MOVING_R ; makes false so is moving left to start
0000108E                           146  
0000108E                           147  
0000108E                           148      ; Enable the screen back buffer(see easy 68k help)
0000108E  103C 005C                149      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001092  123C 0011                150      MOVE.B  #17,        D1          ; Combine Tasks
00001096  4E4F                     151      TRAP    #15                     ; Trap (Perform action)
00001098                           152  
00001098                           153      ; Clear the screen (see easy 68k help)
00001098  103C 000B                154      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000109C  323C FF00                155      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010A0  4E4F                     156      TRAP    #15                     ; Trap (Perform action)
000010A2                           157  *-----------------------------------------------------------
000010A2                           158  * Subroutine    : initialise enemey positions
000010A2                           159  * Description   : sets up the positions for enemys 
000010A2                           160  *-----------------------------------------------------------
000010A2                           161  INITIALISE_ENEMYS:
000010A2  4281                     162      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010A4  323C 0064                163      MOVE.W  #100,   D1          ; Place Screen width in D1
000010A8  23C1 00001706            164      MOVE.L  D1,         ENEMY_1_X     ; Enemy X Position
000010AE  4281                     165      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010B0  323C 00C8                166      MOVE.W  #200,   D1          ; Place Screen width in D1
000010B4  23C1 0000170A            167      MOVE.L  D1,         ENEMY_1_Y     ; Enemy X Position
000010BA                           168  
000010BA  4281                     169      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010BC  323C 00C8                170      MOVE.W  #200,   D1          ; Place Screen width in D1
000010C0  23C1 0000170E            171      MOVE.L  D1,         ENEMY_2_X     ; Enemy X Position
000010C6  4281                     172      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C8  323C 00C8                173      MOVE.W  #200,   D1          ; Place Screen width in D1
000010CC  23C1 00001712            174      MOVE.L  D1,         ENEMY_2_Y     ; Enemy X Position
000010D2                           175  
000010D2                           176  
000010D2                           177  
000010D2                           178  
000010D2                           179  
000010D2                           180  
000010D2                           181  *-----------------------------------------------------------
000010D2                           182  * Subroutine    : Game
000010D2                           183  * Description   : Game including main GameLoop. GameLoop is like
000010D2                           184  * a while loop in that it runs forever until interupted
000010D2                           185  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010D2                           186  *-----------------------------------------------------------
000010D2                           187  GAME:
000010D2  6100 036A                188      BSR     PLAY_RUN                ; Play Run Wav
000010D6                           189  GAMELOOP:
000010D6                           190      ; Main Gameloop
000010D6  103C 0008                191      MOVE.B #8, D0                   ; D0 IS ONLY USED FOR COMMANDS, OUTPUST FROM THIS GOINTO OTHER DATA REGISTERS, THIS WILL BE STORED IN D1 
000010DA  4E4F                     192      TRAP #15     
000010DC  23C1 00001722            193      MOVE.L D1, DELTA_TIME                   ; TRAP 15 RUNS COMMAND 15   
000010E2  6100 0078                194      BSR     INPUT                   ; Check Keyboard Input
000010E6  6100 00C8                195      BSR     UPDATE                  ; Update positions and points
000010EA  6100 0020                196      BSR     UPDATE_BULLET
000010EE                           197      ;BSR     UPDATE_ENEMY
000010EE                           198      ;BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010EE  6100 0484                199      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010F2  6100 00D8                200      BSR     DRAW                    ; Draw the Scene
000010F6                           201      
000010F6                           202  
000010F6                           203  DELTA_t:
000010F6  103C 0008                204      MOVE.B #8, D0                   ;CURRENT TIME 
000010FA  4E4F                     205      TRAP #15  
000010FC  92B9 00001722            206      SUB.L DELTA_TIME, D1            ; TAKING AWAY DELTATIME FROM CURRENT TO CHECK REMAINDER, 
00001102                           207      
00001102  B2BC 00000004            208      CMP.L #4, D1
00001108  6BEC                     209      BMI.S DELTA_t                     ; if deltam time is lesser or equal to 17; branch lesser or equal to 
0000110A  60CA                     210      BRA GAMELOOP
0000110C                           211  
0000110C                           212  
0000110C                           213  UPDATE_BULLET:
0000110C  6100 0014                214      BSR CHECK_FOR_BULLET_RESPAWN
00001110  0C39 0000 000016E6       215      CMP.B #0, BEEN_SHOT
00001118  6700 0020                216      BEQ BULLET_TRACK_PLAYER ; if the bullet has not been shot will track player
0000111C  6000 0032                217      BRA SHOOT_BULLET
00001120  4E75                     218      RTS
00001122                           219  
00001122                           220  * UPDATE_ENEMY:
00001122                           221  *     CMP.B #0, ENEMY_MOVING_R
00001122                           222  *     BEQ MOVE_ENEMY_LEFT
00001122                           223  *     BRA MOVE_ENEMY_RIGHT
00001122                           224  *     RTS
00001122                           225  
00001122                           226  
00001122                           227  * MOVE_ENEMY_RIGHT:
00001122                           228  *     ADD.L #1, ENEMY_X
00001122                           229  *     RTS
00001122                           230  
00001122                           231  * MOVE_ENEMY_LEFT:
00001122                           232  *     SUB.L #1, ENEMY_X
00001122                           233  *     RTS
00001122                           234      
00001122                           235  
00001122                           236  CHECK_FOR_BULLET_RESPAWN:
00001122  0CB9 00000000 0000171E   237      CMP.L #0, BULLET_Y
0000112C  6D00 0004                238      BLT RESPAWN_BULLET
00001130  4E75                     239      RTS
00001132                           240  
00001132                           241  RESPAWN_BULLET:
00001132  53B9 000016E6            242      SUB.L #1, BEEN_SHOT
00001138  4E75                     243      RTS
0000113A                           244      
0000113A                           245  
0000113A                           246  BULLET_TRACK_PLAYER:
0000113A  23F9 000016EE 0000171A   247      MOVE.L PLAYER_X, BULLET_X
00001144  23F9 000016F2 0000171E   248      MOVE.L PLAYER_Y, BULLET_Y
0000114E  4E75                     249      RTS
00001150                           250  
00001150                           251  SHOOT_BULLET:
00001150  04B9 0000000A 0000171E   252      SUB.L #10, BULLET_Y
0000115A  4E75                     253      RTS
0000115C                           254  *-----------------------------------------------------------
0000115C                           255  * Subroutine    : Input
0000115C                           256  * Description   : Process Keyboard Input
0000115C                           257  *-----------------------------------------------------------
0000115C                           258  INPUT:
0000115C                           259      ; Process Input
0000115C  4281                     260      CLR.L   D1                      ; Clear Data Register
0000115E  103C 0013                261      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
00001162  223C 20415344            262      MOVE.L #$20415344,D1            ; ALL THE INPUTS PUT IN D1 WASD, IN ONE BYTE
00001168  4E4F                     263      TRAP   #15                      ; DEXCUTES ABOVE AND CHECKS IF ny have been pushed
0000116A                           264  
0000116A                           265     * CHECKS CORRESPONG NUMBERS ARE BEING PRESSED
0000116A  B2BC FFFF0000            266      CMP.L  #$FFFF0000, D1           ; SPACE
00001170  6700 029C                267      BEQ    SHOOT
00001174  6700 0284                268      BEQ    MOVE_LEFT
00001178                           269  
00001178  B2BC FF0000FF            270      CMP.L  #$FF0000FF, D1           ; SPACE
0000117E  6700 028E                271      BEQ    SHOOT
00001182  6700 0262                272      BEQ    MOVE_RIGHT
00001186                           273  
00001186  B2BC FF000000            274      CMP.L  #$FF000000, D1           ; SPACE
0000118C  6700 0280                275      BEQ    SHOOT
00001190                           276  
00001190  B2BC 00FF0000            277      CMP.L  #$00FF0000, D1           ; A
00001196  6700 0262                278      BEQ    MOVE_LEFT
0000119A                           279  
0000119A  B2BC 0000FF00            280      CMP.L  #$0000FF00, D1           ; S
000011A0  6700 0278                281      BEQ    MOVE_DOWN
000011A4                           282  
000011A4  B2BC 000000FF            283      CMP.L  #$000000FF, D1           ; D
000011AA  6700 023A                284      BEQ    MOVE_RIGHT
000011AE  4E75                     285      RTS                             ; Return to subroutine
000011B0                           286  
000011B0                           287  
000011B0                           288  
000011B0                           289  *-----------------------------------------------------------
000011B0                           290  * Subroutine    : Update
000011B0                           291  * Description   : Main update loop update Player and Enemies
000011B0                           292  *-----------------------------------------------------------
000011B0                           293  UPDATE:
000011B0                           294      ; Update the Players Positon based on Velocity and Gravity
000011B0  4281                     295      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011B2  2239 000016FA            296      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
000011B8  23C1 000016FA            297      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
000011BE  D2B9 000016F2            298      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
000011C4  23C1 000016F2            299      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
000011CA                           300  
000011CA                           301      ; Move the Enemy
000011CA                           302      ;CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011CA                           303      ;CLR.L   D1                      ; Clear the contents of D0
000011CA                           304     ; MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
000011CA                           305      ;CMP.L   #00,        D1
000011CA                           306      ;BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
000011CA                           307     ;BRA     MOVE_ENEMY              ; Move the Enemy
000011CA                           308  
000011CA  4E75                     309      RTS                             ; Return to subroutine  
000011CC                           310  
000011CC                           311  *-----------------------------------------------------------
000011CC                           312  * Subroutine    : Move Enemy
000011CC                           313  * Description   : Move Enemy Right to Left
000011CC                           314  *-----------------------------------------------------------
000011CC                           315  * MOVE_ENEMY:
000011CC                           316  *     SUB.L   #01,        ENEMY_X     ; Move enemy by X Value
000011CC                           317  *     RTS
000011CC                           318  
000011CC                           319  *-----------------------------------------------------------
000011CC                           320  * Subroutine    : Reset Enemy
000011CC                           321  * Description   : Reset Enemy if to passes 0 to Right of Screen
000011CC                           322  *-----------------------------------------------------------
000011CC                           323  * RESET_ENEMY_POSITION:
000011CC                           324  *     CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011CC                           325  *     MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000011CC                           326  *     MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000011CC                           327  *     RTS
000011CC                           328  
000011CC                           329  *-----------------------------------------------------------
000011CC                           330  * Subroutine    : Draw
000011CC                           331  * Description   : Draw Screen
000011CC                           332  *-----------------------------------------------------------
000011CC                           333  DRAW: 
000011CC                           334      ; Enable back buffer
000011CC  103C 005E                335      MOVE.B  #94,        D0
000011D0  4E4F                     336      TRAP    #15
000011D2                           337  
000011D2                           338      ; Clear the screen
000011D2  103C 000B                339      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011D6  323C FF00                340      MOVE.W  #$FF00,     D1          ; Clear contents
000011DA  4E4F                     341      TRAP    #15                     ; Trap (Perform action)
000011DC                           342  
000011DC  6100 0010                343      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000011E0  6100 02A4                344      BSR     DRAW_PLAYER             ; Draw Player
000011E4  6100 02D0                345      BSR     DRAW_ENEMYS             ; Draw Enemy
000011E8  6100 035A                346      BSR     DRAW_BULLET             ; draw bullet
000011EC  4E75                     347      RTS                             ; Return to subroutine
000011EE                           348  
000011EE                           349  *-----------------------------------------------------------
000011EE                           350  * Subroutine    : Draw Player Data
000011EE                           351  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000011EE                           352  *-----------------------------------------------------------
000011EE                           353  DRAW_PLYR_DATA:
000011EE  4281                     354      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011F0                           355  
000011F0                           356      ; Player Score Message
000011F0  103C 000B                357      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011F4  323C 0201                358      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000011F8  4E4F                     359      TRAP    #15                     ; Trap (Perform action)
000011FA  43F9 0000168A            360      LEA     SCORE_MSG,  A1          ; Score Message
00001200  303C 000D                361      MOVE    #13,        D0          ; No Line feed
00001204  4E4F                     362      TRAP    #15                     ; Trap (Perform action)
00001206                           363  
00001206                           364      ; Player Score Value
00001206  103C 000B                365      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000120A  323C 0901                366      MOVE.W  #$0901,     D1          ; Col 09, Row 01
0000120E  4E4F                     367      TRAP    #15                     ; Trap (Perform action)
00001210  103C 0003                368      MOVE.B  #03,        D0          ; Display number at D1.L
00001214  2239 000016F6            369      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
0000121A  4E4F                     370      TRAP    #15                     ; Trap (Perform action)
0000121C                           371      
0000121C                           372      ; Player X Message
0000121C  103C 000B                373      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001220  323C 0202                374      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00001224  4E4F                     375      TRAP    #15                     ; Trap (Perform action)
00001226  43F9 000016C4            376      LEA     X_MSG,      A1          ; X Message
0000122C  303C 000D                377      MOVE    #13,        D0          ; No Line feed
00001230  4E4F                     378      TRAP    #15                     ; Trap (Perform action)
00001232                           379      
00001232                           380      ; Player X
00001232  103C 000B                381      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00001236  323C 0502                382      MOVE.W  #$0502,     D1          ; Col 05, Row 02
0000123A  4E4F                     383      TRAP    #15                     ; Trap (Perform action)
0000123C  103C 0003                384      MOVE.B  #03,        D0          ; Display number at D1.L
00001240  2239 000016EE            385      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
00001246  4E4F                     386      TRAP    #15                     ; Trap (Perform action)
00001248                           387      
00001248                           388      ; Player Y Message
00001248  103C 000B                389      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000124C  323C 1002                390      MOVE.W  #$1002,     D1          ; Col 10, Row 02
00001250  4E4F                     391      TRAP    #15                     ; Trap (Perform action)
00001252  43F9 000016C7            392      LEA     Y_MSG,      A1          ; Y Message
00001258  303C 000D                393      MOVE    #13,        D0          ; No Line feed
0000125C  4E4F                     394      TRAP    #15                     ; Trap (Perform action)
0000125E                           395      
0000125E                           396      ; Player Y
0000125E  103C 000B                397      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001262  323C 1202                398      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00001266  4E4F                     399      TRAP    #15                     ; Trap (Perform action)
00001268  103C 0003                400      MOVE.B  #03,        D0          ; Display number at D1.L
0000126C  2239 000016F2            401      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
00001272  4E4F                     402      TRAP    #15                     ; Trap (Perform action) 
00001274                           403  
00001274                           404      ; Player Velocity Message
00001274  103C 000B                405      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001278  323C 0203                406      MOVE.W  #$0203,     D1          ; Col 02, Row 03
0000127C  4E4F                     407      TRAP    #15                     ; Trap (Perform action)
0000127E  43F9 000016CA            408      LEA     V_MSG,      A1          ; Velocity Message
00001284  303C 000D                409      MOVE    #13,        D0          ; No Line feed
00001288  4E4F                     410      TRAP    #15                     ; Trap (Perform action)
0000128A                           411      
0000128A                           412      ; Player Velocity
0000128A  103C 000B                413      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000128E  323C 0503                414      MOVE.W  #$0503,     D1          ; Col 05, Row 03
00001292  4E4F                     415      TRAP    #15                     ; Trap (Perform action)
00001294  103C 0003                416      MOVE.B  #03,        D0          ; Display number at D1.L
00001298  2239 000016FA            417      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
0000129E  4E4F                     418      TRAP    #15                     ; Trap (Perform action)
000012A0                           419      
000012A0                           420      ; Player Gravity Message
000012A0  103C 000B                421      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012A4  323C 1003                422      MOVE.W  #$1003,     D1          ; Col 10, Row 03
000012A8  4E4F                     423      TRAP    #15                     ; Trap (Perform action)
000012AA  43F9 000016CD            424      LEA     G_MSG,      A1          ; G Message
000012B0  303C 000D                425      MOVE    #13,        D0          ; No Line feed
000012B4  4E4F                     426      TRAP    #15                     ; Trap (Perform action)
000012B6                           427      
000012B6                           428      ; Player Gravity
000012B6  103C 000B                429      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012BA  323C 1203                430      MOVE.W  #$1203,     D1          ; Col 12, Row 03
000012BE  4E4F                     431      TRAP    #15                     ; Trap (Perform action)
000012C0  103C 0003                432      MOVE.B  #03,        D0          ; Display number at D1.L
000012C4  2239 000016FE            433      MOVE.L  PLYR_GRAVITY,D1         ; Move Gravity to D1.L
000012CA  4E4F                     434      TRAP    #15                     ; Trap (Perform action)
000012CC                           435  
000012CC                           436      ; Player On Ground Message
000012CC  103C 000B                437      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012D0  323C 0204                438      MOVE.W  #$0204,     D1          ; Col 10, Row 03
000012D4  4E4F                     439      TRAP    #15                     ; Trap (Perform action)
000012D6  43F9 000016D0            440      LEA     GND_MSG,    A1          ; On Ground Message
000012DC  303C 000D                441      MOVE    #13,        D0          ; No Line feed
000012E0  4E4F                     442      TRAP    #15                     ; Trap (Perform action)
000012E2                           443      
000012E2                           444      ; Player On Ground
000012E2  103C 000B                445      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012E6  323C 0604                446      MOVE.W  #$0604,     D1          ; Col 06, Row 04
000012EA  4E4F                     447      TRAP    #15                     ; Trap (Perform action)
000012EC  103C 0003                448      MOVE.B  #03,        D0          ; Display number at D1.L
000012F0  2239 00001702            449      MOVE.L  PLYR_ON_GND,D1          ; Move Play on Ground ? to D1.L
000012F6  4E4F                     450      TRAP    #15                     ; Trap (Perform action)
000012F8                           451  
000012F8                           452      ; Show Keys Pressed
000012F8  103C 000B                453      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012FC  323C 2001                454      MOVE.W  #$2001,     D1          ; Col 20, Row 1
00001300  4E4F                     455      TRAP    #15                     ; Trap (Perform action)
00001302  43F9 00001693            456      LEA     KEYCODE_MSG, A1         ; Keycode
00001308  303C 000D                457      MOVE    #13,        D0          ; No Line feed
0000130C  4E4F                     458      TRAP    #15                     ; Trap (Perform action)
0000130E                           459  
0000130E                           460      ; Show KeyCode
0000130E  103C 000B                461      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001312  323C 3001                462      MOVE.W  #$3001,     D1          ; Col 30, Row 1
00001316  4E4F                     463      TRAP    #15                     ; Trap (Perform action)    
00001318  2239 000016EA            464      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
0000131E  103C 0003                465      MOVE.B  #03,        D0          ; Display the contents of D1
00001322  4E4F                     466      TRAP    #15                     ; Trap (Perform action)
00001324                           467  
00001324                           468      ; Show if Update is Running
00001324  103C 000B                469      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001328  323C 0205                470      MOVE.W  #$0205,     D1          ; Col 02, Row 05
0000132C  4E4F                     471      TRAP    #15                     ; Trap (Perform action)
0000132E  43F9 000016B0            472      LEA     UPDATE_MSG, A1          ; Update
00001334  303C 000D                473      MOVE    #13,        D0          ; No Line feed
00001338  4E4F                     474      TRAP    #15                     ; Trap (Perform action)
0000133A                           475  
0000133A                           476      ; Show if Draw is Running
0000133A  103C 000B                477      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000133E  323C 0206                478      MOVE.W  #$0206,     D1          ; Col 02, Row 06
00001342  4E4F                     479      TRAP    #15                     ; Trap (Perform action)
00001344  43F9 000016BB            480      LEA     DRAW_MSG,   A1          ; Draw
0000134A  303C 000D                481      MOVE    #13,        D0          ; No Line feed
0000134E  4E4F                     482      TRAP    #15                     ; Trap (Perform action)
00001350                           483  
00001350                           484      ; Show if Idle is Running
00001350  103C 000B                485      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001354  323C 0207                486      MOVE.W  #$0207,     D1          ; Col 02, Row 07
00001358  4E4F                     487      TRAP    #15                     ; Trap (Perform action)
0000135A  43F9 000016A7            488      LEA     IDLE_MSG,   A1          ; Move Idle Message to A1
00001360  303C 000D                489      MOVE    #13,        D0          ; No Line feed
00001364  4E4F                     490      TRAP    #15                     ; Trap (Perform action)
00001366                           491  
00001366  4E75                     492      RTS  
00001368                           493      
00001368                           494  *-----------------------------------------------------------
00001368                           495  * Subroutine    : Player is on Ground
00001368                           496  * Description   : Check if the Player is on or off Ground
00001368                           497  *-----------------------------------------------------------
00001368                           498  IS_PLAYER_ON_GND:
00001368                           499      ; Check if Player is on Ground
00001368  4281                     500      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000136A  4282                     501      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
0000136C  3239 000016E4            502      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001372  82FC 0002                503      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001376  2439 000016F2            504      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
0000137C  B441                     505      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
0000137E  6C00 0008                506      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001382  6D00 002C                507      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00001386  4E75                     508      RTS                             ; Return to subroutine
00001388                           509  
00001388                           510  
00001388                           511  *-----------------------------------------------------------
00001388                           512  * Subroutine    : On Ground
00001388                           513  * Description   : Set the Player On Ground
00001388                           514  *-----------------------------------------------------------
00001388                           515  SET_ON_GROUND:
00001388  4281                     516      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000138A  3239 000016E4            517      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001390  82FC 0002                518      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001394  23C1 000016F2            519      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
0000139A  4281                     520      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000139C  7200                     521      MOVE.L  #00,        D1          ; Player Velocity
0000139E  23C1 000016FA            522      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
000013A4  23FC 00000001 00001702   523      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
000013AE  4E75                     524      RTS
000013B0                           525  
000013B0                           526  *-----------------------------------------------------------
000013B0                           527  * Subroutine    : Off Ground
000013B0                           528  * Description   : Set the Player Off Ground
000013B0                           529  *-----------------------------------------------------------
000013B0                           530  SET_OFF_GROUND:
000013B0  23FC 00000000 00001702   531      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
000013BA  4E75                     532      RTS                             ; Return to subroutine
000013BC                           533  *-----------------------------------------------------------
000013BC                           534  * Subroutine    : Jump
000013BC                           535  * Description   : Perform a Jump
000013BC                           536  *-----------------------------------------------------------
000013BC                           537  JUMP:
000013BC  0CB9 00000001 00001702   538      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000013C6  6700 0006                539      BEQ     PERFORM_JUMP            ; Do Jump
000013CA  6000 0012                540      BRA     JUMP_DONE               ;
000013CE                           541  PERFORM_JUMP:
000013CE  6100 008C                542      BSR     PLAY_JUMP               ; Play jump sound
000013D2  23FC FFFFFFEC 000016FA   543      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000013DC  4E75                     544      RTS                             ; Return to subroutine
000013DE                           545  JUMP_DONE:
000013DE  4E75                     546      RTS                             ; Return to subroutine
000013E0                           547  
000013E0                           548  *-----------------------------------------------------------
000013E0                           549  * Subroutine    : Idle
000013E0                           550  * Description   : Perform a Idle
000013E0                           551  *----------------------------------------------------------- 
000013E0                           552  IDLE:
000013E0  6100 005C                553      BSR     PLAY_RUN                ; Play Run Wav
000013E4  4E75                     554      RTS                             ; Return to subroutine
000013E6                           555  
000013E6                           556  
000013E6                           557  *-----------------------------------------------------------
000013E6                           558  * Subroutine    : MOVE_RIGHT
000013E6                           559  * Description   : Perform a move right
000013E6                           560  *-----------------------------------------------------------
000013E6                           561  MOVE_RIGHT:
000013E6  6700 0006                562      BEQ     PERFORM_MOVE_RIGHT  ; do actual move ment to right
000013EA  6000 003E                563      BRA     MOVEMENT_DONE       ; return back 
000013EE                           564  PERFORM_MOVE_RIGHT:
000013EE  06B9 0000000A 000016EE   565      ADD.L   #SPEED, PLAYER_X       ; adds movement to the position
000013F8  4E75                     566      RTS
000013FA                           567  
000013FA                           568  
000013FA                           569  
000013FA                           570  *-----------------------------------------------------------
000013FA                           571  * Subroutine    : MOVE_LEFT
000013FA                           572  * Description   : Perform a move left
000013FA                           573  *-----------------------------------------------------------
000013FA                           574  * MOVE_LEFT_SHOOT:
000013FA                           575  *     ADD.L #01, BEEN_SHOT  ; do actual movement left
000013FA                           576  *     BEQ     PERFORM_MOVE_LEFT   ; do actual movement left
000013FA                           577  *     BRA     MOVEMENT_DONE      ; RETURN BACK
000013FA                           578  MOVE_LEFT:
000013FA  6700 0006                579      BEQ     PERFORM_MOVE_LEFT   ; do actual movement left
000013FE  6000 002A                580      BRA     MOVEMENT_DONE      ; RETURN BACK
00001402                           581  
00001402                           582  PERFORM_MOVE_LEFT:  
00001402  04B9 0000000A 000016EE   583      SUB.L #SPEED, PLAYER_X         ; takes away movement from position
0000140C  4E75                     584      RTS
0000140E                           585  
0000140E                           586  *-----------------------------------------------------------
0000140E                           587  * Subroutine    : MOVE_UP
0000140E                           588  * Description   : Perform a move up
0000140E                           589  *-----------------------------------------------------------
0000140E                           590  SHOOT:
0000140E  52B9 000016E6            591      ADD.L #01, BEEN_SHOT  ; do actual movement left
00001414  6000 0014                592      BRA     MOVEMENT_DONE      ; RETURN BACK
00001418  4E75                     593      RTS
0000141A                           594  
0000141A                           595  
0000141A                           596  *-----------------------------------------------------------
0000141A                           597  * Subroutine    : MOVE_DOWN
0000141A                           598  * Description   : Perform a move down
0000141A                           599  *-----------------------------------------------------------
0000141A                           600  MOVE_DOWN:
0000141A  6700 0008                601      BEQ     PERFORM_MOVE_DOWN   ; do actual movement down
0000141E  6000 000A                602      BRA     MOVEMENT_DONE     ; RETURN BACK
00001422  4E75                     603      RTS
00001424                           604  
00001424                           605  PERFORM_MOVE_DOWN:  
00001424  52B9 000016F2            606      ADD.L #01, PLAYER_Y         ; takes away movement from position
0000142A                           607  
0000142A                           608  MOVEMENT_DONE:
0000142A  4E75                     609      RTS
0000142C                           610  
0000142C                           611  
0000142C                           612  
0000142C                           613  
0000142C                           614  *-----------------------------------------------------------
0000142C                           615  * Subroutines   : Sound Load and Play
0000142C                           616  * Description   : Initialise game sounds into memory 
0000142C                           617  * Current Sounds are RUN, JUMP and Opps for Collision
0000142C                           618  *-----------------------------------------------------------
0000142C                           619  RUN_LOAD:
0000142C  43F9 0000172F            620      LEA     RUN_WAV,    A1          ; Load Wav File into A1
00001432  323C 0000                621      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
00001436  303C 0047                622      MOVE    #71,        D0          ; Load into memory
0000143A  4E4F                     623      TRAP    #15                     ; Trap (Perform action)
0000143C  4E75                     624      RTS                             ; Return to subroutine
0000143E                           625  
0000143E                           626  PLAY_RUN:
0000143E  323C 0000                627      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
00001442  303C 0048                628      MOVE    #72,        D0          ; Play Sound
00001446  4E4F                     629      TRAP    #15                     ; Trap (Perform action)
00001448  4E75                     630      RTS                             ; Return to subroutine
0000144A                           631  
0000144A                           632  JUMP_LOAD:
0000144A  43F9 00001726            633      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
00001450  323C 0001                634      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
00001454  303C 0047                635      MOVE    #71,        D0          ; Load into memory
00001458  4E4F                     636      TRAP    #15                     ; Trap (Perform action)
0000145A  4E75                     637      RTS                             ; Return to subroutine
0000145C                           638  
0000145C                           639  PLAY_JUMP:
0000145C  323C 0001                640      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
00001460  303C 0048                641      MOVE    #72,        D0          ; Play Sound
00001464  4E4F                     642      TRAP    #15                     ; Trap (Perform action)
00001466  4E75                     643      RTS                             ; Return to subroutine
00001468                           644  
00001468                           645  OPPS_LOAD:
00001468  43F9 00001737            646      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
0000146E  323C 0002                647      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
00001472  303C 0047                648      MOVE    #71,        D0          ; Load into memory
00001476  4E4F                     649      TRAP    #15                     ; Trap (Perform action)
00001478  4E75                     650      RTS                             ; Return to subroutine
0000147A                           651  
0000147A                           652  PLAY_OPPS:
0000147A  323C 0002                653      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
0000147E  303C 0048                654      MOVE    #72,        D0          ; Play Sound
00001482  4E4F                     655      TRAP    #15                     ; Trap (Perform action)
00001484  4E75                     656      RTS                             ; Return to subroutine
00001486                           657  
00001486                           658  *-----------------------------------------------------------
00001486                           659  * Subroutine    : Draw Player
00001486                           660  * Description   : Draw Player Square
00001486                           661  *-----------------------------------------------------------
00001486                           662  DRAW_PLAYER:
00001486                           663      ; Set Pixel Colors
00001486  223C 00FFFFFF            664      MOVE.L  #WHITE,     D1          ; Set Background color
0000148C  103C 0050                665      MOVE.B  #80,        D0          ; Task for Background Color
00001490  4E4F                     666      TRAP    #15                     ; Trap (Perform action)
00001492                           667  
00001492                           668      ; Set X, Y, Width and Height
00001492  2239 000016EE            669      MOVE.L  PLAYER_X,   D1          ; X
00001498  2439 000016F2            670      MOVE.L  PLAYER_Y,   D2          ; Y
0000149E  2639 000016EE            671      MOVE.L  PLAYER_X,   D3
000014A4  5083                     672      ADD.L   #PLYR_W_INIT,   D3      ; Width
000014A6  2839 000016F2            673      MOVE.L  PLAYER_Y,   D4 
000014AC  5084                     674      ADD.L   #PLYR_H_INIT,   D4      ; Height
000014AE                           675      
000014AE                           676      ; Draw Player
000014AE  103C 0057                677      MOVE.B  #87,        D0          ; Draw Player
000014B2  4E4F                     678      TRAP    #15                     ; Trap (Perform action)
000014B4  4E75                     679      RTS                             ; Return to subroutine
000014B6                           680  
000014B6                           681  *-----------------------------------------------------------
000014B6                           682  * Subroutine    : Draw Enemy
000014B6                           683  * Description   : Draw Enemy Square
000014B6                           684  *-----------------------------------------------------------
000014B6                           685  DRAW_ENEMYS:
000014B6                           686      ; Set Pixel Colors
000014B6  223C 000000FF            687      MOVE.L  #RED,       D1          ; Set Background color
000014BC  103C 0050                688      MOVE.B  #80,        D0          ; Task for Background Color
000014C0  4E4F                     689      TRAP    #15                     ; Trap (Perform action)
000014C2                           690  
000014C2  4240                     691      CLR D0
000014C4  4241                     692      CLR D1
000014C6  4242                     693      CLR D2  
000014C8  4243                     694      CLR D3
000014CA  4244                     695      CLR D4
000014CC  4245                     696      CLR D5
000014CE                           697  
000014CE                           698  DRAW_ENEMY_1:
000014CE  2239 00001706            699      MOVE.L  ENEMY_1_X,      D1       ; X   
000014D4  2439 0000170A            700      MOVE.L  ENEMY_1_Y,      D2       ; Y
000014DA                           701  
000014DA                           702      * Width and Height *
000014DA  2639 00001706            703      MOVE.L  ENEMY_1_X,      D3
000014E0  0683 0000000A            704      ADD.L   #ENMY_W_INIT,   D3      ; Width
000014E6  2839 0000170A            705      MOVE.L  ENEMY_1_Y,      D4 
000014EC  0684 0000000A            706      ADD.L   #ENMY_H_INIT,   D4      ; Height
000014F2                           707      
000014F2                           708      ; Draw Enemy    
000014F2  103C 0057                709      MOVE.B  #87,            D0          ; Draw Enemy
000014F6  4E4F                     710      TRAP    #15                     ; Trap (Perform action)
000014F8                           711  
000014F8                           712  DRAW_ENEMY_2:
000014F8  2239 0000170E            713      MOVE.L  ENEMY_2_X,      D1       ; X   
000014FE  2439 00001712            714      MOVE.L  ENEMY_2_Y,      D2       ; Y
00001504                           715  
00001504                           716      * Width and Height *
00001504  2639 0000170E            717      MOVE.L  ENEMY_2_X,      D3
0000150A  0683 0000000A            718      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001510  2839 00001712            719      MOVE.L  ENEMY_2_Y,      D4 
00001516  0684 0000000A            720      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000151C                           721      
0000151C                           722      ; Draw Enemy    
0000151C  103C 0057                723      MOVE.B  #87,        D0          ; Draw Enemy
00001520  4E4F                     724      TRAP    #15                     ; Trap (Perform action)
00001522                           725  
00001522  4E75                     726      RTS
00001524                           727  
00001524                           728  DRAW_ENEMY_LOOP:
00001524                           729      * X and Y *
00001524  2210                     730      MOVE.L  (A0),    D1       ; X   
00001526  2411                     731      MOVE.L  (A1),    D2       ; Y
00001528                           732  
00001528                           733      * Width and Height *
00001528  2618                     734      MOVE.L  (A0)+,    D3
0000152A  0683 0000000A            735      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001530  2819                     736      MOVE.L  (A1)+,    D4 
00001532  0684 0000000A            737      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001538                           738      
00001538                           739      ; Draw Enemy    
00001538  103C 0057                740      MOVE.B  #87,        D0          ; Draw Enemy
0000153C  4E4F                     741      TRAP    #15                     ; Trap (Perform action)
0000153E                           742  
0000153E  51CD FFE4                743      DBRA D5, DRAW_ENEMY_LOOP
00001542                           744  
00001542  4E75                     745      RTS  
00001544                           746  
00001544                           747  *-----------------------------------------------------------
00001544                           748  * Subroutine    : Draw bullet
00001544                           749  * Description   : Draw Enemy bullet
00001544                           750  *-----------------------------------------------------------
00001544                           751  DRAW_BULLET:
00001544                           752  ; Set Pixel Colors
00001544  223C 00FFFF00            753      MOVE.L  #AQUA,       D1          ; Set Background color
0000154A  103C 0050                754      MOVE.B  #80,        D0          ; Task for Background Color
0000154E  4E4F                     755      TRAP    #15                     ; Trap (Perform action)
00001550                           756  
00001550                           757      ; Set X, Y, Width and Height
00001550  2239 0000171A            758      MOVE.L  BULLET_X,    D1          ; X
00001556  2439 0000171E            759      MOVE.L  BULLET_Y,    D2          ; Y
0000155C  2639 0000171A            760      MOVE.L  BULLET_X,    D3
00001562  5A83                     761      ADD.L   #BULLET_W,   D3      ; Width
00001564  2839 0000171E            762      MOVE.L  BULLET_Y,    D4 
0000156A  5A84                     763      ADD.L   #BULLET_H,   D4      ; Height
0000156C                           764      
0000156C                           765      ; Draw Enemy    
0000156C  103C 0057                766      MOVE.B  #87,        D0          ; Draw Enemy
00001570  4E4F                     767      TRAP    #15                     ; Trap (Perform action)
00001572  4E75                     768      RTS                             ; Return to subroutine
00001574                           769  
00001574                           770  
00001574                           771  
00001574                           772  
00001574                           773  
00001574                           774  *-----------------------------------------------------------
00001574                           775  * Subroutine    : Collision Check
00001574                           776  * Description   : Axis-Aligned Bounding Box Collision Detection
00001574                           777  * Algorithm checks for overlap on the 4 sides of the Player and 
00001574                           778  * Enemy rectangles
00001574                           779  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001574                           780  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001574                           781  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001574                           782  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001574                           783  *-----------------------------------------------------------
00001574                           784  CHECK_COLLISIONS:
00001574                           785  
00001574  6100 0008                786      BSR CHECK_BULLET_Y_GREATER_ENEMY_1_Y
00001578  6100 0072                787      BSR CHECK_BULLET_Y_GREATER_ENEMY_2_Y
0000157C                           788  
0000157C  4E75                     789      RTS
0000157E                           790  
0000157E                           791  CHECK_BULLET_Y_GREATER_ENEMY_1_Y:    
0000157E  4281                     792      CLR.L   D1
00001580  4282                     793      CLR.L   D2
00001582  2239 0000171E            794       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
00001588  2439 0000170A            795       MOVE.L  ENEMY_1_y,    D2          ; Move Enemy Y to D2
0000158E                           796  
0000158E  B481                     797       CMP.L   D1,         D2          ; Do they Overlap ?
00001590  6C00 0006                798       BGE     CHECK_BULLET_X_LESSER_1_WIDTH  ; Less than or Equal
00001594  6000 00C4                799       BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001598                           800  
00001598                           801  CHECK_BULLET_X_LESSER_1_WIDTH:     ; Check player is not  
00001598  4281                     802      CLR.L   D1
0000159A  4282                     803      CLR.L   D2
0000159C  2239 0000171A            804      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
000015A2  2439 00001706            805      MOVE.L  ENEMY_1_X,           D2          ; Move Enemy X to D2
000015A8  D4B8 000A                806      ADD.L   ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
000015AC  B481                     807      CMP.L   D1,             D2          ; Do they OverLap ?
000015AE  6F00 0006                808      BLE     CHECK_BULLET_X_GREATER_ENEMY_1_X ; Less than or Equal
000015B2  6000 00A6                809      BRA     COLLISION_CHECK_DONE    ; If not no collision   
000015B6                           810  
000015B6                           811  CHECK_BULLET_X_GREATER_ENEMY_1_X:
000015B6  4281                     812      CLR.L   D1
000015B8  4282                     813      CLR.L   D2
000015BA  2239 0000171A            814      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
000015C0  2439 00001706            815      MOVE.L  ENEMY_1_X,    D2          ; Move Enemy X to D2
000015C6  B481                     816      CMP.L   D1,         D2          ;   Do the Overlap ?
000015C8  6C00 0006                817      BGE     COLLISION_1 ; greater than or equal ?
000015CC  6000 008C                818      BRA     COLLISION_CHECK_DONE    ; If not no collision
000015D0                           819  COLLISION_1:
000015D0  6100 FEA8                820      BSR     PLAY_OPPS               ; Play Opps Wav
000015D4  23FC 00000000 000016F6   821      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
000015DE  04B9 0000000A 00001706   822      SUB.L  #10, ENEMY_1_X
000015E8  6000 0070                823      BRA     COLLISION_CHECK_DONE
000015EC                           824  
000015EC                           825  CHECK_BULLET_Y_GREATER_ENEMY_2_Y:    
000015EC  4281                     826      CLR.L   D1
000015EE  4282                     827      CLR.L   D2
000015F0  2239 0000171E            828       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
000015F6  2439 00001712            829       MOVE.L  ENEMY_2_y,    D2          ; Move Enemy Y to D2
000015FC                           830  
000015FC  B481                     831       CMP.L   D1,         D2          ; Do they Overlap ?
000015FE  6C00 0006                832       BGE     CHECK_BULLET_X_LESSER_2_WIDTH  ; Less than or Equal
00001602  6000 0056                833       BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001606                           834  
00001606                           835  CHECK_BULLET_X_LESSER_2_WIDTH:     ; Check player is not  
00001606  4281                     836      CLR.L   D1
00001608  4282                     837      CLR.L   D2
0000160A  2239 0000171A            838      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
00001610  2439 0000170E            839      MOVE.L  ENEMY_2_X,           D2          ; Move Enemy X to D2
00001616  D4B8 000A                840      ADD.L   ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
0000161A  B481                     841      CMP.L   D1,             D2          ; Do they OverLap ?
0000161C  6F00 0006                842      BLE     CHECK_BULLET_X_GREATER_ENEMY_2_X ; Less than or Equal
00001620  6000 0038                843      BRA     COLLISION_CHECK_DONE    ; If not no collision   
00001624                           844  
00001624                           845  CHECK_BULLET_X_GREATER_ENEMY_2_X:
00001624  4281                     846      CLR.L   D1
00001626  4282                     847      CLR.L   D2
00001628  2239 0000171A            848      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
0000162E  2439 0000170E            849      MOVE.L  ENEMY_2_X,    D2          ; Move Enemy X to D2
00001634  B481                     850      CMP.L   D1,         D2          ;   Do the Overlap ?
00001636  6C00 0006                851      BGE     COLLISION_2 ; greater than or equal ?
0000163A  6000 001E                852      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000163E                           853  
0000163E                           854  COLLISION_2:
0000163E  6100 FE3A                855      BSR     PLAY_OPPS               ; Play Opps Wav
00001642  23FC 00000000 000016F6   856      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
0000164C  04B9 0000000A 0000170E   857      SUB.L  #10, ENEMY_2_X
00001656  6000 0002                858      BRA     COLLISION_CHECK_DONE
0000165A                           859  COLLISION_CHECK_DONE:               ; No Collision Update points
0000165A                           860  
0000165A                           861  
0000165A  5281                     862      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
0000165C  D2B9 000016F6            863      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001662  23C1 000016F6            864      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001668                           865  
00001668  4E75                     866      RTS                             ; Return to subroutine
0000166A                           867  
0000166A                           868  
0000166A                           869  
0000166A                           870  * PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
0000166A                           871  *      ADD.L   #Bullet_H,D1          ; Add Player Height to D1
0000166A                           872  *      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
0000166A                           873  *      CMP.L   D1,         D2          ; Do they OverLap ?
0000166A                           874  *      BGE     COLLISION               ; Collision !
0000166A                           875  *      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000166A                           876  
0000166A                           877  
0000166A                           878  
0000166A                           879  *-----------------------------------------------------------
0000166A                           880  * Subroutine    : EXIT
0000166A                           881  * Description   : Exit message and End Game
0000166A                           882  *-----------------------------------------------------------
0000166A                           883  EXIT:
0000166A                           884      ; Show if Exiting is Running
0000166A  103C 000B                885      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000166E  323C 4004                886      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001672  4E4F                     887      TRAP    #15                     ; Trap (Perform action)
00001674  43F9 000016D5            888      LEA     EXIT_MSG,   A1          ; Exit
0000167A  303C 000D                889      MOVE    #13,        D0          ; No Line feed
0000167E  4E4F                     890      TRAP    #15                     ; Trap (Perform action)
00001680  103C 0009                891      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001684  4E4F                     892      TRAP    #15                     ; Trap (Perform action)
00001686  FFFF FFFF                893      SIMHALT
0000168A                           894  
0000168A                           895  *-----------------------------------------------------------
0000168A                           896  * Section       : Messages
0000168A                           897  * Description   : Messages to Print on Console, names should be
0000168A                           898  * self documenting
0000168A                           899  *-----------------------------------------------------------
0000168A                           900  
0000168A                           901  * BASICALLY VARIABLES DECALRED AT BTTOM 
0000168A                           902  * dc.b is text
0000168A                           903  * ds.b is number 
0000168A                           904  * becarefull how you store l/b, long/byte
0000168A= 53 63 6F 72 65 20 ...    905  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001693= 4B 65 79 43 6F 64 ...    906  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
0000169E= 4A 75 6D 70 2E 2E ...    907  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
000016A7                           908  
000016A7= 49 64 6C 65 2E 2E ...    909  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
000016B0= 55 70 64 61 74 65 ...    910  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
000016BB= 44 72 61 77 2E 2E ...    911  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
000016C4                           912  
000016C4= 58 3A 00                 913  X_MSG           DC.B    'X:', 0             ; X Position Message
000016C7= 59 3A 00                 914  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
000016CA= 56 3A 00                 915  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
000016CD= 47 3A 00                 916  G_MSG           DC.B    'G:', 0             ; Gravity Position Message
000016D0= 47 4E 44 3A 00           917  GND_MSG         DC.B    'GND:', 0           ; On Ground Position Message
000016D5                           918  
000016D5= 45 78 69 74 69 6E ...    919  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
000016E1                           920  
000016E1                           921  *-----------------------------------------------------------
000016E1                           922  * Section       : Graphic Colors
000016E1                           923  * Description   : Screen Pixel Color
000016E1                           924  *-----------------------------------------------------------
000016E1  =00FFFFFF                925  WHITE           EQU     $00FFFFFF
000016E1  =000000FF                926  RED             EQU     $000000FF
000016E1  =00FFFF00                927  AQUA            EQU     $00FFFF00
000016E1                           928  
000016E1                           929  
000016E1                           930  *-----------------------------------------------------------
000016E1                           931  * Section       : Screen Size
000016E1                           932  * Description   : Screen Width and Height
000016E1                           933  *-----------------------------------------------------------
000016E2                           934  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000016E4                           935  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000016E6                           936  
000016E6                           937  *-----------------------------------------------------------
000016E6                           938  * Section       : Bullet status
000016E6                           939  * Description   : whether bullet has been shot or not
000016E6                           940  * 0 = false
000016E6                           941  * 1 = true
000016E6                           942  *-----------------------------------------------------------
000016E6                           943  BEEN_SHOT       DS.L    01      ; reserve of space
000016EA                           944  *-----------------------------------------------------------
000016EA                           945  * Section       : Keyboard Input
000016EA                           946  * Description   : Used for storing Keypresses
000016EA                           947  *-----------------------------------------------------------
000016EA                           948  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000016EE                           949  
000016EE                           950  *-----------------------------------------------------------
000016EE                           951  * Section       : Character Positions
000016EE                           952  * Description   : Player and Enemy Position Memory Locations
000016EE                           953  *-----------------------------------------------------------
000016EE                           954  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000016F2                           955  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000016F6                           956  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000016FA                           957  
000016FA                           958  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000016FE                           959  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00001702                           960  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00001706                           961  
00001706                           962  ENEMY_1_X         DS.L    01 ; Reserve Space for Enemy X Position
0000170A                           963  ENEMY_1_Y         DS.L    01  ; Reserve Space for Enemy Y Position
0000170E                           964  
0000170E                           965  ENEMY_2_X         DS.L    01
00001712                           966  ENEMY_2_Y         DS.l    01
00001716                           967  ENEMY_MOVING_R        DS.L    01  ; RES SPACE FOR MOVING RIGHT BOOLEAN
0000171A                           968  
0000171A                           969  BULLET_X        DS.L    01   ; space for bullet x pos    
0000171E                           970  BULLET_Y        DS.L    01   ; space for bullet y pos
00001722                           971  
00001722                           972  *-----------------------------------------------------------
00001722                           973  * Section       : TIme
00001722                           974  * Description   : Sound files, which are then loaded and given
00001722                           975  * an address in memory, they take a longtime to process and play
00001722                           976  * so keep the files small. Used https://voicemaker.in/ to 
00001722                           977  * generate and Audacity to convert MP3 to WAV
00001722                           978  *-----------------------------------------------------------
00001722                           979  DELTA_TIME      DS.L   01 ; empty 
00001726                           980  
00001726                           981  *-----------------------------------------------------------
00001726                           982  * Section       : Sounds
00001726                           983  * Description   : Sound files, which are then loaded and given
00001726                           984  * an address in memory, they take a longtime to process and play
00001726                           985  * so keep the files small. Used https://voicemaker.in/ to 
00001726                           986  * generate and Audacity to convert MP3 to WAV
00001726                           987  *-----------------------------------------------------------
00001726= 6A 75 6D 70 2E 77 ...    988  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
0000172F= 72 75 6E 2E 77 61 ...    989  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
00001737= 6F 70 70 73 2E 77 ...    990  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001740                           991  
00001740                           992      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
AQUA                FFFF00
BEEN_SHOT           16E6
BULLET_H            5
BULLET_SPEED        14
BULLET_TRACK_PLAYER  113A
BULLET_W            5
BULLET_X            171A
BULLET_Y            171E
CHECK_BULLET_X_GREATER_ENEMY_1_X  15B6
CHECK_BULLET_X_GREATER_ENEMY_2_X  1624
CHECK_BULLET_X_LESSER_1_WIDTH  1598
CHECK_BULLET_X_LESSER_2_WIDTH  1606
CHECK_BULLET_Y_GREATER_ENEMY_1_Y  157E
CHECK_BULLET_Y_GREATER_ENEMY_2_Y  15EC
CHECK_COLLISIONS    1574
CHECK_FOR_BULLET_RESPAWN  1122
COLLISION_1         15D0
COLLISION_2         163E
COLLISION_CHECK_DONE  165A
CURRENT_KEY         16EA
D                   44
DELTA_T             10F6
DELTA_TIME          1722
DRAW                11CC
DRAW_BULLET         1544
DRAW_ENEMYS         14B6
DRAW_ENEMY_1        14CE
DRAW_ENEMY_2        14F8
DRAW_ENEMY_LOOP     1524
DRAW_MSG            16BB
DRAW_PLAYER         1486
DRAW_PLYR_DATA      11EE
ENEMY_1_X           1706
ENEMY_1_Y           170A
ENEMY_2_X           170E
ENEMY_2_Y           1712
ENEMY_MOVING_R      1716
ENMY_H_INIT         A
ENMY_W_INIT         A
ESCAPE              1B
EXIT                166A
EXIT_MSG            16D5
GAME                10D2
GAMELOOP            10D6
GND_FALSE           0
GND_MSG             16D0
GND_TRUE            1
G_MSG               16CD
IDLE                13E0
IDLE_MSG            16A7
INITIALISE          1000
INITIALISE_ENEMYS   10A2
INPUT               115C
IS_PLAYER_ON_GND    1368
JMP_INDEX           1
JUMP                13BC
JUMP_DONE           13DE
JUMP_LOAD           144A
JUMP_MSG            169E
JUMP_WAV            1726
KEYCODE_MSG         1693
MOVEMENT_DONE       142A
MOVE_DOWN           141A
MOVE_LEFT           13FA
MOVE_RIGHT          13E6
NUM_OF_ENEMYS       2
OPPS_INDEX          2
OPPS_LOAD           1468
OPPS_WAV            1737
PERFORM_JUMP        13CE
PERFORM_MOVE_DOWN   1424
PERFORM_MOVE_LEFT   1402
PERFORM_MOVE_RIGHT  13EE
PLAYER_SCORE        16F6
PLAYER_X            16EE
PLAYER_Y            16F2
PLAY_JUMP           145C
PLAY_OPPS           147A
PLAY_RUN            143E
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        16FE
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         1702
PLYR_POS_MOVEMENT   1
PLYR_VELOCITY       16FA
PLYR_W_INIT         8
POINTS              1
RED                 FF
RESPAWN_BULLET      1132
RUN_INDEX           0
RUN_LOAD            142C
RUN_WAV             172F
S                   53
SCORE_MSG           168A
SCREEN_H            16E4
SCREEN_W            16E2
SET_OFF_GROUND      13B0
SET_ON_GROUND       1388
SHOOT               140E
SHOOT_BULLET        1150
SPACEBAR            20
SPEED               A
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              11B0
UPDATE_BULLET       110C
UPDATE_MSG          16B0
V_MSG               16CA
W                   57
WHITE               FFFFFF
X_MSG               16C4
Y_MSG               16C7
