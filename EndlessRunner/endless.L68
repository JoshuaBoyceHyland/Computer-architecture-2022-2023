00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 25/03/2023 19:47:52

00000000                             1  
00001000                             2      ORG    $1000
00001000                             3  START:                  ; first instruction of program
00001000                             4  * BASICALLY CONSTANTS
00001000                             5  *-----------------------------------------------------------
00001000                             6  * Section       : Trap Codes
00001000                             7  * Description   : Trap Codes used throughout StarterKit
00001000                             8  *-----------------------------------------------------------
00001000                             9  * Trap CODES
00001000  =00000021                 10  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 11  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            12                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 13  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 14  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 15  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            16  
00001000  =00000009                 17  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            18  
00001000                            19  *-----------------------------------------------------------
00001000                            20  * Section       : Charater Setup
00001000                            21  * Description   : Size of Player and Enemy and properties
00001000                            22  * of these characters e.g Starting Positions and Sizes
00001000                            23  *-----------------------------------------------------------
00001000  =00000008                 24  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 25  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            26  
00001000  =00000000                 27  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 28  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000  =00000001                 29  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            30  
00001000  =00000001                 31  PLYR_POS_MOVEMENT EQU   01          ; player movement
00001000  =00000001                 32  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 33  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            34  
00001000  =00000000                 35  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 36  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 37  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            38  
00001000  =0000001E                 39  ENMY_W_INIT EQU         30          ; Enemy initial Width
00001000  =0000000A                 40  ENMY_H_INIT EQU         10          ; Enemy initial Height
00001000  =00000002                 41  NUM_OF_ENEMYS    EQU    02          ; number of enemys 
00001000                            42  
00001000  =00000005                 43  BULLET_W    EQU         05          ; bullet width
00001000  =00000005                 44  BULLET_H    EQU         05          ; bullet height
00001000                            45  
00001000                            46  
00001000                            47  *-----------------------------------------------------------
00001000                            48  * Section       : Game Stats
00001000                            49  * Description   : Points
00001000                            50  *-----------------------------------------------------------
00001000  =00000001                 51  POINTS      EQU         01          ; Points added
00001000                            52  
00001000                            53  *-----------------------------------------------------------
00001000                            54  * Section       : Keyboard Keys
00001000                            55  * Description   : Spacebar and Escape or two functioning keys
00001000                            56  * Spacebar to JUMP and Escape to Exit Game
00001000                            57  *-----------------------------------------------------------
00001000  =00000020                 58  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 59  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000  =00000044                 60  D           EQU         $44         ; D ASCII Keycode
00001000  =00000057                 61  W           EQU         $57         ; W ASCII KeyCode
00001000  =00000041                 62  A           EQU         $41         ; A ASCII Keycode
00001000  =00000053                 63  S           EQU         $53         ; S ASCII Keycode   
00001000                            64  
00001000                            65  *-----------------------------------------------------------
00001000                            66  * Section       : Speed
00001000                            67  * Description   : movement speed 
00001000                            68  *-----------------------------------------------------------
00001000  =00000014                 69  SPEED           EQU         20          ; speed for character`   
00001000  =00000005                 70  ENEMY_SPEED     EQU         05  ; will get faster over time   `
00001000  =00000050                 71  BULLET_SPEED    EQU         80          ; speed for bullet
00001000                            72  *-----------------------------------------------------------
00001000                            73  * Subroutine    : Initialise
00001000                            74  * Description   : Initialise game data into memory such as 
00001000                            75  * sounds and screen size
00001000                            76  *-----------------------------------------------------------
00001000                            77  INITIALISE:
00001000                            78      ; Initialise Sounds
00001000  6100 0592                 79      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 05AC                 80      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 05C6                 81      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            82  
0000100C                            83      ; Screen Size
0000100C  103C 0021                 84      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      85      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      86      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 00001ACC             87      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      88      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 00001ACA             89      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            90  
00001022                            91      ; Place the Player at the center of the screen
00001022  4281                      92      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  3239 00001ACA             93      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102A  82FC 0002                 94      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102E  23C1 00001AD6             95      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001034                            96  
00001034  4281                      97      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001036                            98      * MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001036                            99      * SUB.L    #50,        D1          ; divide by 2 for center on Y Axis
00001036  23FC 000001C2 00001ADA   100      MOVE.L  #450,         PLAYER_Y    ; Players Y Position
00001040                           101  
00001040                           102      ; Initialise Player Score
00001040  4281                     103      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001042  7200                     104      MOVE.L  #00,        D1          ; Init Score
00001044  23C1 00001ADE            105      MOVE.L  D1,         PLAYER_SCORE
0000104A                           106  
0000104A                           107      ; Initialise Player Velocity
0000104A  4281                     108      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104C  123C 0000                109      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001050  23C1 00001AE2            110      MOVE.L  D1,         PLYR_VELOCITY
00001056                           111  
00001056                           112  
00001056                           113      ; Initialize Player on Ground
00001056  23FC 00000001 00001AEA   114      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001060                           115  
00001060                           116      ; intitial pos for test bullet
00001060  4281                     117      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001062  323C 0064                118      MOVE.W  #100,   D1          ; Place Screen width in D1
00001066  23C1 00001B1E            119      MOVE.L  D1,         BULLET_X     ; Enemy X Position
0000106C                           120  
0000106C  4281                     121      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000106E  323C 0064                122      MOVE.W  #100,   D1         ; Place Screen width in D1
00001072                           123      ;DIVU    #02,        D1         ; divide by 2 for center on Y Axis
00001072  23FC 00000064 00001B22   124      MOVE.L  #100,   BULLET_Y     ; Enemy Y Position
0000107C                           125  
0000107C                           126      ; initialisation of booleans for bullet been shot and enemy moving right
0000107C  4281                     127      CLR.L D1
0000107E  323C 0000                128      MOVE.W #0, D1
00001082  13C1 00001ACE            129      MOVE.B D1, BEEN_SHOT
00001088  13C1 00001B16            130      MOVE.B D1, ENEMY_MOVING_R ; makes false so is moving left to start
0000108E                           131  
0000108E                           132  
0000108E                           133      ; Enable the screen back buffer(see easy 68k help)
0000108E  103C 005C                134      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001092  123C 0011                135      MOVE.B  #17,        D1          ; Combine Tasks
00001096  4E4F                     136      TRAP    #15                     ; Trap (Perform action)
00001098                           137  
00001098                           138      ; Clear the screen (see easy 68k help)
00001098  103C 000B                139      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000109C  323C FF00                140      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010A0  4E4F                     141      TRAP    #15                     ; Trap (Perform action)
000010A2                           142  *-----------------------------------------------------------
000010A2                           143  * Subroutine    : initialise enemey positions
000010A2                           144  * Description   : sets up the positions for enemys 
000010A2                           145  *-----------------------------------------------------------
000010A2                           146  INITIALISE_ENEMYS:
000010A2  4281                     147      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010A4  323C 0064                148      MOVE.W  #100,   D1          ; Place Screen width in D1
000010A8  23C1 00001AEE            149      MOVE.L  D1,         ENEMY_1_X     ; Enemy X Position
000010AE  4281                     150      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010B0  323C 0000                151      MOVE.W  #0,   D1          ; Place Screen width in D1
000010B4  0481 0000000A            152      SUB.L   #10, D1
000010BA  23C1 00001AF2            153      MOVE.L  D1,         ENEMY_1_Y     ; Enemy X Position
000010C0                           154  
000010C0  4281                     155      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C2  323C 00C8                156      MOVE.W  #200,   D1          ; Place Screen width in D1
000010C6  23C1 00001AF6            157      MOVE.L  D1,         ENEMY_2_X     ; Enemy X Position
000010CC  4281                     158      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010CE  323C 0000                159      MOVE.W  #0,   D1          ; Place Screen width in D1
000010D2  0481 000000C8            160      SUB.L   #200, D1
000010D8  23C1 00001AFA            161      MOVE.L  D1,         ENEMY_2_Y     ; Enemy X Position
000010DE                           162  
000010DE  4281                     163      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010E0  323C 012C                164      MOVE.W  #300,   D1          ; Place Screen width in D1
000010E4  23C1 00001AFE            165      MOVE.L  D1,         ENEMY_3_X     ; Enemy X Position
000010EA  4281                     166      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010EC  323C 0000                167      MOVE.W  #00,   D1          ; Place Screen width in D1
000010F0  0481 0000012C            168      SUB.L   #300, D1
000010F6  23C1 00001B02            169      MOVE.L  D1,         ENEMY_3_Y     ; Enemy X Position
000010FC                           170  
000010FC  4281                     171      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE  323C 0190                172      MOVE.W  #400,   D1          ; Place Screen width in D1
00001102  23C1 00001B06            173      MOVE.L  D1,         ENEMY_4_X     ; Enemy X Position
00001108  4281                     174      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000110A  323C 0000                175      MOVE.W  #0,   D1          ; Place Screen width in D1
0000110E  0481 000000FA            176      SUB.L   #250, D1
00001114  23C1 00001B0A            177      MOVE.L  D1,         ENEMY_4_Y     ; Enemy X Position
0000111A                           178  
0000111A  4281                     179      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000111C  323C 01F4                180      MOVE.W  #500,   D1          ; Place Screen width in D1
00001120  23C1 00001B0E            181      MOVE.L  D1,         ENEMY_5_X     ; Enemy X Position
00001126  4281                     182      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001128  323C 0000                183      MOVE.W  #0,   D1          ; Place Screen width in D1
0000112C  0481 00000190            184      SUB.L   #400, D1
00001132  23C1 00001B12            185      MOVE.L  D1,         ENEMY_5_Y     ; Enemy X Position
00001138                           186  
00001138                           187      * CLR.L   D1
00001138                           188      * MOVE.L  #5,    D1
00001138                           189      * MOVE.L  D1,     ENEMY_SPEED
00001138                           190  
00001138                           191  
00001138                           192  
00001138                           193  *-----------------------------------------------------------
00001138                           194  * Subroutine    : Game
00001138                           195  * Description   : Game including main GameLoop. GameLoop is like
00001138                           196  * a while loop in that it runs forever until interupted
00001138                           197  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
00001138                           198  *-----------------------------------------------------------
00001138                           199  GAME:
00001138  6100 046C                200      BSR     PLAY_RUN                ; Play Run Wav
0000113C                           201  GAMELOOP:
0000113C                           202      ; Main Gameloop
0000113C  103C 0008                203      MOVE.B #8, D0                   ; D0 IS ONLY USED FOR COMMANDS, OUTPUST FROM THIS GOINTO OTHER DATA REGISTERS, THIS WILL BE STORED IN D1 
00001140  4E4F                     204      TRAP #15     
00001142  23C1 00001B26            205      MOVE.L D1, DELTA_TIME                   ; TRAP 15 RUNS COMMAND 15   
00001148  6100 0176                206      BSR     INPUT                   ; Check Keyboard Input
0000114C  6100 01C6                207      BSR     UPDATE                  ; Update positions and points
00001150  6100 0024                208      BSR     UPDATE_BULLET
00001154  6100 0036                209      BSR     UPDATE_ENEMYS
00001158                           210      ;BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
00001158  6100 0620                211      BSR     CHECK_COLLISIONS        ; Check for Collisions
0000115C  6100 01D2                212      BSR     DRAW                    ; Draw the Scene
00001160                           213      
00001160                           214  
00001160                           215  DELTA_t:
00001160  103C 0008                216      MOVE.B #8, D0                   ;CURRENT TIME 
00001164  4E4F                     217      TRAP #15  
00001166  92B9 00001B26            218      SUB.L DELTA_TIME, D1            ; TAKING AWAY DELTATIME FROM CURRENT TO CHECK REMAINDER, 
0000116C                           219      
0000116C  B2BC 00000004            220      CMP.L #4, D1
00001172  6BEC                     221      BMI.S DELTA_t                     ; if deltam time is lesser or equal to 17; branch lesser or equal to 
00001174  60C6                     222      BRA GAMELOOP
00001176                           223  
00001176                           224  
00001176                           225  UPDATE_BULLET:
00001176  6100 010E                226      BSR CHECK_FOR_BULLET_RESPAWN
0000117A  0C39 0000 00001ACE       227      CMP.B #0, BEEN_SHOT
00001182  6700 011A                228      BEQ BULLET_TRACK_PLAYER ; if the bullet has not been shot will track player
00001186  6000 012C                229      BRA SHOOT_BULLET
0000118A  4E75                     230      RTS
0000118C                           231  
0000118C                           232  UPDATE_ENEMYS:
0000118C  6100 0008                233     BSR ENEMY_MOVE_DOWN
00001190  6100 002A                234     BSR CHECK_ENEMY_RESETS
00001194  4E75                     235      RTS
00001196                           236  ENEMY_MOVE_DOWN:
00001196                           237  
00001196  2239 00001AFA            238      MOVE.L ENEMY_2_Y, D1
0000119C  5AB9 00001AF2            239      ADD.L #ENEMY_SPEED, ENEMY_1_Y
000011A2  5AB9 00001AFA            240      ADD.L #ENEMY_SPEED, ENEMY_2_Y
000011A8  5AB9 00001B02            241      ADD.L #ENEMY_SPEED, ENEMY_3_Y
000011AE  5AB9 00001B0A            242      ADD.L #ENEMY_SPEED, ENEMY_4_Y
000011B4  5AB9 00001B12            243      ADD.L #ENEMY_SPEED, ENEMY_5_Y
000011BA  4E75                     244      RTS
000011BC                           245  
000011BC                           246  CHECK_ENEMY_RESETS
000011BC  6100 0014                247      BSR CHECK_ENEMY_RESET_1
000011C0  6100 0034                248      BSR CHECK_ENEMY_RESET_2
000011C4  6100 0054                249      BSR CHECK_ENEMY_RESET_3
000011C8  6100 0074                250      BSR CHECK_ENEMY_RESET_4
000011CC  6100 0094                251      BSR CHECK_ENEMY_RESET_5
000011D0  4E75                     252      RTS
000011D2                           253  CHECK_ENEMY_RESET_1:
000011D2  4281                     254      CLR.L D1
000011D4  4282                     255      CLR.L D2
000011D6                           256  
000011D6  223C 000001E0            257      MOVE.L #480, D1      ; point in which on screen respawn will happen 
000011DC  2439 00001AF2            258      MOVE.L ENEMY_1_Y, D2
000011E2                           259      
000011E2  B481                     260      CMP.L D1, D2
000011E4  6C00 0004                261      BGE   RESET_ENEMY_1
000011E8  4E75                     262      RTS
000011EA                           263      
000011EA                           264  RESET_ENEMY_1:
000011EA  23FC 00000000 00001AF2   265      MOVE.L #0, ENEMY_1_Y
000011F4  4E75                     266      RTS
000011F6                           267  
000011F6                           268  CHECK_ENEMY_RESET_2:
000011F6  4281                     269      CLR.L D1
000011F8  4282                     270      CLR.L D2
000011FA                           271  
000011FA  223C 000001E0            272      MOVE.L #480, D1      ; point in which on screen respawn will happen 
00001200  2439 00001AFA            273      MOVE.L ENEMY_2_Y, D2
00001206                           274      
00001206  B481                     275      CMP.L D1, D2
00001208  6C00 0004                276      BGE   RESET_ENEMY_2
0000120C  4E75                     277      RTS
0000120E                           278      
0000120E                           279  RESET_ENEMY_2:
0000120E  23FC 00000000 00001AFA   280      MOVE.L #0, ENEMY_2_Y
00001218  4E75                     281      RTS
0000121A                           282  
0000121A                           283  CHECK_ENEMY_RESET_3:
0000121A  4281                     284      CLR.L D1
0000121C  4282                     285      CLR.L D2
0000121E                           286  
0000121E  223C 000001E0            287      MOVE.L #480, D1      ; point in which on screen respawn will happen 
00001224  2439 00001B02            288      MOVE.L ENEMY_3_Y, D2
0000122A                           289      
0000122A  B481                     290      CMP.L D1, D2
0000122C  6C00 0004                291      BGE   RESET_ENEMY_3
00001230  4E75                     292      RTS
00001232                           293      
00001232                           294  RESET_ENEMY_3:
00001232  23FC 00000000 00001B02   295      MOVE.L #0, ENEMY_3_Y
0000123C  4E75                     296      RTS
0000123E                           297  
0000123E                           298  CHECK_ENEMY_RESET_4:
0000123E  4281                     299      CLR.L D1
00001240  4282                     300      CLR.L D2
00001242                           301  
00001242  223C 000001E0            302      MOVE.L #480, D1      ; point in which on screen respawn will happen 
00001248  2439 00001B0A            303      MOVE.L ENEMY_4_Y, D2
0000124E                           304      
0000124E  B481                     305      CMP.L D1, D2
00001250  6C00 0004                306      BGE   RESET_ENEMY_4
00001254  4E75                     307      RTS
00001256                           308      
00001256                           309  RESET_ENEMY_4:
00001256  23FC 00000000 00001B0A   310      MOVE.L #0, ENEMY_4_Y
00001260  4E75                     311      RTS
00001262                           312  
00001262                           313  CHECK_ENEMY_RESET_5:
00001262  4281                     314      CLR.L D1
00001264  4282                     315      CLR.L D2
00001266                           316  
00001266  223C 000001E0            317      MOVE.L #480, D1      ; point in which on screen respawn will happen 
0000126C  2439 00001B12            318      MOVE.L ENEMY_5_Y, D2
00001272                           319      
00001272  B481                     320      CMP.L D1, D2
00001274  6C00 0004                321      BGE   RESET_ENEMY_5
00001278  4E75                     322      RTS
0000127A                           323      
0000127A                           324  RESET_ENEMY_5:
0000127A  23FC 00000000 00001B12   325      MOVE.L #0, ENEMY_5_Y
00001284  4E75                     326      RTS
00001286                           327  
00001286                           328  CHECK_FOR_BULLET_RESPAWN:
00001286  0CB9 00000000 00001B22   329      CMP.L #0, BULLET_Y
00001290  6D00 0004                330      BLT RESPAWN_BULLET
00001294  4E75                     331      RTS
00001296                           332  
00001296                           333  RESPAWN_BULLET:
00001296  53B9 00001ACE            334      SUB.L #1, BEEN_SHOT
0000129C  4E75                     335      RTS
0000129E                           336      
0000129E                           337  
0000129E                           338  BULLET_TRACK_PLAYER:
0000129E  23F9 00001AD6 00001B1E   339      MOVE.L PLAYER_X, BULLET_X
000012A8  23F9 00001ADA 00001B22   340      MOVE.L PLAYER_Y, BULLET_Y
000012B2  4E75                     341      RTS
000012B4                           342  
000012B4                           343  SHOOT_BULLET:
000012B4  04B9 00000032 00001B22   344      SUB.L #50, BULLET_Y
000012BE  4E75                     345      RTS
000012C0                           346  *-----------------------------------------------------------
000012C0                           347  * Subroutine    : Input
000012C0                           348  * Description   : Process Keyboard Input
000012C0                           349  *-----------------------------------------------------------
000012C0                           350  INPUT:
000012C0                           351      ; Process Input
000012C0  4281                     352      CLR.L   D1                      ; Clear Data Register
000012C2  103C 0013                353      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000012C6  223C 20415344            354      MOVE.L #$20415344,D1            ; ALL THE INPUTS PUT IN D1 WASD, IN ONE BYTE
000012CC  4E4F                     355      TRAP   #15                      ; DEXCUTES ABOVE AND CHECKS IF ny have been pushed
000012CE                           356  
000012CE                           357     * CHECKS CORRESPONG NUMBERS ARE BEING PRESSED
000012CE  B2BC FFFF0000            358      CMP.L  #$FFFF0000, D1           ; SPACE
000012D4  6700 02A0                359      BEQ    SHOOT
000012D8  6700 0288                360      BEQ    MOVE_LEFT
000012DC                           361  
000012DC  B2BC FF0000FF            362      CMP.L  #$FF0000FF, D1           ; SPACE
000012E2  6700 0292                363      BEQ    SHOOT
000012E6  6700 0266                364      BEQ    MOVE_RIGHT
000012EA                           365  
000012EA  B2BC FF000000            366      CMP.L  #$FF000000, D1           ; SPACE
000012F0  6700 0284                367      BEQ    SHOOT
000012F4                           368  
000012F4  B2BC 00FF0000            369      CMP.L  #$00FF0000, D1           ; A
000012FA  6700 0266                370      BEQ    MOVE_LEFT
000012FE                           371  
000012FE  B2BC 0000FF00            372      CMP.L  #$0000FF00, D1           ; S
00001304  6700 027C                373      BEQ    MOVE_DOWN
00001308                           374  
00001308  B2BC 000000FF            375      CMP.L  #$000000FF, D1           ; D
0000130E  6700 023E                376      BEQ    MOVE_RIGHT
00001312  4E75                     377      RTS                             ; Return to subroutine
00001314                           378  
00001314                           379  
00001314                           380  
00001314                           381  *-----------------------------------------------------------
00001314                           382  * Subroutine    : Update
00001314                           383  * Description   : Main update loop update Player and Enemies
00001314                           384  *-----------------------------------------------------------
00001314                           385  UPDATE:
00001314                           386      ; Update the Players Positon based on Velocity and Gravity
00001314  4281                     387      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001316  2239 00001AE2            388      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
0000131C  23C1 00001AE2            389      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
00001322  D2B9 00001ADA            390      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001328  23C1 00001ADA            391      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
0000132E                           392  
0000132E                           393      ; Move the Enemy
0000132E                           394      ;CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000132E                           395      ;CLR.L   D1                      ; Clear the contents of D0
0000132E                           396     ; MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
0000132E                           397      ;CMP.L   #00,        D1
0000132E                           398      ;BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
0000132E                           399     ;BRA     MOVE_ENEMY              ; Move the Enemy
0000132E                           400  
0000132E  4E75                     401      RTS                             ; Return to subroutine  
00001330                           402  
00001330                           403  *-----------------------------------------------------------
00001330                           404  * Subroutine    : Move Enemy
00001330                           405  * Description   : Move Enemy Right to Left
00001330                           406  *-----------------------------------------------------------
00001330                           407  * MOVE_ENEMY:
00001330                           408  *     SUB.L   #01,        ENEMY_X     ; Move enemy by X Value
00001330                           409  *     RTS
00001330                           410  
00001330                           411  *-----------------------------------------------------------
00001330                           412  * Subroutine    : Reset Enemy
00001330                           413  * Description   : Reset Enemy if to passes 0 to Right of Screen
00001330                           414  *-----------------------------------------------------------
00001330                           415  * RESET_ENEMY_POSITION:
00001330                           416  *     CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001330                           417  *     MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001330                           418  *     MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001330                           419  *     RTS
00001330                           420  
00001330                           421  *-----------------------------------------------------------
00001330                           422  * Subroutine    : Draw
00001330                           423  * Description   : Draw Screen
00001330                           424  *-----------------------------------------------------------
00001330                           425  DRAW: 
00001330                           426      ; Enable back buffer
00001330  103C 005E                427      MOVE.B  #94,        D0
00001334  4E4F                     428      TRAP    #15
00001336                           429  
00001336                           430      ; Clear the screen
00001336  103C 000B                431      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000133A  323C FF00                432      MOVE.W  #$FF00,     D1          ; Clear contents
0000133E  4E4F                     433      TRAP    #15                     ; Trap (Perform action)
00001340                           434  
00001340  6100 03F8                435      BSR     DRAW_BASE
00001344  6100 0010                436      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
00001348  6100 02A4                437      BSR     DRAW_PLAYER             ; Draw Player
0000134C  6100 02D0                438      BSR     DRAW_ENEMYS             ; Draw Enemy
00001350  6100 03B8                439      BSR     DRAW_BULLET             ; draw bullet
00001354  4E75                     440      RTS                             ; Return to subroutine
00001356                           441  
00001356                           442  *-----------------------------------------------------------
00001356                           443  * Subroutine    : Draw Player Data
00001356                           444  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
00001356                           445  *-----------------------------------------------------------
00001356                           446  DRAW_PLYR_DATA:
00001356  4281                     447      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001358                           448  
00001358                           449      ; Player Score Message
00001358  103C 000B                450      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000135C  323C 0201                451      MOVE.W  #$0201,     D1          ; Col 02, Row 01
00001360  4E4F                     452      TRAP    #15                     ; Trap (Perform action)
00001362  43F9 00001A72            453      LEA     SCORE_MSG,  A1          ; Score Message
00001368  303C 000D                454      MOVE    #13,        D0          ; No Line feed
0000136C  4E4F                     455      TRAP    #15                     ; Trap (Perform action)
0000136E                           456  
0000136E                           457      ; Player Score Value
0000136E  103C 000B                458      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001372  323C 0901                459      MOVE.W  #$0901,     D1          ; Col 09, Row 01
00001376  4E4F                     460      TRAP    #15                     ; Trap (Perform action)
00001378  103C 0003                461      MOVE.B  #03,        D0          ; Display number at D1.L
0000137C  2239 00001ADE            462      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00001382  4E4F                     463      TRAP    #15                     ; Trap (Perform action)
00001384                           464      
00001384                           465      ; Player X Message
00001384  103C 000B                466      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001388  323C 0202                467      MOVE.W  #$0202,     D1          ; Col 02, Row 02
0000138C  4E4F                     468      TRAP    #15                     ; Trap (Perform action)
0000138E  43F9 00001AAC            469      LEA     X_MSG,      A1          ; X Message
00001394  303C 000D                470      MOVE    #13,        D0          ; No Line feed
00001398  4E4F                     471      TRAP    #15                     ; Trap (Perform action)
0000139A                           472      
0000139A                           473      ; Player X
0000139A  103C 000B                474      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
0000139E  323C 0502                475      MOVE.W  #$0502,     D1          ; Col 05, Row 02
000013A2  4E4F                     476      TRAP    #15                     ; Trap (Perform action)
000013A4  103C 0003                477      MOVE.B  #03,        D0          ; Display number at D1.L
000013A8  2239 00001AD6            478      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
000013AE  4E4F                     479      TRAP    #15                     ; Trap (Perform action)
000013B0                           480      
000013B0                           481      ; Player Y Message
000013B0  103C 000B                482      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013B4  323C 1002                483      MOVE.W  #$1002,     D1          ; Col 10, Row 02
000013B8  4E4F                     484      TRAP    #15                     ; Trap (Perform action)
000013BA  43F9 00001AAF            485      LEA     Y_MSG,      A1          ; Y Message
000013C0  303C 000D                486      MOVE    #13,        D0          ; No Line feed
000013C4  4E4F                     487      TRAP    #15                     ; Trap (Perform action)
000013C6                           488      
000013C6                           489      ; Player Y
000013C6  103C 000B                490      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013CA  323C 1202                491      MOVE.W  #$1202,     D1          ; Col 12, Row 02
000013CE  4E4F                     492      TRAP    #15                     ; Trap (Perform action)
000013D0  103C 0003                493      MOVE.B  #03,        D0          ; Display number at D1.L
000013D4  2239 00001ADA            494      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
000013DA  4E4F                     495      TRAP    #15                     ; Trap (Perform action) 
000013DC                           496  
000013DC                           497      ; Player Velocity Message
000013DC  103C 000B                498      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013E0  323C 0203                499      MOVE.W  #$0203,     D1          ; Col 02, Row 03
000013E4  4E4F                     500      TRAP    #15                     ; Trap (Perform action)
000013E6  43F9 00001AB2            501      LEA     V_MSG,      A1          ; Velocity Message
000013EC  303C 000D                502      MOVE    #13,        D0          ; No Line feed
000013F0  4E4F                     503      TRAP    #15                     ; Trap (Perform action)
000013F2                           504      
000013F2                           505      ; Player Velocity
000013F2  103C 000B                506      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013F6  323C 0503                507      MOVE.W  #$0503,     D1          ; Col 05, Row 03
000013FA  4E4F                     508      TRAP    #15                     ; Trap (Perform action)
000013FC  103C 0003                509      MOVE.B  #03,        D0          ; Display number at D1.L
00001400  2239 00001AE2            510      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
00001406  4E4F                     511      TRAP    #15                     ; Trap (Perform action)
00001408                           512      
00001408                           513      ; Player Gravity Message
00001408  103C 000B                514      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000140C  323C 1003                515      MOVE.W  #$1003,     D1          ; Col 10, Row 03
00001410  4E4F                     516      TRAP    #15                     ; Trap (Perform action)
00001412  43F9 00001AB5            517      LEA     G_MSG,      A1          ; G Message
00001418  303C 000D                518      MOVE    #13,        D0          ; No Line feed
0000141C  4E4F                     519      TRAP    #15                     ; Trap (Perform action)
0000141E                           520      
0000141E                           521      ; Player Gravity
0000141E  103C 000B                522      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001422  323C 1203                523      MOVE.W  #$1203,     D1          ; Col 12, Row 03
00001426  4E4F                     524      TRAP    #15                     ; Trap (Perform action)
00001428  103C 0003                525      MOVE.B  #03,        D0          ; Display number at D1.L
0000142C  2239 00001AE6            526      MOVE.L  PLYR_GRAVITY,D1         ; Move Gravity to D1.L
00001432  4E4F                     527      TRAP    #15                     ; Trap (Perform action)
00001434                           528  
00001434                           529      ; Player On Ground Message
00001434  103C 000B                530      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001438  323C 0204                531      MOVE.W  #$0204,     D1          ; Col 10, Row 03
0000143C  4E4F                     532      TRAP    #15                     ; Trap (Perform action)
0000143E  43F9 00001AB8            533      LEA     GND_MSG,    A1          ; On Ground Message
00001444  303C 000D                534      MOVE    #13,        D0          ; No Line feed
00001448  4E4F                     535      TRAP    #15                     ; Trap (Perform action)
0000144A                           536      
0000144A                           537      ; Player On Ground
0000144A  103C 000B                538      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000144E  323C 0604                539      MOVE.W  #$0604,     D1          ; Col 06, Row 04
00001452  4E4F                     540      TRAP    #15                     ; Trap (Perform action)
00001454  103C 0003                541      MOVE.B  #03,        D0          ; Display number at D1.L
00001458  2239 00001AEA            542      MOVE.L  PLYR_ON_GND,D1          ; Move Play on Ground ? to D1.L
0000145E  4E4F                     543      TRAP    #15                     ; Trap (Perform action)
00001460                           544  
00001460                           545      ; Show Keys Pressed
00001460  103C 000B                546      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001464  323C 2001                547      MOVE.W  #$2001,     D1          ; Col 20, Row 1
00001468  4E4F                     548      TRAP    #15                     ; Trap (Perform action)
0000146A  43F9 00001A7B            549      LEA     KEYCODE_MSG, A1         ; Keycode
00001470  303C 000D                550      MOVE    #13,        D0          ; No Line feed
00001474  4E4F                     551      TRAP    #15                     ; Trap (Perform action)
00001476                           552  
00001476                           553      ; Show KeyCode
00001476  103C 000B                554      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000147A  323C 3001                555      MOVE.W  #$3001,     D1          ; Col 30, Row 1
0000147E  4E4F                     556      TRAP    #15                     ; Trap (Perform action)    
00001480  2239 00001AD2            557      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
00001486  103C 0003                558      MOVE.B  #03,        D0          ; Display the contents of D1
0000148A  4E4F                     559      TRAP    #15                     ; Trap (Perform action)
0000148C                           560  
0000148C                           561      ; Show if Update is Running
0000148C  103C 000B                562      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001490  323C 0205                563      MOVE.W  #$0205,     D1          ; Col 02, Row 05
00001494  4E4F                     564      TRAP    #15                     ; Trap (Perform action)
00001496  43F9 00001A98            565      LEA     UPDATE_MSG, A1          ; Update
0000149C  303C 000D                566      MOVE    #13,        D0          ; No Line feed
000014A0  4E4F                     567      TRAP    #15                     ; Trap (Perform action)
000014A2                           568  
000014A2                           569      ; Show if Draw is Running
000014A2  103C 000B                570      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014A6  323C 0206                571      MOVE.W  #$0206,     D1          ; Col 02, Row 06
000014AA  4E4F                     572      TRAP    #15                     ; Trap (Perform action)
000014AC  43F9 00001AA3            573      LEA     DRAW_MSG,   A1          ; Draw
000014B2  303C 000D                574      MOVE    #13,        D0          ; No Line feed
000014B6  4E4F                     575      TRAP    #15                     ; Trap (Perform action)
000014B8                           576  
000014B8                           577      ; Show if Idle is Running
000014B8  103C 000B                578      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014BC  323C 0207                579      MOVE.W  #$0207,     D1          ; Col 02, Row 07
000014C0  4E4F                     580      TRAP    #15                     ; Trap (Perform action)
000014C2  43F9 00001A8F            581      LEA     IDLE_MSG,   A1          ; Move Idle Message to A1
000014C8  303C 000D                582      MOVE    #13,        D0          ; No Line feed
000014CC  4E4F                     583      TRAP    #15                     ; Trap (Perform action)
000014CE                           584  
000014CE  4E75                     585      RTS  
000014D0                           586      
000014D0                           587  *-----------------------------------------------------------
000014D0                           588  * Subroutine    : Player is on Ground
000014D0                           589  * Description   : Check if the Player is on or off Ground
000014D0                           590  *-----------------------------------------------------------
000014D0                           591  IS_PLAYER_ON_GND:
000014D0                           592      ; Check if Player is on Ground
000014D0  4281                     593      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000014D2  4282                     594      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
000014D4  3239 00001ACC            595      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000014DA  82FC 0002                596      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000014DE  2439 00001ADA            597      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
000014E4  B441                     598      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
000014E6  6C00 0008                599      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
000014EA  6D00 002C                600      BLT     SET_OFF_GROUND          ; The Player is off the Ground
000014EE  4E75                     601      RTS                             ; Return to subroutine
000014F0                           602  
000014F0                           603  
000014F0                           604  *-----------------------------------------------------------
000014F0                           605  * Subroutine    : On Ground
000014F0                           606  * Description   : Set the Player On Ground
000014F0                           607  *-----------------------------------------------------------
000014F0                           608  SET_ON_GROUND:
000014F0  4281                     609      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000014F2  3239 00001ACC            610      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000014F8  82FC 0002                611      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000014FC  23C1 00001ADA            612      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001502  4281                     613      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001504  7200                     614      MOVE.L  #00,        D1          ; Player Velocity
00001506  23C1 00001AE2            615      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000150C  23FC 00000001 00001AEA   616      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001516  4E75                     617      RTS
00001518                           618  
00001518                           619  *-----------------------------------------------------------
00001518                           620  * Subroutine    : Off Ground
00001518                           621  * Description   : Set the Player Off Ground
00001518                           622  *-----------------------------------------------------------
00001518                           623  SET_OFF_GROUND:
00001518  23FC 00000000 00001AEA   624      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00001522  4E75                     625      RTS                             ; Return to subroutine
00001524                           626  *-----------------------------------------------------------
00001524                           627  * Subroutine    : Jump
00001524                           628  * Description   : Perform a Jump
00001524                           629  *-----------------------------------------------------------
00001524                           630  JUMP:
00001524  0CB9 00000001 00001AEA   631      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000152E  6700 0006                632      BEQ     PERFORM_JUMP            ; Do Jump
00001532  6000 0012                633      BRA     JUMP_DONE               ;
00001536                           634  PERFORM_JUMP:
00001536  6100 008C                635      BSR     PLAY_JUMP               ; Play jump sound
0000153A  23FC FFFFFFEC 00001AE2   636      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
00001544  4E75                     637      RTS                             ; Return to subroutine
00001546                           638  JUMP_DONE:
00001546  4E75                     639      RTS                             ; Return to subroutine
00001548                           640  
00001548                           641  *-----------------------------------------------------------
00001548                           642  * Subroutine    : Idle
00001548                           643  * Description   : Perform a Idle
00001548                           644  *----------------------------------------------------------- 
00001548                           645  IDLE:
00001548  6100 005C                646      BSR     PLAY_RUN                ; Play Run Wav
0000154C  4E75                     647      RTS                             ; Return to subroutine
0000154E                           648  
0000154E                           649  
0000154E                           650  *-----------------------------------------------------------
0000154E                           651  * Subroutine    : MOVE_RIGHT
0000154E                           652  * Description   : Perform a move right
0000154E                           653  *-----------------------------------------------------------
0000154E                           654  MOVE_RIGHT:
0000154E  6700 0006                655      BEQ     PERFORM_MOVE_RIGHT  ; do actual move ment to right
00001552  6000 003E                656      BRA     MOVEMENT_DONE       ; return back 
00001556                           657  PERFORM_MOVE_RIGHT:
00001556  06B9 00000014 00001AD6   658      ADD.L   #SPEED, PLAYER_X       ; adds movement to the position
00001560  4E75                     659      RTS
00001562                           660  
00001562                           661  
00001562                           662  
00001562                           663  *-----------------------------------------------------------
00001562                           664  * Subroutine    : MOVE_LEFT
00001562                           665  * Description   : Perform a move left
00001562                           666  *-----------------------------------------------------------
00001562                           667  * MOVE_LEFT_SHOOT:
00001562                           668  *     ADD.L #01, BEEN_SHOT  ; do actual movement left
00001562                           669  *     BEQ     PERFORM_MOVE_LEFT   ; do actual movement left
00001562                           670  *     BRA     MOVEMENT_DONE      ; RETURN BACK
00001562                           671  MOVE_LEFT:
00001562  6700 0006                672      BEQ     PERFORM_MOVE_LEFT   ; do actual movement left
00001566  6000 002A                673      BRA     MOVEMENT_DONE      ; RETURN BACK
0000156A                           674  
0000156A                           675  PERFORM_MOVE_LEFT:  
0000156A  04B9 00000014 00001AD6   676      SUB.L #SPEED, PLAYER_X         ; takes away movement from position
00001574  4E75                     677      RTS
00001576                           678  
00001576                           679  *-----------------------------------------------------------
00001576                           680  * Subroutine    : MOVE_UP
00001576                           681  * Description   : Perform a move up
00001576                           682  *-----------------------------------------------------------
00001576                           683  SHOOT:
00001576  52B9 00001ACE            684      ADD.L #01, BEEN_SHOT  ; do actual movement left
0000157C  6000 0014                685      BRA     MOVEMENT_DONE      ; RETURN BACK
00001580  4E75                     686      RTS
00001582                           687  
00001582                           688  
00001582                           689  *-----------------------------------------------------------
00001582                           690  * Subroutine    : MOVE_DOWN
00001582                           691  * Description   : Perform a move down
00001582                           692  *-----------------------------------------------------------
00001582                           693  MOVE_DOWN:
00001582  6700 0008                694      BEQ     PERFORM_MOVE_DOWN   ; do actual movement down
00001586  6000 000A                695      BRA     MOVEMENT_DONE     ; RETURN BACK
0000158A  4E75                     696      RTS
0000158C                           697  
0000158C                           698  PERFORM_MOVE_DOWN:  
0000158C  52B9 00001ADA            699      ADD.L #01, PLAYER_Y         ; takes away movement from position
00001592                           700  
00001592                           701  MOVEMENT_DONE:
00001592  4E75                     702      RTS
00001594                           703  
00001594                           704  
00001594                           705  
00001594                           706  
00001594                           707  *-----------------------------------------------------------
00001594                           708  * Subroutines   : Sound Load and Play
00001594                           709  * Description   : Initialise game sounds into memory 
00001594                           710  * Current Sounds are RUN, JUMP and Opps for Collision
00001594                           711  *-----------------------------------------------------------
00001594                           712  RUN_LOAD:
00001594  43F9 00001B33            713      LEA     RUN_WAV,    A1          ; Load Wav File into A1
0000159A  323C 0000                714      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
0000159E  303C 0047                715      MOVE    #71,        D0          ; Load into memory
000015A2  4E4F                     716      TRAP    #15                     ; Trap (Perform action)
000015A4  4E75                     717      RTS                             ; Return to subroutine
000015A6                           718  
000015A6                           719  PLAY_RUN:
000015A6  323C 0000                720      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
000015AA  303C 0048                721      MOVE    #72,        D0          ; Play Sound
000015AE  4E4F                     722      TRAP    #15                     ; Trap (Perform action)
000015B0  4E75                     723      RTS                             ; Return to subroutine
000015B2                           724  
000015B2                           725  JUMP_LOAD:
000015B2  43F9 00001B2A            726      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
000015B8  323C 0001                727      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
000015BC  303C 0047                728      MOVE    #71,        D0          ; Load into memory
000015C0  4E4F                     729      TRAP    #15                     ; Trap (Perform action)
000015C2  4E75                     730      RTS                             ; Return to subroutine
000015C4                           731  
000015C4                           732  PLAY_JUMP:
000015C4  323C 0001                733      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000015C8  303C 0048                734      MOVE    #72,        D0          ; Play Sound
000015CC  4E4F                     735      TRAP    #15                     ; Trap (Perform action)
000015CE  4E75                     736      RTS                             ; Return to subroutine
000015D0                           737  
000015D0                           738  OPPS_LOAD:
000015D0  43F9 00001B3B            739      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
000015D6  323C 0002                740      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
000015DA  303C 0047                741      MOVE    #71,        D0          ; Load into memory
000015DE  4E4F                     742      TRAP    #15                     ; Trap (Perform action)
000015E0  4E75                     743      RTS                             ; Return to subroutine
000015E2                           744  
000015E2                           745  PLAY_OPPS:
000015E2  323C 0002                746      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
000015E6  303C 0048                747      MOVE    #72,        D0          ; Play Sound
000015EA  4E4F                     748      TRAP    #15                     ; Trap (Perform action)
000015EC  4E75                     749      RTS                             ; Return to subroutine
000015EE                           750  
000015EE                           751  *-----------------------------------------------------------
000015EE                           752  * Subroutine    : Draw Player
000015EE                           753  * Description   : Draw Player Square
000015EE                           754  *-----------------------------------------------------------
000015EE                           755  DRAW_PLAYER:
000015EE                           756      ; Set Pixel Colors
000015EE  223C 00FFFFFF            757      MOVE.L  #WHITE,     D1          ; Set Background color
000015F4  103C 0050                758      MOVE.B  #80,        D0          ; Task for Background Color
000015F8  4E4F                     759      TRAP    #15                     ; Trap (Perform action)
000015FA                           760  
000015FA                           761      ; Set X, Y, Width and Height
000015FA  2239 00001AD6            762      MOVE.L  PLAYER_X,   D1          ; X
00001600  2439 00001ADA            763      MOVE.L  PLAYER_Y,   D2          ; Y
00001606  2639 00001AD6            764      MOVE.L  PLAYER_X,   D3
0000160C  5083                     765      ADD.L   #PLYR_W_INIT,   D3      ; Width
0000160E  2839 00001ADA            766      MOVE.L  PLAYER_Y,   D4 
00001614  5084                     767      ADD.L   #PLYR_H_INIT,   D4      ; Height
00001616                           768      
00001616                           769      ; Draw Player
00001616  103C 0057                770      MOVE.B  #87,        D0          ; Draw Player
0000161A  4E4F                     771      TRAP    #15                     ; Trap (Perform action)
0000161C  4E75                     772      RTS                             ; Return to subroutine
0000161E                           773  
0000161E                           774  *-----------------------------------------------------------
0000161E                           775  * Subroutine    : Draw Enemy
0000161E                           776  * Description   : Draw Enemy Square
0000161E                           777  *-----------------------------------------------------------
0000161E                           778  DRAW_ENEMYS:
0000161E                           779      ; Set Pixel Colors
0000161E  223C 000000FF            780      MOVE.L  #RED,       D1          ; Set Background color
00001624  103C 0050                781      MOVE.B  #80,        D0          ; Task for Background Color
00001628  4E4F                     782      TRAP    #15                     ; Trap (Perform action)
0000162A                           783  
0000162A  4240                     784      CLR D0
0000162C  4241                     785      CLR D1
0000162E  4242                     786      CLR D2  
00001630  4243                     787      CLR D3
00001632  4244                     788      CLR D4
00001634  4245                     789      CLR D5
00001636                           790  
00001636                           791  DRAW_ENEMY_1:
00001636  2239 00001AEE            792      MOVE.L  ENEMY_1_X,      D1       ; X   
0000163C  2439 00001AF2            793      MOVE.L  ENEMY_1_Y,      D2       ; Y
00001642                           794  
00001642                           795      * Width and Height *
00001642  2639 00001AEE            796      MOVE.L  ENEMY_1_X,      D3
00001648  0683 0000001E            797      ADD.L   #ENMY_W_INIT,   D3      ; Width
0000164E  2839 00001AF2            798      MOVE.L  ENEMY_1_Y,      D4 
00001654  0684 0000000A            799      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000165A                           800      
0000165A                           801      ; Draw Enemy    
0000165A  103C 0057                802      MOVE.B  #87,            D0          ; Draw Enemy
0000165E  4E4F                     803      TRAP    #15                     ; Trap (Perform action)
00001660                           804  
00001660                           805  DRAW_ENEMY_2:
00001660  2239 00001AF6            806      MOVE.L  ENEMY_2_X,      D1       ; X   
00001666  2439 00001AFA            807      MOVE.L  ENEMY_2_Y,      D2       ; Y
0000166C                           808  
0000166C                           809      * Width and Height *
0000166C  2639 00001AF6            810      MOVE.L  ENEMY_2_X,      D3
00001672  0683 0000001E            811      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001678  2839 00001AFA            812      MOVE.L  ENEMY_2_Y,      D4 
0000167E  0684 0000000A            813      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001684                           814      
00001684                           815      ; Draw Enemy    
00001684  103C 0057                816      MOVE.B  #87,        D0          ; Draw Enemy
00001688  4E4F                     817      TRAP    #15                     ; Trap (Perform action)
0000168A                           818  
0000168A                           819  DRAW_ENEMY_3:
0000168A  2239 00001AFE            820      MOVE.L  ENEMY_3_X,      D1       ; X   
00001690  2439 00001B02            821      MOVE.L  ENEMY_3_Y,      D2       ; Y
00001696                           822  
00001696                           823      * Width and Height *
00001696  2639 00001AFE            824      MOVE.L  ENEMY_3_X,      D3
0000169C  0683 0000001E            825      ADD.L   #ENMY_W_INIT,   D3      ; Width
000016A2  2839 00001B02            826      MOVE.L  ENEMY_3_Y,      D4 
000016A8  0684 0000000A            827      ADD.L   #ENMY_H_INIT,   D4      ; Height
000016AE                           828      
000016AE                           829      ; Draw Enemy    
000016AE  103C 0057                830      MOVE.B  #87,        D0          ; Draw Enemy
000016B2  4E4F                     831      TRAP    #15                     ; Trap (Perform action)
000016B4                           832  
000016B4                           833  
000016B4                           834  DRAW_ENEMY_4:
000016B4  2239 00001B06            835      MOVE.L  ENEMY_4_X,      D1       ; X   
000016BA  2439 00001B0A            836      MOVE.L  ENEMY_4_Y,      D2       ; Y
000016C0                           837  
000016C0                           838      * Width and Height *
000016C0  2639 00001B06            839      MOVE.L  ENEMY_4_X,      D3
000016C6  0683 0000001E            840      ADD.L   #ENMY_W_INIT,   D3      ; Width
000016CC  2839 00001B0A            841      MOVE.L  ENEMY_4_Y,      D4 
000016D2  0684 0000000A            842      ADD.L   #ENMY_H_INIT,   D4      ; Height
000016D8                           843      
000016D8                           844      ; Draw Enemy    
000016D8  103C 0057                845      MOVE.B  #87,        D0          ; Draw Enemy
000016DC  4E4F                     846      TRAP    #15                     ; Trap (Perform action)
000016DE                           847  
000016DE                           848  DRAW_ENEMY_5:
000016DE  2239 00001B0E            849      MOVE.L  ENEMY_5_X,      D1       ; X   
000016E4  2439 00001B12            850      MOVE.L  ENEMY_5_Y,      D2       ; Y
000016EA                           851  
000016EA                           852      * Width and Height *
000016EA  2639 00001B0E            853      MOVE.L  ENEMY_5_X,      D3
000016F0  0683 0000001E            854      ADD.L   #ENMY_W_INIT,   D3      ; Width
000016F6  2839 00001B12            855      MOVE.L  ENEMY_5_Y,      D4 
000016FC  0684 0000000A            856      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001702                           857      
00001702                           858      ; Draw Enemy    
00001702  103C 0057                859      MOVE.B  #87,        D0          ; Draw Enemy
00001706  4E4F                     860      TRAP    #15                     ; Trap (Perform action)
00001708                           861  
00001708  4E75                     862      RTS
0000170A                           863  
0000170A                           864  
0000170A                           865  *-----------------------------------------------------------
0000170A                           866  * Subroutine    : Draw bullet
0000170A                           867  * Description   : Draw Enemy bullet
0000170A                           868  *-----------------------------------------------------------
0000170A                           869  DRAW_BULLET:
0000170A                           870  ; Set Pixel Colors
0000170A  223C 00FFFF00            871      MOVE.L  #AQUA,       D1          ; Set Background color
00001710  103C 0050                872      MOVE.B  #80,        D0          ; Task for Background Color
00001714  4E4F                     873      TRAP    #15                     ; Trap (Perform action)
00001716                           874  
00001716                           875      ; Set X, Y, Width and Height
00001716  2239 00001B1E            876      MOVE.L  BULLET_X,    D1          ; X
0000171C  2439 00001B22            877      MOVE.L  BULLET_Y,    D2          ; Y
00001722  2639 00001B1E            878      MOVE.L  BULLET_X,    D3
00001728  5A83                     879      ADD.L   #BULLET_W,   D3      ; Width
0000172A  2839 00001B22            880      MOVE.L  BULLET_Y,    D4 
00001730  5A84                     881      ADD.L   #BULLET_H,   D4      ; Height
00001732                           882      
00001732                           883      ; Draw Enemy    
00001732  103C 0057                884      MOVE.B  #87,        D0          ; Draw Enemy
00001736  4E4F                     885      TRAP    #15                     ; Trap (Perform action)
00001738  4E75                     886      RTS                             ; Return to subroutine
0000173A                           887  
0000173A                           888  
0000173A                           889  DRAW_BASE:
0000173A  223C 00800080            890      MOVE.L #PURPLE,     D1
00001740  103C 0050                891      MOVE.B  #80,        D0          
00001744  4E4F                     892      TRAP    #15
00001746                           893  
00001746  223C 00800080            894      MOVE.L #PURPLE,     D1
0000174C  103C 0051                895      MOVE.B  #81,        D0          
00001750  4E4F                     896      TRAP    #15
00001752                           897  
00001752  2239 00001B1E            898      MOVE.L  BULLET_X,    D1          ; X
00001758  2439 00001B22            899      MOVE.L  BULLET_Y,    D2          ; Y
0000175E  2639 00001B1E            900      MOVE.L  BULLET_X,    D3
00001764  0683 00000064            901      ADD.L   #100,   D3      ; Width
0000176A  2839 00001B22            902      MOVE.L  BULLET_Y,    D4 
00001770  5A84                     903      ADD.L   #BULLET_H,   D4      ; Height
00001772                           904  
00001772  103C 0055                905      MOVE.B  #85,        D0          ; Draw Enemy
00001776  4E4F                     906      TRAP    #15                     ; Trap (Perform action)
00001778  4E75                     907      RTS 
0000177A                           908  
0000177A                           909  *-----------------------------------------------------------
0000177A                           910  * Subroutine    : Collision Check
0000177A                           911  * Description   : Axis-Aligned Bounding Box Collision Detection
0000177A                           912  * Algorithm checks for overlap on the 4 sides of the Player and 
0000177A                           913  * Enemy rectangles
0000177A                           914  * PLAYER_X <= ENEMY_X + ENEMY_W &&
0000177A                           915  * PLAYER_X + PLAYER_W >= ENEMY_X &&
0000177A                           916  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
0000177A                           917  * PLAYER_H + PLAYER_Y >= ENEMY_Y
0000177A                           918  *-----------------------------------------------------------
0000177A                           919  CHECK_COLLISIONS:
0000177A                           920  
0000177A  6100 0014                921      BSR CHECK_BULLET_Y_GREATER_ENEMY_1_Y
0000177E  6100 009A                922      BSR CHECK_BULLET_Y_GREATER_ENEMY_2_Y
00001782  6100 0120                923      BSR CHECK_BULLET_Y_GREATER_ENEMY_3_Y
00001786  6100 01A6                924      BSR CHECK_BULLET_Y_GREATER_ENEMY_4_Y
0000178A  6100 022C                925      BSR CHECK_BULLET_Y_GREATER_ENEMY_5_Y
0000178E                           926  
0000178E                           927  
0000178E  4E75                     928      RTS
00001790                           929  
00001790                           930  CHECK_BULLET_Y_GREATER_ENEMY_1_Y:    
00001790  4281                     931      CLR.L   D1
00001792  4282                     932      CLR.L   D2
00001794  2239 00001B22            933       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
0000179A  2439 00001AF2            934       MOVE.L  ENEMY_1_y,    D2          ; Move Enemy Y to D2
000017A0                           935  
000017A0  B481                     936       CMP.L   D1,         D2          ; Do they Overlap ?
000017A2  6C00 0026                937       BGE     CHECK_BULLET_X_LESSER_1_WIDTH  ; Less than or Equal
000017A6  6000 029A                938       BRA     COLLISION_CHECK_DONE    ; If not no collision 
000017AA                           939  
000017AA                           940  CHECK_BULLET_Y_LESSER_1_HEIGHT:    
000017AA  4281                     941      CLR.L   D1
000017AC  4282                     942      CLR.L   D2
000017AE  2239 00001B22            943      MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
000017B4  2439 00001AF2            944      MOVE.L  ENEMY_1_y,    D2          ; Move Enemy Y to D2
000017BA  0482 0000001E            945      SUB.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
000017C0  B481                     946      CMP.L   D1,         D2          ; Do they Overlap ?
000017C2  6F00 0006                947      BLE     CHECK_BULLET_X_LESSER_1_WIDTH  ; Less than or Equal
000017C6  6000 027A                948      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000017CA                           949  
000017CA                           950  CHECK_BULLET_X_LESSER_1_WIDTH:     ; Check player is not  
000017CA  4281                     951      CLR.L   D1
000017CC  4282                     952      CLR.L   D2
000017CE  2239 00001B1E            953      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
000017D4  2439 00001AEE            954      MOVE.L  ENEMY_1_X,           D2          ; Move Enemy X to D2
000017DA  0682 0000001E            955      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
000017E0  B282                     956      CMP.L   D2,             D1          ; Do they OverLap ?
000017E2  6F00 0006                957      BLE     CHECK_BULLET_X_GREATER_ENEMY_1_X ; Less than or Equal
000017E6  6000 025A                958      BRA     COLLISION_CHECK_DONE    ; If not no collision   
000017EA                           959  
000017EA                           960  CHECK_BULLET_X_GREATER_ENEMY_1_X:
000017EA  4281                     961      CLR.L   D1
000017EC  4282                     962      CLR.L   D2
000017EE  2239 00001B1E            963      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
000017F4  2439 00001AEE            964      MOVE.L  ENEMY_1_X,    D2          ; Move Enemy X to D2
000017FA  B282                     965      CMP.L   D2,         D1          ;   Do the Overlap ?
000017FC  6C00 0006                966      BGE     COLLISION_1 ; greater than or equal ?
00001800  6000 0240                967      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001804                           968  
00001804                           969  COLLISION_1:
00001804  6100 FDDC                970      BSR     PLAY_OPPS               ; Play Opps Wav
00001808  23FC 00000000 00001ADE   971      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
00001812                           972  
00001812  6100 F9D6                973      BSR RESET_ENEMY_1
00001816                           974  
00001816  6000 022A                975      BRA     COLLISION_CHECK_DONE
0000181A                           976  
0000181A                           977  CHECK_BULLET_Y_GREATER_ENEMY_2_Y:    
0000181A  4281                     978      CLR.L   D1
0000181C  4282                     979      CLR.L   D2
0000181E  2239 00001B22            980       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
00001824  2439 00001AFA            981       MOVE.L  ENEMY_2_y,    D2          ; Move Enemy Y to D2
0000182A                           982  
0000182A  B481                     983       CMP.L   D1,         D2          ; Do they Overlap ?
0000182C  6C00 0026                984       BGE     CHECK_BULLET_X_LESSER_2_WIDTH  ; Less than or Equal
00001830  6000 0210                985       BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001834                           986  
00001834                           987  CHECK_BULLET_Y_LESSER_2_HEIGHT:    
00001834  4281                     988      CLR.L   D1
00001836  4282                     989      CLR.L   D2
00001838  2239 00001B22            990      MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
0000183E  2439 00001AFA            991      MOVE.L  ENEMY_2_y,    D2          ; Move Enemy Y to D2
00001844  0482 0000001E            992      SUB.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
0000184A  B481                     993      CMP.L   D1,         D2          ; Do they Overlap ?
0000184C  6F00 0006                994      BLE     CHECK_BULLET_X_LESSER_2_WIDTH  ; Less than or Equal
00001850  6000 01F0                995      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001854                           996  
00001854                           997  CHECK_BULLET_X_LESSER_2_WIDTH:     ; Check player is not  
00001854  4281                     998      CLR.L   D1
00001856  4282                     999      CLR.L   D2
00001858  2239 00001B1E           1000      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
0000185E  2439 00001AF6           1001      MOVE.L  ENEMY_2_X,           D2          ; Move Enemy X to D2
00001864  0682 0000001E           1002      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
0000186A  B282                    1003      CMP.L   D2,             D1          ; Do they OverLap ?
0000186C  6F00 0006               1004      BLE     CHECK_BULLET_X_GREATER_ENEMY_2_X ; Less than or Equal
00001870  6000 01D0               1005      BRA     COLLISION_CHECK_DONE    ; If not no collision   
00001874                          1006  
00001874                          1007  CHECK_BULLET_X_GREATER_ENEMY_2_X:
00001874  4281                    1008      CLR.L   D1
00001876  4282                    1009      CLR.L   D2
00001878  2239 00001B1E           1010      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
0000187E  2439 00001AF6           1011      MOVE.L  ENEMY_2_X,    D2          ; Move Enemy X to D2
00001884  B282                    1012      CMP.L   D2,         D1          ;   Do the Overlap ?
00001886  6C00 0006               1013      BGE     COLLISION_2 ; greater than or equal ?
0000188A  6000 01B6               1014      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000188E                          1015  
0000188E                          1016  COLLISION_2:
0000188E  6100 FD52               1017      BSR     PLAY_OPPS               ; Play Opps Wav
00001892  23FC 00000000 00001ADE  1018      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
0000189C                          1019  
0000189C  6100 F970               1020      BSR RESET_ENEMY_2
000018A0                          1021  
000018A0  6000 01A0               1022      BRA     COLLISION_CHECK_DONE
000018A4                          1023  
000018A4                          1024  CHECK_BULLET_Y_GREATER_ENEMY_3_Y:    
000018A4  4281                    1025      CLR.L   D1
000018A6  4282                    1026      CLR.L   D2
000018A8  2239 00001B22           1027       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
000018AE  2439 00001B02           1028       MOVE.L  ENEMY_3_y,    D2          ; Move Enemy Y to D2
000018B4                          1029  
000018B4  B481                    1030       CMP.L   D1,         D2          ; Do they Overlap ?
000018B6  6C00 0026               1031       BGE     CHECK_BULLET_X_LESSER_3_WIDTH  ; Less than or Equal
000018BA  6000 0186               1032       BRA     COLLISION_CHECK_DONE    ; If not no collision 
000018BE                          1033  
000018BE                          1034  CHECK_BULLET_Y_LESSER_3_HEIGHT:    
000018BE  4281                    1035      CLR.L   D1
000018C0  4282                    1036      CLR.L   D2
000018C2  2239 00001B22           1037      MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
000018C8  2439 00001B02           1038      MOVE.L  ENEMY_3_y,    D2          ; Move Enemy Y to D2
000018CE  0482 0000001E           1039      SUB.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
000018D4  B481                    1040      CMP.L   D1,         D2          ; Do they Overlap ?
000018D6  6F00 0006               1041      BLE     CHECK_BULLET_X_LESSER_3_WIDTH  ; Less than or Equal
000018DA  6000 0166               1042      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000018DE                          1043  
000018DE                          1044  CHECK_BULLET_X_LESSER_3_WIDTH:     ; Check player is not  
000018DE  4281                    1045      CLR.L   D1
000018E0  4282                    1046      CLR.L   D2
000018E2  2239 00001B1E           1047      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
000018E8  2439 00001AFE           1048      MOVE.L  ENEMY_3_X,           D2          ; Move Enemy X to D2
000018EE  0682 0000001E           1049      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
000018F4  B282                    1050      CMP.L   D2,             D1          ; Do they OverLap ?
000018F6  6F00 0006               1051      BLE     CHECK_BULLET_X_GREATER_ENEMY_3_X ; Less than or Equal
000018FA  6000 0146               1052      BRA     COLLISION_CHECK_DONE    ; If not no collision   
000018FE                          1053  
000018FE                          1054  CHECK_BULLET_X_GREATER_ENEMY_3_X:
000018FE  4281                    1055      CLR.L   D1
00001900  4282                    1056      CLR.L   D2
00001902  2239 00001B1E           1057      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
00001908  2439 00001AFE           1058      MOVE.L  ENEMY_3_X,    D2          ; Move Enemy X to D2
0000190E  B282                    1059      CMP.L   D2,         D1          ;   Do the Overlap ?
00001910  6C00 0006               1060      BGE     COLLISION_3 ; greater than or equal ?
00001914  6000 012C               1061      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001918                          1062  
00001918                          1063  COLLISION_3:
00001918  6100 FCC8               1064      BSR     PLAY_OPPS               ; Play Opps Wav
0000191C  23FC 00000000 00001ADE  1065      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
00001926                          1066  
00001926  6100 F90A               1067      BSR RESET_ENEMY_3
0000192A                          1068  
0000192A  6000 0116               1069      BRA     COLLISION_CHECK_DONE
0000192E                          1070  
0000192E                          1071  CHECK_BULLET_Y_GREATER_ENEMY_4_Y:    
0000192E  4281                    1072      CLR.L   D1
00001930  4282                    1073      CLR.L   D2
00001932  2239 00001B22           1074       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
00001938  2439 00001B0A           1075       MOVE.L  ENEMY_4_y,    D2          ; Move Enemy Y to D2
0000193E                          1076  
0000193E  B481                    1077       CMP.L   D1,         D2          ; Do they Overlap ?
00001940  6C00 0026               1078       BGE     CHECK_BULLET_X_LESSER_4_WIDTH  ; Less than or Equal
00001944  6000 00FC               1079       BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001948                          1080  
00001948                          1081  CHECK_BULLET_Y_LESSER_4_HEIGHT:    
00001948  4281                    1082      CLR.L   D1
0000194A  4282                    1083      CLR.L   D2
0000194C  2239 00001B22           1084      MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
00001952  2439 00001B0A           1085      MOVE.L  ENEMY_4_y,    D2          ; Move Enemy Y to D2
00001958  0482 0000001E           1086      SUB.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
0000195E  B481                    1087      CMP.L   D1,         D2          ; Do they Overlap ?
00001960  6F00 0006               1088      BLE     CHECK_BULLET_X_LESSER_4_WIDTH  ; Less than or Equal
00001964  6000 00DC               1089      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001968                          1090  
00001968                          1091  CHECK_BULLET_X_LESSER_4_WIDTH:     ; Check player is not  
00001968  4281                    1092      CLR.L   D1
0000196A  4282                    1093      CLR.L   D2
0000196C  2239 00001B1E           1094      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
00001972  2439 00001B06           1095      MOVE.L  ENEMY_4_X,           D2          ; Move Enemy X to D2
00001978  0682 0000001E           1096      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
0000197E  B282                    1097      CMP.L   D2,             D1          ; Do they OverLap ?
00001980  6F00 0006               1098      BLE     CHECK_BULLET_X_GREATER_ENEMY_4_X ; Less than or Equal
00001984  6000 00BC               1099      BRA     COLLISION_CHECK_DONE    ; If not no collision   
00001988                          1100  
00001988                          1101  CHECK_BULLET_X_GREATER_ENEMY_4_X:
00001988  4281                    1102      CLR.L   D1
0000198A  4282                    1103      CLR.L   D2
0000198C  2239 00001B1E           1104      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
00001992  2439 00001B06           1105      MOVE.L  ENEMY_4_X,    D2          ; Move Enemy X to D2
00001998  B282                    1106      CMP.L   D2,         D1          ;   Do the Overlap ?
0000199A  6C00 0006               1107      BGE     COLLISION_4 ; greater than or equal ?
0000199E  6000 00A2               1108      BRA     COLLISION_CHECK_DONE    ; If not no collision
000019A2                          1109  
000019A2                          1110  COLLISION_4:
000019A2  6100 FC3E               1111      BSR     PLAY_OPPS               ; Play Opps Wav
000019A6  23FC 00000000 00001ADE  1112      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
000019B0                          1113  
000019B0  6100 F8A4               1114      BSR RESET_ENEMY_4
000019B4                          1115  
000019B4  6000 008C               1116      BRA     COLLISION_CHECK_DONE
000019B8                          1117  
000019B8                          1118  CHECK_BULLET_Y_GREATER_ENEMY_5_Y:    
000019B8  4281                    1119      CLR.L   D1
000019BA  4282                    1120      CLR.L   D2
000019BC  2239 00001B22           1121       MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
000019C2  2439 00001B12           1122       MOVE.L  ENEMY_5_y,    D2          ; Move Enemy Y to D2
000019C8                          1123  
000019C8  B481                    1124       CMP.L   D1,         D2          ; Do they Overlap ?
000019CA  6C00 0026               1125       BGE     CHECK_BULLET_X_LESSER_5_WIDTH  ; Less than or Equal
000019CE  6000 0072               1126       BRA     COLLISION_CHECK_DONE    ; If not no collision 
000019D2                          1127  
000019D2                          1128  CHECK_BULLET_Y_LESSER_5_HEIGHT:    
000019D2  4281                    1129      CLR.L   D1
000019D4  4282                    1130      CLR.L   D2
000019D6  2239 00001B22           1131      MOVE.L  Bullet_Y,   D1          ; Move Player Y to D1
000019DC  2439 00001B12           1132      MOVE.L  ENEMY_5_y,    D2          ; Move Enemy Y to D2
000019E2  0482 0000001E           1133      SUB.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
000019E8  B481                    1134      CMP.L   D1,         D2          ; Do they Overlap ?
000019EA  6F00 0006               1135      BLE     CHECK_BULLET_X_LESSER_5_WIDTH  ; Less than or Equal
000019EE  6000 0052               1136      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000019F2                          1137  
000019F2                          1138  CHECK_BULLET_X_LESSER_5_WIDTH:     ; Check player is not  
000019F2  4281                    1139      CLR.L   D1
000019F4  4282                    1140      CLR.L   D2
000019F6  2239 00001B1E           1141      MOVE.L   Bullet_X,      D1          ; Move Player Width to D1
000019FC  2439 00001B0E           1142      MOVE.L  ENEMY_5_X,           D2          ; Move Enemy X to D2
00001A02  0682 0000001E           1143      ADD.L   #ENMY_W_INIT,    D2         ; add enemy width to its x position to get its right corner position
00001A08  B282                    1144      CMP.L   D2,             D1          ; Do they OverLap ?
00001A0A  6F00 0006               1145      BLE     CHECK_BULLET_X_GREATER_ENEMY_5_X ; Less than or Equal
00001A0E  6000 0032               1146      BRA     COLLISION_CHECK_DONE    ; If not no collision   
00001A12                          1147  
00001A12                          1148  CHECK_BULLET_X_GREATER_ENEMY_5_X:
00001A12  4281                    1149      CLR.L   D1
00001A14  4282                    1150      CLR.L   D2
00001A16  2239 00001B1E           1151      MOVE.L  Bullet_X,   D1          ; Move bullet X to D1
00001A1C  2439 00001B0E           1152      MOVE.L  ENEMY_5_X,    D2          ; Move Enemy X to D2
00001A22  B282                    1153      CMP.L   D2,         D1          ;   Do the Overlap ?
00001A24  6C00 0006               1154      BGE     COLLISION_5 ; greater than or equal ?
00001A28  6000 0018               1155      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001A2C                          1156  
00001A2C                          1157  COLLISION_5:
00001A2C  6100 FBB4               1158      BSR     PLAY_OPPS               ; Play Opps Wav
00001A30  23FC 00000000 00001ADE  1159      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
00001A3A                          1160  
00001A3A  6100 F83E               1161      BSR RESET_ENEMY_5
00001A3E                          1162  
00001A3E  6000 0002               1163      BRA     COLLISION_CHECK_DONE
00001A42                          1164  
00001A42                          1165  
00001A42                          1166  
00001A42                          1167  
00001A42                          1168  COLLISION_CHECK_DONE:               ; No Collision Update points
00001A42                          1169  
00001A42                          1170  
00001A42  5281                    1171      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001A44  D2B9 00001ADE           1172      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001A4A  23C1 00001ADE           1173      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001A50                          1174  
00001A50  4E75                    1175      RTS                             ; Return to subroutine
00001A52                          1176  
00001A52                          1177  
00001A52                          1178  
00001A52                          1179  * PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00001A52                          1180  *      ADD.L   #Bullet_H,D1          ; Add Player Height to D1
00001A52                          1181  *      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00001A52                          1182  *      CMP.L   D1,         D2          ; Do they OverLap ?
00001A52                          1183  *      BGE     COLLISION               ; Collision !
00001A52                          1184  *      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001A52                          1185  
00001A52                          1186  
00001A52                          1187  
00001A52                          1188  *-----------------------------------------------------------
00001A52                          1189  * Subroutine    : EXIT
00001A52                          1190  * Description   : Exit message and End Game
00001A52                          1191  *-----------------------------------------------------------
00001A52                          1192  EXIT:
00001A52                          1193      ; Show if Exiting is Running
00001A52  103C 000B               1194      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001A56  323C 4004               1195      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001A5A  4E4F                    1196      TRAP    #15                     ; Trap (Perform action)
00001A5C  43F9 00001ABD           1197      LEA     EXIT_MSG,   A1          ; Exit
00001A62  303C 000D               1198      MOVE    #13,        D0          ; No Line feed
00001A66  4E4F                    1199      TRAP    #15                     ; Trap (Perform action)
00001A68  103C 0009               1200      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001A6C  4E4F                    1201      TRAP    #15                     ; Trap (Perform action)
00001A6E  FFFF FFFF               1202      SIMHALT
00001A72                          1203  
00001A72                          1204  *-----------------------------------------------------------
00001A72                          1205  * Section       : Messages
00001A72                          1206  * Description   : Messages to Print on Console, names should be
00001A72                          1207  * self documenting
00001A72                          1208  *-----------------------------------------------------------
00001A72                          1209  
00001A72                          1210  * BASICALLY VARIABLES DECALRED AT BTTOM 
00001A72                          1211  * dc.b is text
00001A72                          1212  * ds.b is number 
00001A72                          1213  * becarefull how you store l/b, long/byte
00001A72= 4C 49 56 45 53 20 ...   1214  SCORE_MSG       DC.B    'LIVES : ', 0       ; Score Message
00001A7B= 4B 65 79 43 6F 64 ...   1215  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
00001A86= 4A 75 6D 70 2E 2E ...   1216  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00001A8F                          1217  
00001A8F= 49 64 6C 65 2E 2E ...   1218  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
00001A98= 55 70 64 61 74 65 ...   1219  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
00001AA3= 44 72 61 77 2E 2E ...   1220  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00001AAC                          1221  
00001AAC= 58 3A 00                1222  X_MSG           DC.B    'X:', 0             ; X Position Message
00001AAF= 59 3A 00                1223  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00001AB2= 56 3A 00                1224  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
00001AB5= 47 3A 00                1225  G_MSG           DC.B    'G:', 0             ; Gravity Position Message
00001AB8= 47 4E 44 3A 00          1226  GND_MSG         DC.B    'GND:', 0           ; On Ground Position Message
00001ABD                          1227  
00001ABD= 45 78 69 74 69 6E ...   1228  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00001AC9                          1229  
00001AC9                          1230  *-----------------------------------------------------------
00001AC9                          1231  * Section       : Graphic Colors
00001AC9                          1232  * Description   : Screen Pixel Color
00001AC9                          1233  *-----------------------------------------------------------
00001AC9  =00FFFFFF               1234  WHITE           EQU     $00FFFFFF
00001AC9  =000000FF               1235  RED             EQU     $000000FF
00001AC9  =00FFFF00               1236  AQUA            EQU     $00FFFF00
00001AC9  =00800080               1237  PURPLE          EQU     $00800080
00001AC9                          1238  
00001AC9                          1239  
00001AC9                          1240  *-----------------------------------------------------------
00001AC9                          1241  * Section       : Screen Size
00001AC9                          1242  * Description   : Screen Width and Height
00001AC9                          1243  *-----------------------------------------------------------
00001ACA                          1244  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00001ACC                          1245  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001ACE                          1246  
00001ACE                          1247  *-----------------------------------------------------------
00001ACE                          1248  * Section       : Bullet status
00001ACE                          1249  * Description   : whether bullet has been shot or not
00001ACE                          1250  * 0 = false
00001ACE                          1251  * 1 = true
00001ACE                          1252  *-----------------------------------------------------------
00001ACE                          1253  BEEN_SHOT       DS.L    01      ; reserve of space
00001AD2                          1254  *-----------------------------------------------------------
00001AD2                          1255  * Section       : Keyboard Input
00001AD2                          1256  * Description   : Used for storing Keypresses
00001AD2                          1257  *-----------------------------------------------------------
00001AD2                          1258  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001AD6                          1259  
00001AD6                          1260  *-----------------------------------------------------------
00001AD6                          1261  * Section       : Character Positions
00001AD6                          1262  * Description   : Player and Enemy Position Memory Locations
00001AD6                          1263  *-----------------------------------------------------------
00001AD6                          1264  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001ADA                          1265  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001ADE                          1266  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001AE2                          1267  
00001AE2                          1268  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001AE6                          1269  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00001AEA                          1270  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00001AEE                          1271  
00001AEE                          1272  ENEMY_1_X         DS.L    01 ; Reserve Space for Enemy X Position
00001AF2                          1273  ENEMY_1_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001AF6                          1274  
00001AF6                          1275  ENEMY_2_X         DS.L    01
00001AFA                          1276  ENEMY_2_Y         DS.L    01
00001AFE                          1277  
00001AFE                          1278  ENEMY_3_X         DS.L    01 ; Reserve Space for Enemy X Position
00001B02                          1279  ENEMY_3_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001B06                          1280  
00001B06                          1281  ENEMY_4_X         DS.L    01
00001B0A                          1282  ENEMY_4_Y         DS.l    01
00001B0E                          1283  
00001B0E                          1284  ENEMY_5_X         DS.L    01 ; Reserve Space for Enemy X Position
00001B12                          1285  ENEMY_5_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001B16                          1286  
00001B16                          1287  
00001B16                          1288  ENEMY_MOVING_R    DS.L    01  ; RES SPACE FOR MOVING RIGHT BOOLEAN
00001B1A                          1289  
00001B1A                          1290  ENEMY_SPEED_MODIFIER DS.L 01
00001B1E                          1291  BULLET_X        DS.L    01   ; space for bullet x pos    
00001B22                          1292  BULLET_Y        DS.L    01   ; space for bullet y pos
00001B26                          1293  
00001B26                          1294  *-----------------------------------------------------------
00001B26                          1295  * Section       : TIme
00001B26                          1296  * Description   : Sound files, which are then loaded and given
00001B26                          1297  * an address in memory, they take a longtime to process and play
00001B26                          1298  * so keep the files small. Used https://voicemaker.in/ to 
00001B26                          1299  * generate and Audacity to convert MP3 to WAV
00001B26                          1300  *-----------------------------------------------------------
00001B26                          1301  DELTA_TIME      DS.L   01 ; empty 
00001B2A                          1302  
00001B2A                          1303  *-----------------------------------------------------------
00001B2A                          1304  * Section       : Sounds
00001B2A                          1305  * Description   : Sound files, which are then loaded and given
00001B2A                          1306  * an address in memory, they take a longtime to process and play
00001B2A                          1307  * so keep the files small. Used https://voicemaker.in/ to 
00001B2A                          1308  * generate and Audacity to convert MP3 to WAV
00001B2A                          1309  *-----------------------------------------------------------
00001B2A= 6A 75 6D 70 2E 77 ...   1310  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00001B33= 72 75 6E 2E 77 61 ...   1311  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
00001B3B= 6F 70 70 73 2E 77 ...   1312  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001B44                          1313  
00001B44                          1314      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
AQUA                FFFF00
BEEN_SHOT           1ACE
BULLET_H            5
BULLET_SPEED        50
BULLET_TRACK_PLAYER  129E
BULLET_W            5
BULLET_X            1B1E
BULLET_Y            1B22
CHECK_BULLET_X_GREATER_ENEMY_1_X  17EA
CHECK_BULLET_X_GREATER_ENEMY_2_X  1874
CHECK_BULLET_X_GREATER_ENEMY_3_X  18FE
CHECK_BULLET_X_GREATER_ENEMY_4_X  1988
CHECK_BULLET_X_GREATER_ENEMY_5_X  1A12
CHECK_BULLET_X_LESSER_1_WIDTH  17CA
CHECK_BULLET_X_LESSER_2_WIDTH  1854
CHECK_BULLET_X_LESSER_3_WIDTH  18DE
CHECK_BULLET_X_LESSER_4_WIDTH  1968
CHECK_BULLET_X_LESSER_5_WIDTH  19F2
CHECK_BULLET_Y_GREATER_ENEMY_1_Y  1790
CHECK_BULLET_Y_GREATER_ENEMY_2_Y  181A
CHECK_BULLET_Y_GREATER_ENEMY_3_Y  18A4
CHECK_BULLET_Y_GREATER_ENEMY_4_Y  192E
CHECK_BULLET_Y_GREATER_ENEMY_5_Y  19B8
CHECK_BULLET_Y_LESSER_1_HEIGHT  17AA
CHECK_BULLET_Y_LESSER_2_HEIGHT  1834
CHECK_BULLET_Y_LESSER_3_HEIGHT  18BE
CHECK_BULLET_Y_LESSER_4_HEIGHT  1948
CHECK_BULLET_Y_LESSER_5_HEIGHT  19D2
CHECK_COLLISIONS    177A
CHECK_ENEMY_RESETS  11BC
CHECK_ENEMY_RESET_1  11D2
CHECK_ENEMY_RESET_2  11F6
CHECK_ENEMY_RESET_3  121A
CHECK_ENEMY_RESET_4  123E
CHECK_ENEMY_RESET_5  1262
CHECK_FOR_BULLET_RESPAWN  1286
COLLISION_1         1804
COLLISION_2         188E
COLLISION_3         1918
COLLISION_4         19A2
COLLISION_5         1A2C
COLLISION_CHECK_DONE  1A42
CURRENT_KEY         1AD2
D                   44
DELTA_T             1160
DELTA_TIME          1B26
DRAW                1330
DRAW_BASE           173A
DRAW_BULLET         170A
DRAW_ENEMYS         161E
DRAW_ENEMY_1        1636
DRAW_ENEMY_2        1660
DRAW_ENEMY_3        168A
DRAW_ENEMY_4        16B4
DRAW_ENEMY_5        16DE
DRAW_MSG            1AA3
DRAW_PLAYER         15EE
DRAW_PLYR_DATA      1356
ENEMY_1_X           1AEE
ENEMY_1_Y           1AF2
ENEMY_2_X           1AF6
ENEMY_2_Y           1AFA
ENEMY_3_X           1AFE
ENEMY_3_Y           1B02
ENEMY_4_X           1B06
ENEMY_4_Y           1B0A
ENEMY_5_X           1B0E
ENEMY_5_Y           1B12
ENEMY_MOVE_DOWN     1196
ENEMY_MOVING_R      1B16
ENEMY_SPEED         5
ENEMY_SPEED_MODIFIER  1B1A
ENMY_H_INIT         A
ENMY_W_INIT         1E
ESCAPE              1B
EXIT                1A52
EXIT_MSG            1ABD
GAME                1138
GAMELOOP            113C
GND_FALSE           0
GND_MSG             1AB8
GND_TRUE            1
G_MSG               1AB5
IDLE                1548
IDLE_MSG            1A8F
INITIALISE          1000
INITIALISE_ENEMYS   10A2
INPUT               12C0
IS_PLAYER_ON_GND    14D0
JMP_INDEX           1
JUMP                1524
JUMP_DONE           1546
JUMP_LOAD           15B2
JUMP_MSG            1A86
JUMP_WAV            1B2A
KEYCODE_MSG         1A7B
MOVEMENT_DONE       1592
MOVE_DOWN           1582
MOVE_LEFT           1562
MOVE_RIGHT          154E
NUM_OF_ENEMYS       2
OPPS_INDEX          2
OPPS_LOAD           15D0
OPPS_WAV            1B3B
PERFORM_JUMP        1536
PERFORM_MOVE_DOWN   158C
PERFORM_MOVE_LEFT   156A
PERFORM_MOVE_RIGHT  1556
PLAYER_SCORE        1ADE
PLAYER_X            1AD6
PLAYER_Y            1ADA
PLAY_JUMP           15C4
PLAY_OPPS           15E2
PLAY_RUN            15A6
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1AE6
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         1AEA
PLYR_POS_MOVEMENT   1
PLYR_VELOCITY       1AE2
PLYR_W_INIT         8
POINTS              1
PURPLE              800080
RED                 FF
RESET_ENEMY_1       11EA
RESET_ENEMY_2       120E
RESET_ENEMY_3       1232
RESET_ENEMY_4       1256
RESET_ENEMY_5       127A
RESPAWN_BULLET      1296
RUN_INDEX           0
RUN_LOAD            1594
RUN_WAV             1B33
S                   53
SCORE_MSG           1A72
SCREEN_H            1ACC
SCREEN_W            1ACA
SET_OFF_GROUND      1518
SET_ON_GROUND       14F0
SHOOT               1576
SHOOT_BULLET        12B4
SPACEBAR            20
SPEED               14
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              1314
UPDATE_BULLET       1176
UPDATE_ENEMYS       118C
UPDATE_MSG          1A98
V_MSG               1AB2
W                   57
WHITE               FFFFFF
X_MSG               1AAC
Y_MSG               1AAF
